
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080050f0  080050f0  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f0  080050f0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200000f0  080051e8  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  080051e8  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c31  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af6  00000000  00000000  00034d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00037840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00038860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019636  00000000  00000000  00039780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147e8  00000000  00000000  00052db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da66  00000000  00000000  0006759e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5004  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000469c  00000000  00000000  000f5058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ecc 	.word	0x08004ecc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	08004ecc 	.word	0x08004ecc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <init_led>:
 *      Author: Dell
 */

#include "Traffic_Light_FSM.h"

void init_led(){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	turnOffAllLED();
 8000160:	f000 f802 	bl	8000168 <turnOffAllLED>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}

08000168 <turnOffAllLED>:
void turnOffAllLED(void) {
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED1_B_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000172:	4805      	ldr	r0, [pc, #20]	; (8000188 <turnOffAllLED+0x20>)
 8000174:	f002 faf7 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <turnOffAllLED+0x24>)
 8000180:	f002 faf1 	bl	8002766 <HAL_GPIO_WritePin>
}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	40010c00 	.word	0x40010c00
 800018c:	40010800 	.word	0x40010800

08000190 <turnOnRed1>:

// Turn on RED LED for specified way
void turnOnRed1() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED1_B_Pin, GPIO_PIN_SET);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800019a:	4802      	ldr	r0, [pc, #8]	; (80001a4 <turnOnRed1+0x14>)
 800019c:	f002 fae3 	bl	8002766 <HAL_GPIO_WritePin>
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40010c00 	.word	0x40010c00

080001a8 <turnOnAmber1>:

// Turn on AMBER LED for specified way
void turnOnAmber1() {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, GPIO_PIN_RESET);
 80001ac:	2200      	movs	r2, #0
 80001ae:	2110      	movs	r1, #16
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <turnOnAmber1+0x20>)
 80001b2:	f002 fad8 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, GPIO_PIN_SET);
 80001b6:	2201      	movs	r2, #1
 80001b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001bc:	4802      	ldr	r0, [pc, #8]	; (80001c8 <turnOnAmber1+0x20>)
 80001be:	f002 fad2 	bl	8002766 <HAL_GPIO_WritePin>
}
 80001c2:	bf00      	nop
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	40010c00 	.word	0x40010c00

080001cc <turnOnGreen1>:

// Turn on GREEN LED for specified way
void turnOnGreen1() {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d6:	4805      	ldr	r0, [pc, #20]	; (80001ec <turnOnGreen1+0x20>)
 80001d8:	f002 fac5 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	2110      	movs	r1, #16
 80001e0:	4802      	ldr	r0, [pc, #8]	; (80001ec <turnOnGreen1+0x20>)
 80001e2:	f002 fac0 	bl	8002766 <HAL_GPIO_WritePin>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <turnOnRed2>:
void turnOnRed2() {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin|LED2_B_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80001fa:	4802      	ldr	r0, [pc, #8]	; (8000204 <turnOnRed2+0x14>)
 80001fc:	f002 fab3 	bl	8002766 <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010800 	.word	0x40010800

08000208 <turnOnAmber2>:

// Turn on AMBER LED for specified way
void turnOnAmber2() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000212:	4805      	ldr	r0, [pc, #20]	; (8000228 <turnOnAmber2+0x20>)
 8000214:	f002 faa7 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800021e:	4802      	ldr	r0, [pc, #8]	; (8000228 <turnOnAmber2+0x20>)
 8000220:	f002 faa1 	bl	8002766 <HAL_GPIO_WritePin>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010800 	.word	0x40010800

0800022c <turnOnGreen2>:

// Turn on GREEN LED for specified way
void turnOnGreen2() {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <turnOnGreen2+0x20>)
 8000238:	f002 fa95 	bl	8002766 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000242:	4802      	ldr	r0, [pc, #8]	; (800024c <turnOnGreen2+0x20>)
 8000244:	f002 fa8f 	bl	8002766 <HAL_GPIO_WritePin>
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40010800 	.word	0x40010800

08000250 <blinkyRed>:
// Blink RED LEDs
void blinkyRed(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    if (timerFlag[5] == 1) {
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <blinkyRed+0x38>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d113      	bne.n	8000284 <blinkyRed+0x34>
        HAL_GPIO_TogglePin(GPIOA,LED2_B_Pin|LED2_A_Pin);
 800025c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000260:	480a      	ldr	r0, [pc, #40]	; (800028c <blinkyRed+0x3c>)
 8000262:	f002 fa98 	bl	8002796 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_A_Pin | LED1_B_Pin);
 8000266:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800026a:	4809      	ldr	r0, [pc, #36]	; (8000290 <blinkyRed+0x40>)
 800026c:	f002 fa93 	bl	8002796 <HAL_GPIO_TogglePin>
		count--;
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <blinkyRed+0x44>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <blinkyRed+0x44>)
 8000278:	6013      	str	r3, [r2, #0]
        settimer1(5, 1000);
 800027a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800027e:	2005      	movs	r0, #5
 8000280:	f001 fd7a 	bl	8001d78 <settimer1>
    }
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	200005c4 	.word	0x200005c4
 800028c:	40010800 	.word	0x40010800
 8000290:	40010c00 	.word	0x40010c00
 8000294:	20000068 	.word	0x20000068

08000298 <blinkyAmber>:

// Blink AMBER LEDs
void blinkyAmber(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    if (timerFlag[7] == 1) {
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <blinkyAmber+0x50>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d11e      	bne.n	80002e2 <blinkyAmber+0x4a>
        HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2110      	movs	r1, #16
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <blinkyAmber+0x54>)
 80002aa:	f002 fa5c 	bl	8002766 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_B_Pin);
 80002ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b2:	480e      	ldr	r0, [pc, #56]	; (80002ec <blinkyAmber+0x54>)
 80002b4:	f002 fa6f 	bl	8002796 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002be:	480c      	ldr	r0, [pc, #48]	; (80002f0 <blinkyAmber+0x58>)
 80002c0:	f002 fa51 	bl	8002766 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, LED2_B_Pin);
 80002c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c8:	4809      	ldr	r0, [pc, #36]	; (80002f0 <blinkyAmber+0x58>)
 80002ca:	f002 fa64 	bl	8002796 <HAL_GPIO_TogglePin>
		count1--;
 80002ce:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <blinkyAmber+0x5c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <blinkyAmber+0x5c>)
 80002d6:	6013      	str	r3, [r2, #0]
        settimer1(7, 1000);
 80002d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002dc:	2007      	movs	r0, #7
 80002de:	f001 fd4b 	bl	8001d78 <settimer1>
    }
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	200005c4 	.word	0x200005c4
 80002ec:	40010c00 	.word	0x40010c00
 80002f0:	40010800 	.word	0x40010800
 80002f4:	2000006c 	.word	0x2000006c

080002f8 <blinkyGreen>:

// Blink GREEN LEDs
void blinkyGreen(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
    if (timerFlag[6] == 1) {
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <blinkyGreen+0x50>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d11e      	bne.n	8000342 <blinkyGreen+0x4a>
        HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030a:	4810      	ldr	r0, [pc, #64]	; (800034c <blinkyGreen+0x54>)
 800030c:	f002 fa2b 	bl	8002766 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_A_Pin);
 8000310:	2110      	movs	r1, #16
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <blinkyGreen+0x54>)
 8000314:	f002 fa3f 	bl	8002796 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031e:	480c      	ldr	r0, [pc, #48]	; (8000350 <blinkyGreen+0x58>)
 8000320:	f002 fa21 	bl	8002766 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, LED2_A_Pin);
 8000324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <blinkyGreen+0x58>)
 800032a:	f002 fa34 	bl	8002796 <HAL_GPIO_TogglePin>
        count2--;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <blinkyGreen+0x5c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	3b01      	subs	r3, #1
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <blinkyGreen+0x5c>)
 8000336:	6013      	str	r3, [r2, #0]
        settimer1(6, 1000);
 8000338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800033c:	2006      	movs	r0, #6
 800033e:	f001 fd1b 	bl	8001d78 <settimer1>
    }
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200005c4 	.word	0x200005c4
 800034c:	40010c00 	.word	0x40010c00
 8000350:	40010800 	.word	0x40010800
 8000354:	20000070 	.word	0x20000070

08000358 <clearRoadLed>:

// Clear all road LEDs
void clearRoadLed(void) {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    turnOffAllLED();
 800035c:	f7ff ff04 	bl	8000168 <turnOffAllLED>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}

08000364 <isButtonPressed>:
int TimeOutForKeyPress[NUM_BUTTONS] = {1000};
int button_pressed[NUM_BUTTONS] = {0};
int button_long_pressed[NUM_BUTTONS] = {0};
int button_flag[NUM_BUTTONS] = {0};

int isButtonPressed(int button_index){
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
    if(button_flag[button_index] == 1 && TimeOutForKeyPress[button_index]!= 0 ){
 800036c:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <isButtonPressed+0x3c>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10c      	bne.n	8000392 <isButtonPressed+0x2e>
 8000378:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <isButtonPressed+0x40>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d006      	beq.n	8000392 <isButtonPressed+0x2e>
        button_flag[button_index] = 0;
 8000384:	4a06      	ldr	r2, [pc, #24]	; (80003a0 <isButtonPressed+0x3c>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2100      	movs	r1, #0
 800038a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 800038e:	2301      	movs	r3, #1
 8000390:	e000      	b.n	8000394 <isButtonPressed+0x30>
    }
    return 0;
 8000392:	2300      	movs	r3, #0
}
 8000394:	4618      	mov	r0, r3
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	2000012c 	.word	0x2000012c
 80003a4:	20000040 	.word	0x20000040

080003a8 <isButtonLongPressed>:

int isButtonLongPressed(int button_index){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
    if(button_long_pressed[button_index] == 1){
 80003b0:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <isButtonLongPressed+0x30>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d106      	bne.n	80003ca <isButtonLongPressed+0x22>
        button_long_pressed[button_index] = 0;
 80003bc:	4a06      	ldr	r2, [pc, #24]	; (80003d8 <isButtonLongPressed+0x30>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2100      	movs	r1, #0
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 80003c6:	2301      	movs	r3, #1
 80003c8:	e000      	b.n	80003cc <isButtonLongPressed+0x24>
    }
    return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000011c 	.word	0x2000011c

080003dc <display_timerRed>:

void display_timerRed() {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
    lcd_clear_display();
 80003e2:	f001 f900 	bl	80015e6 <lcd_clear_display>
//    HAL_Delay(1);
    clearRoadLed();
 80003e6:	f7ff ffb7 	bl	8000358 <clearRoadLed>
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "meRED:%d", countRed);
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <display_timerRed+0x34>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4638      	mov	r0, r7
 80003f0:	4a08      	ldr	r2, [pc, #32]	; (8000414 <display_timerRed+0x38>)
 80003f2:	2110      	movs	r1, #16
 80003f4:	f004 f8fc 	bl	80045f0 <sniprintf>
    lcd_goto_XY(1, 0);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2001      	movs	r0, #1
 80003fc:	f001 f8fa 	bl	80015f4 <lcd_goto_XY>
    lcd_send_string(buffer);
 8000400:	463b      	mov	r3, r7
 8000402:	4618      	mov	r0, r3
 8000404:	f001 f8da 	bl	80015bc <lcd_send_string>
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000005c 	.word	0x2000005c
 8000414:	08004ee4 	.word	0x08004ee4

08000418 <display_timerGreen>:

void display_timerGreen() {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
    lcd_clear_display();
 800041e:	f001 f8e2 	bl	80015e6 <lcd_clear_display>
//    HAL_Delay(1);
    clearRoadLed();
 8000422:	f7ff ff99 	bl	8000358 <clearRoadLed>
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "meGREEN:%d", countGreen);
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <display_timerGreen+0x34>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4638      	mov	r0, r7
 800042c:	4a08      	ldr	r2, [pc, #32]	; (8000450 <display_timerGreen+0x38>)
 800042e:	2110      	movs	r1, #16
 8000430:	f004 f8de 	bl	80045f0 <sniprintf>
    lcd_goto_XY(1, 0);
 8000434:	2100      	movs	r1, #0
 8000436:	2001      	movs	r0, #1
 8000438:	f001 f8dc 	bl	80015f4 <lcd_goto_XY>
    lcd_send_string(buffer);
 800043c:	463b      	mov	r3, r7
 800043e:	4618      	mov	r0, r3
 8000440:	f001 f8bc 	bl	80015bc <lcd_send_string>
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000054 	.word	0x20000054
 8000450:	08004ef0 	.word	0x08004ef0

08000454 <display_timerAmber>:

void display_timerAmber() {
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
    lcd_clear_display();
 800045a:	f001 f8c4 	bl	80015e6 <lcd_clear_display>
//    HAL_Delay(1);
    clearRoadLed();
 800045e:	f7ff ff7b 	bl	8000358 <clearRoadLed>
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "meYELLOW:%d", countYellow);
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <display_timerAmber+0x34>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4638      	mov	r0, r7
 8000468:	4a08      	ldr	r2, [pc, #32]	; (800048c <display_timerAmber+0x38>)
 800046a:	2110      	movs	r1, #16
 800046c:	f004 f8c0 	bl	80045f0 <sniprintf>
    lcd_goto_XY(1, 0);
 8000470:	2100      	movs	r1, #0
 8000472:	2001      	movs	r0, #1
 8000474:	f001 f8be 	bl	80015f4 <lcd_goto_XY>
    lcd_send_string(buffer);
 8000478:	463b      	mov	r3, r7
 800047a:	4618      	mov	r0, r3
 800047c:	f001 f89e 	bl	80015bc <lcd_send_string>
}
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000058 	.word	0x20000058
 800048c:	08004efc 	.word	0x08004efc

08000490 <subKeyProcess>:

char str1[50];
void subKeyProcess(int button_index) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b03      	cmp	r3, #3
 800049c:	f200 823b 	bhi.w	8000916 <subKeyProcess+0x486>
 80004a0:	a201      	add	r2, pc, #4	; (adr r2, 80004a8 <subKeyProcess+0x18>)
 80004a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a6:	bf00      	nop
 80004a8:	080004b9 	.word	0x080004b9
 80004ac:	080005e9 	.word	0x080005e9
 80004b0:	080008d9 	.word	0x080008d9
 80004b4:	08000781 	.word	0x08000781
        case 0:
//        	if(MODE==1){
//        		currentmode=2 ;
//        	}
//            display7SEG_mode(currentmode);
            MODE = currentmode;
 80004b8:	4ba0      	ldr	r3, [pc, #640]	; (800073c <subKeyProcess+0x2ac>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4aa0      	ldr	r2, [pc, #640]	; (8000740 <subKeyProcess+0x2b0>)
 80004be:	6013      	str	r3, [r2, #0]
            if(MODE==2){
 80004c0:	4b9f      	ldr	r3, [pc, #636]	; (8000740 <subKeyProcess+0x2b0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d127      	bne.n	8000518 <subKeyProcess+0x88>
            	count=10;
 80004c8:	4b9e      	ldr	r3, [pc, #632]	; (8000744 <subKeyProcess+0x2b4>)
 80004ca:	220a      	movs	r2, #10
 80004cc:	601a      	str	r2, [r3, #0]
            	sprintf(str1, "!MODE 2 : TIMERED#\r\n");
 80004ce:	499e      	ldr	r1, [pc, #632]	; (8000748 <subKeyProcess+0x2b8>)
 80004d0:	489e      	ldr	r0, [pc, #632]	; (800074c <subKeyProcess+0x2bc>)
 80004d2:	f004 f8c1 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 80004d6:	489d      	ldr	r0, [pc, #628]	; (800074c <subKeyProcess+0x2bc>)
 80004d8:	f7ff fe38 	bl	800014c <strlen>
 80004dc:	4603      	mov	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004e4:	4999      	ldr	r1, [pc, #612]	; (800074c <subKeyProcess+0x2bc>)
 80004e6:	489a      	ldr	r0, [pc, #616]	; (8000750 <subKeyProcess+0x2c0>)
 80004e8:	f003 fe7c 	bl	80041e4 <HAL_UART_Transmit>
            	sprintf(str1, "!TIMERED# : %d\r\n",countRed);
 80004ec:	4b99      	ldr	r3, [pc, #612]	; (8000754 <subKeyProcess+0x2c4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	461a      	mov	r2, r3
 80004f2:	4999      	ldr	r1, [pc, #612]	; (8000758 <subKeyProcess+0x2c8>)
 80004f4:	4895      	ldr	r0, [pc, #596]	; (800074c <subKeyProcess+0x2bc>)
 80004f6:	f004 f8af 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 80004fa:	4894      	ldr	r0, [pc, #592]	; (800074c <subKeyProcess+0x2bc>)
 80004fc:	f7ff fe26 	bl	800014c <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000508:	4990      	ldr	r1, [pc, #576]	; (800074c <subKeyProcess+0x2bc>)
 800050a:	4891      	ldr	r0, [pc, #580]	; (8000750 <subKeyProcess+0x2c0>)
 800050c:	f003 fe6a 	bl	80041e4 <HAL_UART_Transmit>
                display_timerRed();
 8000510:	f7ff ff64 	bl	80003dc <display_timerRed>
                blinkyRed();
 8000514:	f7ff fe9c 	bl	8000250 <blinkyRed>
            }
            if(MODE==3){
 8000518:	4b89      	ldr	r3, [pc, #548]	; (8000740 <subKeyProcess+0x2b0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d127      	bne.n	8000570 <subKeyProcess+0xe0>
            	count1=10;
 8000520:	4b8e      	ldr	r3, [pc, #568]	; (800075c <subKeyProcess+0x2cc>)
 8000522:	220a      	movs	r2, #10
 8000524:	601a      	str	r2, [r3, #0]
            	sprintf(str1, "!MODE 3 : TIMEYELLOW#\r\n");
 8000526:	498e      	ldr	r1, [pc, #568]	; (8000760 <subKeyProcess+0x2d0>)
 8000528:	4888      	ldr	r0, [pc, #544]	; (800074c <subKeyProcess+0x2bc>)
 800052a:	f004 f895 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 800052e:	4887      	ldr	r0, [pc, #540]	; (800074c <subKeyProcess+0x2bc>)
 8000530:	f7ff fe0c 	bl	800014c <strlen>
 8000534:	4603      	mov	r3, r0
 8000536:	b29a      	uxth	r2, r3
 8000538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800053c:	4983      	ldr	r1, [pc, #524]	; (800074c <subKeyProcess+0x2bc>)
 800053e:	4884      	ldr	r0, [pc, #528]	; (8000750 <subKeyProcess+0x2c0>)
 8000540:	f003 fe50 	bl	80041e4 <HAL_UART_Transmit>
            	sprintf(str1, "!TIMEYELLOW# : %d\r\n",countYellow);
 8000544:	4b87      	ldr	r3, [pc, #540]	; (8000764 <subKeyProcess+0x2d4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4987      	ldr	r1, [pc, #540]	; (8000768 <subKeyProcess+0x2d8>)
 800054c:	487f      	ldr	r0, [pc, #508]	; (800074c <subKeyProcess+0x2bc>)
 800054e:	f004 f883 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 8000552:	487e      	ldr	r0, [pc, #504]	; (800074c <subKeyProcess+0x2bc>)
 8000554:	f7ff fdfa 	bl	800014c <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000560:	497a      	ldr	r1, [pc, #488]	; (800074c <subKeyProcess+0x2bc>)
 8000562:	487b      	ldr	r0, [pc, #492]	; (8000750 <subKeyProcess+0x2c0>)
 8000564:	f003 fe3e 	bl	80041e4 <HAL_UART_Transmit>
                display_timerAmber();
 8000568:	f7ff ff74 	bl	8000454 <display_timerAmber>
            	blinkyAmber();
 800056c:	f7ff fe94 	bl	8000298 <blinkyAmber>
            }
            if(MODE==4){
 8000570:	4b73      	ldr	r3, [pc, #460]	; (8000740 <subKeyProcess+0x2b0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b04      	cmp	r3, #4
 8000576:	d127      	bne.n	80005c8 <subKeyProcess+0x138>
            	count2=10;
 8000578:	4b7c      	ldr	r3, [pc, #496]	; (800076c <subKeyProcess+0x2dc>)
 800057a:	220a      	movs	r2, #10
 800057c:	601a      	str	r2, [r3, #0]
            	sprintf(str1, "!MODE 4 : TIMEGREEN#\r\n");
 800057e:	497c      	ldr	r1, [pc, #496]	; (8000770 <subKeyProcess+0x2e0>)
 8000580:	4872      	ldr	r0, [pc, #456]	; (800074c <subKeyProcess+0x2bc>)
 8000582:	f004 f869 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 8000586:	4871      	ldr	r0, [pc, #452]	; (800074c <subKeyProcess+0x2bc>)
 8000588:	f7ff fde0 	bl	800014c <strlen>
 800058c:	4603      	mov	r3, r0
 800058e:	b29a      	uxth	r2, r3
 8000590:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000594:	496d      	ldr	r1, [pc, #436]	; (800074c <subKeyProcess+0x2bc>)
 8000596:	486e      	ldr	r0, [pc, #440]	; (8000750 <subKeyProcess+0x2c0>)
 8000598:	f003 fe24 	bl	80041e4 <HAL_UART_Transmit>
            	sprintf(str1, "!TIMEGREEN# : %d\r\n",countGreen);
 800059c:	4b75      	ldr	r3, [pc, #468]	; (8000774 <subKeyProcess+0x2e4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	4975      	ldr	r1, [pc, #468]	; (8000778 <subKeyProcess+0x2e8>)
 80005a4:	4869      	ldr	r0, [pc, #420]	; (800074c <subKeyProcess+0x2bc>)
 80005a6:	f004 f857 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 80005aa:	4868      	ldr	r0, [pc, #416]	; (800074c <subKeyProcess+0x2bc>)
 80005ac:	f7ff fdce 	bl	800014c <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b8:	4964      	ldr	r1, [pc, #400]	; (800074c <subKeyProcess+0x2bc>)
 80005ba:	4865      	ldr	r0, [pc, #404]	; (8000750 <subKeyProcess+0x2c0>)
 80005bc:	f003 fe12 	bl	80041e4 <HAL_UART_Transmit>
                display_timerGreen();
 80005c0:	f7ff ff2a 	bl	8000418 <display_timerGreen>
                blinkyGreen();
 80005c4:	f7ff fe98 	bl	80002f8 <blinkyGreen>
            }
            currentmode++;
 80005c8:	4b5c      	ldr	r3, [pc, #368]	; (800073c <subKeyProcess+0x2ac>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	4a5b      	ldr	r2, [pc, #364]	; (800073c <subKeyProcess+0x2ac>)
 80005d0:	6013      	str	r3, [r2, #0]
            if(currentmode > 4) currentmode =2;
 80005d2:	4b5a      	ldr	r3, [pc, #360]	; (800073c <subKeyProcess+0x2ac>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	dd02      	ble.n	80005e0 <subKeyProcess+0x150>
 80005da:	4b58      	ldr	r3, [pc, #352]	; (800073c <subKeyProcess+0x2ac>)
 80005dc:	2202      	movs	r2, #2
 80005de:	601a      	str	r2, [r3, #0]
            status=INIT;
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <subKeyProcess+0x2ec>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
            break;
 80005e6:	e196      	b.n	8000916 <subKeyProcess+0x486>
        case 1:
        	if(MODE!=1){
 80005e8:	4b55      	ldr	r3, [pc, #340]	; (8000740 <subKeyProcess+0x2b0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	f000 818d 	beq.w	800090c <subKeyProcess+0x47c>
        	if( MODE==2){
 80005f2:	4b53      	ldr	r3, [pc, #332]	; (8000740 <subKeyProcess+0x2b0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d130      	bne.n	800065c <subKeyProcess+0x1cc>
        			count=10;
 80005fa:	4b52      	ldr	r3, [pc, #328]	; (8000744 <subKeyProcess+0x2b4>)
 80005fc:	220a      	movs	r2, #10
 80005fe:	601a      	str	r2, [r3, #0]
                    countRed++;
 8000600:	4b54      	ldr	r3, [pc, #336]	; (8000754 <subKeyProcess+0x2c4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	4a53      	ldr	r2, [pc, #332]	; (8000754 <subKeyProcess+0x2c4>)
 8000608:	6013      	str	r3, [r2, #0]
                    countGreen++;
 800060a:	4b5a      	ldr	r3, [pc, #360]	; (8000774 <subKeyProcess+0x2e4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	4a58      	ldr	r2, [pc, #352]	; (8000774 <subKeyProcess+0x2e4>)
 8000612:	6013      	str	r3, [r2, #0]
                    if(countRed>99) countRed=1;
 8000614:	4b4f      	ldr	r3, [pc, #316]	; (8000754 <subKeyProcess+0x2c4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b63      	cmp	r3, #99	; 0x63
 800061a:	dd02      	ble.n	8000622 <subKeyProcess+0x192>
 800061c:	4b4d      	ldr	r3, [pc, #308]	; (8000754 <subKeyProcess+0x2c4>)
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
                    if(countGreen>99) countGreen=1;
 8000622:	4b54      	ldr	r3, [pc, #336]	; (8000774 <subKeyProcess+0x2e4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b63      	cmp	r3, #99	; 0x63
 8000628:	dd02      	ble.n	8000630 <subKeyProcess+0x1a0>
 800062a:	4b52      	ldr	r3, [pc, #328]	; (8000774 <subKeyProcess+0x2e4>)
 800062c:	2201      	movs	r2, #1
 800062e:	601a      	str	r2, [r3, #0]
                    display_timerRed();
 8000630:	f7ff fed4 	bl	80003dc <display_timerRed>
                	sprintf(str1, "!TIMERED# : %d\r\n",countRed);
 8000634:	4b47      	ldr	r3, [pc, #284]	; (8000754 <subKeyProcess+0x2c4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4947      	ldr	r1, [pc, #284]	; (8000758 <subKeyProcess+0x2c8>)
 800063c:	4843      	ldr	r0, [pc, #268]	; (800074c <subKeyProcess+0x2bc>)
 800063e:	f004 f80b 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 8000642:	4842      	ldr	r0, [pc, #264]	; (800074c <subKeyProcess+0x2bc>)
 8000644:	f7ff fd82 	bl	800014c <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	b29a      	uxth	r2, r3
 800064c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000650:	493e      	ldr	r1, [pc, #248]	; (800074c <subKeyProcess+0x2bc>)
 8000652:	483f      	ldr	r0, [pc, #252]	; (8000750 <subKeyProcess+0x2c0>)
 8000654:	f003 fdc6 	bl	80041e4 <HAL_UART_Transmit>
                    blinkyRed();
 8000658:	f7ff fdfa 	bl	8000250 <blinkyRed>
        	}
        	if( MODE==3){
 800065c:	4b38      	ldr	r3, [pc, #224]	; (8000740 <subKeyProcess+0x2b0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d133      	bne.n	80006cc <subKeyProcess+0x23c>
        		count1=10;
 8000664:	4b3d      	ldr	r3, [pc, #244]	; (800075c <subKeyProcess+0x2cc>)
 8000666:	220a      	movs	r2, #10
 8000668:	601a      	str	r2, [r3, #0]
                    countYellow++;
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <subKeyProcess+0x2d4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a3c      	ldr	r2, [pc, #240]	; (8000764 <subKeyProcess+0x2d4>)
 8000672:	6013      	str	r3, [r2, #0]
                    countRed++;
 8000674:	4b37      	ldr	r3, [pc, #220]	; (8000754 <subKeyProcess+0x2c4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a36      	ldr	r2, [pc, #216]	; (8000754 <subKeyProcess+0x2c4>)
 800067c:	6013      	str	r3, [r2, #0]
                    status=GREEN_RED;
 800067e:	4b3f      	ldr	r3, [pc, #252]	; (800077c <subKeyProcess+0x2ec>)
 8000680:	2202      	movs	r2, #2
 8000682:	601a      	str	r2, [r3, #0]
                    if(countRed>99) countRed=1;
 8000684:	4b33      	ldr	r3, [pc, #204]	; (8000754 <subKeyProcess+0x2c4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b63      	cmp	r3, #99	; 0x63
 800068a:	dd02      	ble.n	8000692 <subKeyProcess+0x202>
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <subKeyProcess+0x2c4>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
                    if(countYellow>99) countYellow=1;
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <subKeyProcess+0x2d4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b63      	cmp	r3, #99	; 0x63
 8000698:	dd02      	ble.n	80006a0 <subKeyProcess+0x210>
 800069a:	4b32      	ldr	r3, [pc, #200]	; (8000764 <subKeyProcess+0x2d4>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
                    display_timerAmber();
 80006a0:	f7ff fed8 	bl	8000454 <display_timerAmber>
                	sprintf(str1, "!TIMEYELLOW# : %d\r\n",countYellow);
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <subKeyProcess+0x2d4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	492f      	ldr	r1, [pc, #188]	; (8000768 <subKeyProcess+0x2d8>)
 80006ac:	4827      	ldr	r0, [pc, #156]	; (800074c <subKeyProcess+0x2bc>)
 80006ae:	f003 ffd3 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 80006b2:	4826      	ldr	r0, [pc, #152]	; (800074c <subKeyProcess+0x2bc>)
 80006b4:	f7ff fd4a 	bl	800014c <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c0:	4922      	ldr	r1, [pc, #136]	; (800074c <subKeyProcess+0x2bc>)
 80006c2:	4823      	ldr	r0, [pc, #140]	; (8000750 <subKeyProcess+0x2c0>)
 80006c4:	f003 fd8e 	bl	80041e4 <HAL_UART_Transmit>
                	blinkyAmber();
 80006c8:	f7ff fde6 	bl	8000298 <blinkyAmber>
        	}
        	if( MODE==4){
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <subKeyProcess+0x2b0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b04      	cmp	r3, #4
 80006d2:	f040 811b 	bne.w	800090c <subKeyProcess+0x47c>
        		count2=10;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <subKeyProcess+0x2dc>)
 80006d8:	220a      	movs	r2, #10
 80006da:	601a      	str	r2, [r3, #0]
                    countRed++;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <subKeyProcess+0x2c4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <subKeyProcess+0x2c4>)
 80006e4:	6013      	str	r3, [r2, #0]
                    countGreen++;
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <subKeyProcess+0x2e4>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a21      	ldr	r2, [pc, #132]	; (8000774 <subKeyProcess+0x2e4>)
 80006ee:	6013      	str	r3, [r2, #0]
                    if(countRed>99) countRed=1;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <subKeyProcess+0x2c4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b63      	cmp	r3, #99	; 0x63
 80006f6:	dd02      	ble.n	80006fe <subKeyProcess+0x26e>
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <subKeyProcess+0x2c4>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
                    if(countGreen>99) countGreen=1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <subKeyProcess+0x2e4>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b63      	cmp	r3, #99	; 0x63
 8000704:	dd02      	ble.n	800070c <subKeyProcess+0x27c>
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <subKeyProcess+0x2e4>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
                    display_timerGreen();
 800070c:	f7ff fe84 	bl	8000418 <display_timerGreen>
                	sprintf(str1, "!TIMEGREEN# : %d\r\n",countGreen);
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <subKeyProcess+0x2e4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4918      	ldr	r1, [pc, #96]	; (8000778 <subKeyProcess+0x2e8>)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <subKeyProcess+0x2bc>)
 800071a:	f003 ff9d 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <subKeyProcess+0x2bc>)
 8000720:	f7ff fd14 	bl	800014c <strlen>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800072c:	4907      	ldr	r1, [pc, #28]	; (800074c <subKeyProcess+0x2bc>)
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <subKeyProcess+0x2c0>)
 8000730:	f003 fd58 	bl	80041e4 <HAL_UART_Transmit>
                    blinkyGreen();
 8000734:	f7ff fde0 	bl	80002f8 <blinkyGreen>
        	}
        	}
            break;
 8000738:	e0e8      	b.n	800090c <subKeyProcess+0x47c>
 800073a:	bf00      	nop
 800073c:	20000060 	.word	0x20000060
 8000740:	20000064 	.word	0x20000064
 8000744:	20000068 	.word	0x20000068
 8000748:	08004f08 	.word	0x08004f08
 800074c:	2000014c 	.word	0x2000014c
 8000750:	2000025c 	.word	0x2000025c
 8000754:	2000005c 	.word	0x2000005c
 8000758:	08004f20 	.word	0x08004f20
 800075c:	2000006c 	.word	0x2000006c
 8000760:	08004f34 	.word	0x08004f34
 8000764:	20000058 	.word	0x20000058
 8000768:	08004f4c 	.word	0x08004f4c
 800076c:	20000070 	.word	0x20000070
 8000770:	08004f60 	.word	0x08004f60
 8000774:	20000054 	.word	0x20000054
 8000778:	08004f78 	.word	0x08004f78
 800077c:	20000050 	.word	0x20000050
        case 3:
        	if(MODE !=1 ){
 8000780:	4b69      	ldr	r3, [pc, #420]	; (8000928 <subKeyProcess+0x498>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	f000 80c3 	beq.w	8000910 <subKeyProcess+0x480>
        	if( MODE==2){
 800078a:	4b67      	ldr	r3, [pc, #412]	; (8000928 <subKeyProcess+0x498>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b02      	cmp	r3, #2
 8000790:	d13c      	bne.n	800080c <subKeyProcess+0x37c>
        		count=10;
 8000792:	4b66      	ldr	r3, [pc, #408]	; (800092c <subKeyProcess+0x49c>)
 8000794:	220a      	movs	r2, #10
 8000796:	601a      	str	r2, [r3, #0]
        		if(countGreen>0){
 8000798:	4b65      	ldr	r3, [pc, #404]	; (8000930 <subKeyProcess+0x4a0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd09      	ble.n	80007b4 <subKeyProcess+0x324>
                    countRed--;
 80007a0:	4b64      	ldr	r3, [pc, #400]	; (8000934 <subKeyProcess+0x4a4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	4a63      	ldr	r2, [pc, #396]	; (8000934 <subKeyProcess+0x4a4>)
 80007a8:	6013      	str	r3, [r2, #0]
                    countGreen--;
 80007aa:	4b61      	ldr	r3, [pc, #388]	; (8000930 <subKeyProcess+0x4a0>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	4a5f      	ldr	r2, [pc, #380]	; (8000930 <subKeyProcess+0x4a0>)
 80007b2:	6013      	str	r3, [r2, #0]
        		}
        		if(countGreen == 0){
 80007b4:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <subKeyProcess+0x4a0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d109      	bne.n	80007d0 <subKeyProcess+0x340>
                    countRed--;
 80007bc:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <subKeyProcess+0x4a4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	4a5c      	ldr	r2, [pc, #368]	; (8000934 <subKeyProcess+0x4a4>)
 80007c4:	6013      	str	r3, [r2, #0]
                    countYellow--;
 80007c6:	4b5c      	ldr	r3, [pc, #368]	; (8000938 <subKeyProcess+0x4a8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	4a5a      	ldr	r2, [pc, #360]	; (8000938 <subKeyProcess+0x4a8>)
 80007ce:	6013      	str	r3, [r2, #0]
        		}
        		if(countRed<0) countRed=0;
 80007d0:	4b58      	ldr	r3, [pc, #352]	; (8000934 <subKeyProcess+0x4a4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	da02      	bge.n	80007de <subKeyProcess+0x34e>
 80007d8:	4b56      	ldr	r3, [pc, #344]	; (8000934 <subKeyProcess+0x4a4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
                display_timerRed();
 80007de:	f7ff fdfd 	bl	80003dc <display_timerRed>
            	sprintf(str1, "!TIMERED# : %d\r\n",countRed);
 80007e2:	4b54      	ldr	r3, [pc, #336]	; (8000934 <subKeyProcess+0x4a4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4954      	ldr	r1, [pc, #336]	; (800093c <subKeyProcess+0x4ac>)
 80007ea:	4855      	ldr	r0, [pc, #340]	; (8000940 <subKeyProcess+0x4b0>)
 80007ec:	f003 ff34 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 80007f0:	4853      	ldr	r0, [pc, #332]	; (8000940 <subKeyProcess+0x4b0>)
 80007f2:	f7ff fcab 	bl	800014c <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007fe:	4950      	ldr	r1, [pc, #320]	; (8000940 <subKeyProcess+0x4b0>)
 8000800:	4850      	ldr	r0, [pc, #320]	; (8000944 <subKeyProcess+0x4b4>)
 8000802:	f003 fcef 	bl	80041e4 <HAL_UART_Transmit>
                blinkyRed();
 8000806:	f7ff fd23 	bl	8000250 <blinkyRed>
            	sprintf(str1, "!TIMEGREEN# : %d\r\n",countGreen);
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
                blinkyGreen();
        	}
        	}
            break;
 800080a:	e081      	b.n	8000910 <subKeyProcess+0x480>
        	else if( MODE==3){
 800080c:	4b46      	ldr	r3, [pc, #280]	; (8000928 <subKeyProcess+0x498>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b03      	cmp	r3, #3
 8000812:	d12e      	bne.n	8000872 <subKeyProcess+0x3e2>
        		count1=10;
 8000814:	4b4c      	ldr	r3, [pc, #304]	; (8000948 <subKeyProcess+0x4b8>)
 8000816:	220a      	movs	r2, #10
 8000818:	601a      	str	r2, [r3, #0]
        		if(countYellow>0){
 800081a:	4b47      	ldr	r3, [pc, #284]	; (8000938 <subKeyProcess+0x4a8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	dd09      	ble.n	8000836 <subKeyProcess+0x3a6>
                    countRed--;
 8000822:	4b44      	ldr	r3, [pc, #272]	; (8000934 <subKeyProcess+0x4a4>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	3b01      	subs	r3, #1
 8000828:	4a42      	ldr	r2, [pc, #264]	; (8000934 <subKeyProcess+0x4a4>)
 800082a:	6013      	str	r3, [r2, #0]
                    countYellow--;
 800082c:	4b42      	ldr	r3, [pc, #264]	; (8000938 <subKeyProcess+0x4a8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	4a41      	ldr	r2, [pc, #260]	; (8000938 <subKeyProcess+0x4a8>)
 8000834:	6013      	str	r3, [r2, #0]
        		if(countYellow<0) {
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <subKeyProcess+0x4a8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	da02      	bge.n	8000844 <subKeyProcess+0x3b4>
        			countYellow=0;
 800083e:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <subKeyProcess+0x4a8>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
                display_timerAmber();
 8000844:	f7ff fe06 	bl	8000454 <display_timerAmber>
            	sprintf(str1, "!TIMEYELLOW# : %d\r\n",countYellow);
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <subKeyProcess+0x4a8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	493f      	ldr	r1, [pc, #252]	; (800094c <subKeyProcess+0x4bc>)
 8000850:	483b      	ldr	r0, [pc, #236]	; (8000940 <subKeyProcess+0x4b0>)
 8000852:	f003 ff01 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 8000856:	483a      	ldr	r0, [pc, #232]	; (8000940 <subKeyProcess+0x4b0>)
 8000858:	f7ff fc78 	bl	800014c <strlen>
 800085c:	4603      	mov	r3, r0
 800085e:	b29a      	uxth	r2, r3
 8000860:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000864:	4936      	ldr	r1, [pc, #216]	; (8000940 <subKeyProcess+0x4b0>)
 8000866:	4837      	ldr	r0, [pc, #220]	; (8000944 <subKeyProcess+0x4b4>)
 8000868:	f003 fcbc 	bl	80041e4 <HAL_UART_Transmit>
            	blinkyAmber();
 800086c:	f7ff fd14 	bl	8000298 <blinkyAmber>
            break;
 8000870:	e04e      	b.n	8000910 <subKeyProcess+0x480>
        	else if( MODE==4){
 8000872:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <subKeyProcess+0x498>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b04      	cmp	r3, #4
 8000878:	d14a      	bne.n	8000910 <subKeyProcess+0x480>
        		count2=10;
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <subKeyProcess+0x4c0>)
 800087c:	220a      	movs	r2, #10
 800087e:	601a      	str	r2, [r3, #0]
        		if(countGreen>0){
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <subKeyProcess+0x4a0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dd09      	ble.n	800089c <subKeyProcess+0x40c>
                    countRed--;
 8000888:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <subKeyProcess+0x4a4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	3b01      	subs	r3, #1
 800088e:	4a29      	ldr	r2, [pc, #164]	; (8000934 <subKeyProcess+0x4a4>)
 8000890:	6013      	str	r3, [r2, #0]
                    countGreen--;
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <subKeyProcess+0x4a0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3b01      	subs	r3, #1
 8000898:	4a25      	ldr	r2, [pc, #148]	; (8000930 <subKeyProcess+0x4a0>)
 800089a:	6013      	str	r3, [r2, #0]
        		if(countGreen<0) countGreen=0;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <subKeyProcess+0x4a0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da02      	bge.n	80008aa <subKeyProcess+0x41a>
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <subKeyProcess+0x4a0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
                display_timerGreen();
 80008aa:	f7ff fdb5 	bl	8000418 <display_timerGreen>
            	sprintf(str1, "!TIMEGREEN# : %d\r\n",countGreen);
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <subKeyProcess+0x4a0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4927      	ldr	r1, [pc, #156]	; (8000954 <subKeyProcess+0x4c4>)
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <subKeyProcess+0x4b0>)
 80008b8:	f003 fece 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 500);
 80008bc:	4820      	ldr	r0, [pc, #128]	; (8000940 <subKeyProcess+0x4b0>)
 80008be:	f7ff fc45 	bl	800014c <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008ca:	491d      	ldr	r1, [pc, #116]	; (8000940 <subKeyProcess+0x4b0>)
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <subKeyProcess+0x4b4>)
 80008ce:	f003 fc89 	bl	80041e4 <HAL_UART_Transmit>
                blinkyGreen();
 80008d2:	f7ff fd11 	bl	80002f8 <blinkyGreen>
            break;
 80008d6:	e01b      	b.n	8000910 <subKeyProcess+0x480>
        case 2:
        	if(MODE!=1){
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <subKeyProcess+0x498>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d019      	beq.n	8000914 <subKeyProcess+0x484>
            status=INIT;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <subKeyProcess+0x4c8>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
            MODE = 1;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <subKeyProcess+0x498>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	601a      	str	r2, [r3, #0]
            red=countRed;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <subKeyProcess+0x4a4>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <subKeyProcess+0x4cc>)
 80008f2:	6013      	str	r3, [r2, #0]
            green=countGreen;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <subKeyProcess+0x4a0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a19      	ldr	r2, [pc, #100]	; (8000960 <subKeyProcess+0x4d0>)
 80008fa:	6013      	str	r3, [r2, #0]
            yellow=countYellow;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <subKeyProcess+0x4a8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a18      	ldr	r2, [pc, #96]	; (8000964 <subKeyProcess+0x4d4>)
 8000902:	6013      	str	r3, [r2, #0]
//            display7SEG_mode(MODE);
            currentmode = 2;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <subKeyProcess+0x4d8>)
 8000906:	2202      	movs	r2, #2
 8000908:	601a      	str	r2, [r3, #0]
        	}
        	break;
 800090a:	e003      	b.n	8000914 <subKeyProcess+0x484>
            break;
 800090c:	bf00      	nop
 800090e:	e002      	b.n	8000916 <subKeyProcess+0x486>
            break;
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <subKeyProcess+0x486>
        	break;
 8000914:	bf00      	nop
    }
    button_flag[button_index] = 1;
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <subKeyProcess+0x4dc>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2101      	movs	r1, #1
 800091c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000064 	.word	0x20000064
 800092c:	20000068 	.word	0x20000068
 8000930:	20000054 	.word	0x20000054
 8000934:	2000005c 	.word	0x2000005c
 8000938:	20000058 	.word	0x20000058
 800093c:	08004f20 	.word	0x08004f20
 8000940:	2000014c 	.word	0x2000014c
 8000944:	2000025c 	.word	0x2000025c
 8000948:	2000006c 	.word	0x2000006c
 800094c:	08004f4c 	.word	0x08004f4c
 8000950:	20000070 	.word	0x20000070
 8000954:	08004f78 	.word	0x08004f78
 8000958:	20000050 	.word	0x20000050
 800095c:	200001bc 	.word	0x200001bc
 8000960:	200001b8 	.word	0x200001b8
 8000964:	200001b4 	.word	0x200001b4
 8000968:	20000060 	.word	0x20000060
 800096c:	2000012c 	.word	0x2000012c

08000970 <getKeyInput>:
void getKeyInput() {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
    KeyReg2[0] = KeyReg1[0];
 8000976:	4b5f      	ldr	r3, [pc, #380]	; (8000af4 <getKeyInput+0x184>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a5f      	ldr	r2, [pc, #380]	; (8000af8 <getKeyInput+0x188>)
 800097c:	6013      	str	r3, [r2, #0]
    KeyReg1[0] = KeyReg0[0];
 800097e:	4b5f      	ldr	r3, [pc, #380]	; (8000afc <getKeyInput+0x18c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a5c      	ldr	r2, [pc, #368]	; (8000af4 <getKeyInput+0x184>)
 8000984:	6013      	str	r3, [r2, #0]
    KeyReg2[1] = KeyReg1[1];
 8000986:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <getKeyInput+0x184>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a5b      	ldr	r2, [pc, #364]	; (8000af8 <getKeyInput+0x188>)
 800098c:	6053      	str	r3, [r2, #4]
    KeyReg1[1] = KeyReg0[1];
 800098e:	4b5b      	ldr	r3, [pc, #364]	; (8000afc <getKeyInput+0x18c>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	4a58      	ldr	r2, [pc, #352]	; (8000af4 <getKeyInput+0x184>)
 8000994:	6053      	str	r3, [r2, #4]
    KeyReg2[2] = KeyReg1[2];
 8000996:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <getKeyInput+0x184>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <getKeyInput+0x188>)
 800099c:	6093      	str	r3, [r2, #8]
    KeyReg1[2] = KeyReg0[2];
 800099e:	4b57      	ldr	r3, [pc, #348]	; (8000afc <getKeyInput+0x18c>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	4a54      	ldr	r2, [pc, #336]	; (8000af4 <getKeyInput+0x184>)
 80009a4:	6093      	str	r3, [r2, #8]
    KeyReg2[3] = KeyReg1[3];
 80009a6:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <getKeyInput+0x184>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	4a53      	ldr	r2, [pc, #332]	; (8000af8 <getKeyInput+0x188>)
 80009ac:	60d3      	str	r3, [r2, #12]
    KeyReg1[3] = KeyReg0[3];
 80009ae:	4b53      	ldr	r3, [pc, #332]	; (8000afc <getKeyInput+0x18c>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	4a50      	ldr	r2, [pc, #320]	; (8000af4 <getKeyInput+0x184>)
 80009b4:	60d3      	str	r3, [r2, #12]

    KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	4851      	ldr	r0, [pc, #324]	; (8000b00 <getKeyInput+0x190>)
 80009ba:	f001 febd 	bl	8002738 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <getKeyInput+0x18c>)
 80009c4:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	484e      	ldr	r0, [pc, #312]	; (8000b04 <getKeyInput+0x194>)
 80009ca:	f001 feb5 	bl	8002738 <HAL_GPIO_ReadPin>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <getKeyInput+0x18c>)
 80009d4:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80009d6:	2120      	movs	r1, #32
 80009d8:	4849      	ldr	r0, [pc, #292]	; (8000b00 <getKeyInput+0x190>)
 80009da:	f001 fead 	bl	8002738 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <getKeyInput+0x18c>)
 80009e4:	609a      	str	r2, [r3, #8]
    KeyReg0[3] = HAL_GPIO_ReadPin(BUTTON4_GPIO_Port, BUTTON4_Pin);
 80009e6:	2108      	movs	r1, #8
 80009e8:	4845      	ldr	r0, [pc, #276]	; (8000b00 <getKeyInput+0x190>)
 80009ea:	f001 fea5 	bl	8002738 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <getKeyInput+0x18c>)
 80009f4:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < NUM_BUTTONS; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e073      	b.n	8000ae4 <getKeyInput+0x174>
        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80009fc:	4a3d      	ldr	r2, [pc, #244]	; (8000af4 <getKeyInput+0x184>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a04:	493d      	ldr	r1, [pc, #244]	; (8000afc <getKeyInput+0x18c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d166      	bne.n	8000ade <getKeyInput+0x16e>
 8000a10:	4a38      	ldr	r2, [pc, #224]	; (8000af4 <getKeyInput+0x184>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a18:	4937      	ldr	r1, [pc, #220]	; (8000af8 <getKeyInput+0x188>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d15c      	bne.n	8000ade <getKeyInput+0x16e>
            if (KeyReg2[i] != KeyReg3[i]) {
 8000a24:	4a34      	ldr	r2, [pc, #208]	; (8000af8 <getKeyInput+0x188>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2c:	4936      	ldr	r1, [pc, #216]	; (8000b08 <getKeyInput+0x198>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d02e      	beq.n	8000a96 <getKeyInput+0x126>
                KeyReg3[i] = KeyReg2[i];
 8000a38:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <getKeyInput+0x188>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a40:	4931      	ldr	r1, [pc, #196]	; (8000b08 <getKeyInput+0x198>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg3[i] == PRESSED_STATE) {
 8000a48:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <getKeyInput+0x198>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10b      	bne.n	8000a6c <getKeyInput+0xfc>
                    TimeOutForKeyPress[i] = 1000; // Đặt lại thời gian chờ cho nhấn lâu
 8000a54:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <getKeyInput+0x19c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    button_pressed[i] = 1; // Đánh dấu là đã nhấn
 8000a60:	4a2b      	ldr	r2, [pc, #172]	; (8000b10 <getKeyInput+0x1a0>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2101      	movs	r1, #1
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a6a:	e038      	b.n	8000ade <getKeyInput+0x16e>
                } else {
                    if (button_pressed[i] && TimeOutForKeyPress[i] > 0) {
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <getKeyInput+0x1a0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d032      	beq.n	8000ade <getKeyInput+0x16e>
 8000a78:	4a24      	ldr	r2, [pc, #144]	; (8000b0c <getKeyInput+0x19c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dd2c      	ble.n	8000ade <getKeyInput+0x16e>
                        // Phát hiện nhấn ngắn
                        subKeyProcess(i);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff fd03 	bl	8000490 <subKeyProcess>
                        button_pressed[i] = 0; // Đặt lại trạng thái nhấn
 8000a8a:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <getKeyInput+0x1a0>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a94:	e023      	b.n	8000ade <getKeyInput+0x16e>
                    }
                }
            } else {
                if (KeyReg3[i] == PRESSED_STATE) {
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <getKeyInput+0x198>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d11d      	bne.n	8000ade <getKeyInput+0x16e>
                    TimeOutForKeyPress[i]--;
 8000aa2:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <getKeyInput+0x19c>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	4917      	ldr	r1, [pc, #92]	; (8000b0c <getKeyInput+0x19c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    if (TimeOutForKeyPress[i] == 0) {
 8000ab4:	4a15      	ldr	r2, [pc, #84]	; (8000b0c <getKeyInput+0x19c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d10e      	bne.n	8000ade <getKeyInput+0x16e>
                        // Phát hiện nhấn lâu
                        button_long_pressed[i] = 1;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <getKeyInput+0x1a4>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        button_flag[i] = 0; // Đảm bảo không đặt cờ nhấn ngắn
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <getKeyInput+0x1a8>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        button_pressed[i] = 0; // Đặt lại trạng thái nhấn
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <getKeyInput+0x1a0>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	dd88      	ble.n	80009fc <getKeyInput+0x8c>
                    }
                }
            }
        }
    }
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000010 	.word	0x20000010
 8000af8:	20000020 	.word	0x20000020
 8000afc:	20000000 	.word	0x20000000
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	40011000 	.word	0x40011000
 8000b08:	20000030 	.word	0x20000030
 8000b0c:	20000040 	.word	0x20000040
 8000b10:	2000010c 	.word	0x2000010c
 8000b14:	2000011c 	.word	0x2000011c
 8000b18:	2000012c 	.word	0x2000012c

08000b1c <automatic_run>:
#include <stdio.h>
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart2;
char str[50];
void automatic_run() {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0a0      	sub	sp, #128	; 0x80
 8000b20:	af00      	add	r7, sp, #0
	if(MODE == 1){
 8000b22:	4b86      	ldr	r3, [pc, #536]	; (8000d3c <automatic_run+0x220>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	f040 831a 	bne.w	8001160 <automatic_run+0x644>
    switch (status) {
 8000b2c:	4b84      	ldr	r3, [pc, #528]	; (8000d40 <automatic_run+0x224>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	f200 831d 	bhi.w	8001172 <automatic_run+0x656>
 8000b38:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <automatic_run+0x24>)
 8000b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3e:	bf00      	nop
 8000b40:	08000b55 	.word	0x08000b55
 8000b44:	08000b85 	.word	0x08000b85
 8000b48:	08000cdf 	.word	0x08000cdf
 8000b4c:	08000e77 	.word	0x08000e77
 8000b50:	08000fd3 	.word	0x08000fd3
        case INIT:
        	sprintf(str, "\r!MODE 1 : AUTO RUN#\r\n");
 8000b54:	497b      	ldr	r1, [pc, #492]	; (8000d44 <automatic_run+0x228>)
 8000b56:	487c      	ldr	r0, [pc, #496]	; (8000d48 <automatic_run+0x22c>)
 8000b58:	f003 fd7e 	bl	8004658 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000b5c:	487a      	ldr	r0, [pc, #488]	; (8000d48 <automatic_run+0x22c>)
 8000b5e:	f7ff faf5 	bl	800014c <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b6a:	4977      	ldr	r1, [pc, #476]	; (8000d48 <automatic_run+0x22c>)
 8000b6c:	4877      	ldr	r0, [pc, #476]	; (8000d4c <automatic_run+0x230>)
 8000b6e:	f003 fb39 	bl	80041e4 <HAL_UART_Transmit>
            status = GREEN_RED;
 8000b72:	4b73      	ldr	r3, [pc, #460]	; (8000d40 <automatic_run+0x224>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
            currentmode == 2;
            clearRoadLed();
 8000b78:	f7ff fbee 	bl	8000358 <clearRoadLed>
            timerFlag[0] = 1;
 8000b7c:	4b74      	ldr	r3, [pc, #464]	; (8000d50 <automatic_run+0x234>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
            break;
 8000b82:	e2f6      	b.n	8001172 <automatic_run+0x656>

        case GREEN_RED:
            if ( isButtonPressed(1) == 1 && MODE==1) {
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff fbed 	bl	8000364 <isButtonPressed>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d12b      	bne.n	8000be8 <automatic_run+0xcc>
 8000b90:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <automatic_run+0x220>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d127      	bne.n	8000be8 <automatic_run+0xcc>
                red = countRed - countGreen;
 8000b98:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <automatic_run+0x238>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b6e      	ldr	r3, [pc, #440]	; (8000d58 <automatic_run+0x23c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	4a6e      	ldr	r2, [pc, #440]	; (8000d5c <automatic_run+0x240>)
 8000ba4:	6013      	str	r3, [r2, #0]
                green = countGreen;
 8000ba6:	4b6c      	ldr	r3, [pc, #432]	; (8000d58 <automatic_run+0x23c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a6d      	ldr	r2, [pc, #436]	; (8000d60 <automatic_run+0x244>)
 8000bac:	6013      	str	r3, [r2, #0]
                yellow=countYellow;
 8000bae:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <automatic_run+0x248>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a6d      	ldr	r2, [pc, #436]	; (8000d68 <automatic_run+0x24c>)
 8000bb4:	6013      	str	r3, [r2, #0]
                status = YELLOW_RED;
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <automatic_run+0x224>)
 8000bb8:	2203      	movs	r2, #3
 8000bba:	601a      	str	r2, [r3, #0]
            	sprintf(str, "\r!SWITCH LED#\r\n");
 8000bbc:	496b      	ldr	r1, [pc, #428]	; (8000d6c <automatic_run+0x250>)
 8000bbe:	4862      	ldr	r0, [pc, #392]	; (8000d48 <automatic_run+0x22c>)
 8000bc0:	f003 fd4a 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000bc4:	4860      	ldr	r0, [pc, #384]	; (8000d48 <automatic_run+0x22c>)
 8000bc6:	f7ff fac1 	bl	800014c <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bd2:	495d      	ldr	r1, [pc, #372]	; (8000d48 <automatic_run+0x22c>)
 8000bd4:	485d      	ldr	r0, [pc, #372]	; (8000d4c <automatic_run+0x230>)
 8000bd6:	f003 fb05 	bl	80041e4 <HAL_UART_Transmit>
                timerFlag[1] = 1;
 8000bda:	4b5d      	ldr	r3, [pc, #372]	; (8000d50 <automatic_run+0x234>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	605a      	str	r2, [r3, #4]
                timerFlag[0] = 0;
 8000be0:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <automatic_run+0x234>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
                break;
 8000be6:	e2c4      	b.n	8001172 <automatic_run+0x656>
            } else if (timerFlag[0] == 1) {
 8000be8:	4b59      	ldr	r3, [pc, #356]	; (8000d50 <automatic_run+0x234>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d161      	bne.n	8000cb4 <automatic_run+0x198>
                if (green >= 0) {
 8000bf0:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <automatic_run+0x244>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db58      	blt.n	8000caa <automatic_run+0x18e>
                    turnOnGreen1();
 8000bf8:	f7ff fae8 	bl	80001cc <turnOnGreen1>
                    turnOnRed2();
 8000bfc:	f7ff faf8 	bl	80001f0 <turnOnRed2>
                	lcd_clear_display();
 8000c00:	f000 fcf1 	bl	80015e6 <lcd_clear_display>
                	HAL_Delay(10);
 8000c04:	200a      	movs	r0, #10
 8000c06:	f001 fae1 	bl	80021cc <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "GREEN: %d", green);
 8000c0a:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <automatic_run+0x244>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8000c12:	4a57      	ldr	r2, [pc, #348]	; (8000d70 <automatic_run+0x254>)
 8000c14:	2110      	movs	r1, #16
 8000c16:	f003 fceb 	bl	80045f0 <sniprintf>
                	lcd_goto_XY(1, 0);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f000 fce9 	bl	80015f4 <lcd_goto_XY>
                	lcd_send_string(buffer);
 8000c22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fcc8 	bl	80015bc <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "RED: %d", red);
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <automatic_run+0x240>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000c34:	4a4f      	ldr	r2, [pc, #316]	; (8000d74 <automatic_run+0x258>)
 8000c36:	2110      	movs	r1, #16
 8000c38:	f003 fcda 	bl	80045f0 <sniprintf>
                	lcd_goto_XY(2, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f000 fcd8 	bl	80015f4 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 8000c44:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fcb7 	bl	80015bc <lcd_send_string>
                	sprintf(str, "\r!GREEN# : %d\r\n",green);
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <automatic_run+0x244>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4948      	ldr	r1, [pc, #288]	; (8000d78 <automatic_run+0x25c>)
 8000c56:	483c      	ldr	r0, [pc, #240]	; (8000d48 <automatic_run+0x22c>)
 8000c58:	f003 fcfe 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000c5c:	483a      	ldr	r0, [pc, #232]	; (8000d48 <automatic_run+0x22c>)
 8000c5e:	f7ff fa75 	bl	800014c <strlen>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c6a:	4937      	ldr	r1, [pc, #220]	; (8000d48 <automatic_run+0x22c>)
 8000c6c:	4837      	ldr	r0, [pc, #220]	; (8000d4c <automatic_run+0x230>)
 8000c6e:	f003 fab9 	bl	80041e4 <HAL_UART_Transmit>
                	sprintf(str, "\r!RED# : %d\r\n",red);
 8000c72:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <automatic_run+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4940      	ldr	r1, [pc, #256]	; (8000d7c <automatic_run+0x260>)
 8000c7a:	4833      	ldr	r0, [pc, #204]	; (8000d48 <automatic_run+0x22c>)
 8000c7c:	f003 fcec 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000c80:	4831      	ldr	r0, [pc, #196]	; (8000d48 <automatic_run+0x22c>)
 8000c82:	f7ff fa63 	bl	800014c <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c8e:	492e      	ldr	r1, [pc, #184]	; (8000d48 <automatic_run+0x22c>)
 8000c90:	482e      	ldr	r0, [pc, #184]	; (8000d4c <automatic_run+0x230>)
 8000c92:	f003 faa7 	bl	80041e4 <HAL_UART_Transmit>
                	green--;
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <automatic_run+0x244>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	4a30      	ldr	r2, [pc, #192]	; (8000d60 <automatic_run+0x244>)
 8000c9e:	6013      	str	r3, [r2, #0]
                	red--;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <automatic_run+0x240>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	4a2d      	ldr	r2, [pc, #180]	; (8000d5c <automatic_run+0x240>)
 8000ca8:	6013      	str	r3, [r2, #0]
                }
                settimer1(0, 1000);
 8000caa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f001 f862 	bl	8001d78 <settimer1>
            }
            if (green < 0) {
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <automatic_run+0x244>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f280 8253 	bge.w	8001164 <automatic_run+0x648>
                red++;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <automatic_run+0x240>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <automatic_run+0x240>)
 8000cc6:	6013      	str	r3, [r2, #0]
                status = YELLOW_RED;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <automatic_run+0x224>)
 8000cca:	2203      	movs	r2, #3
 8000ccc:	601a      	str	r2, [r3, #0]
                green = countGreen;
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <automatic_run+0x23c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <automatic_run+0x244>)
 8000cd4:	6013      	str	r3, [r2, #0]
                timerFlag[1] = 1;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <automatic_run+0x234>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
                break;
 8000cdc:	e249      	b.n	8001172 <automatic_run+0x656>
            }
            break;

        case YELLOW_RED:
        	if( isButtonPressed(1)==1&& MODE==1){
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff fb40 	bl	8000364 <isButtonPressed>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d14a      	bne.n	8000d80 <automatic_run+0x264>
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <automatic_run+0x220>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d146      	bne.n	8000d80 <automatic_run+0x264>
        		red=countRed;
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <automatic_run+0x238>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <automatic_run+0x240>)
 8000cf8:	6013      	str	r3, [r2, #0]
        		green=countGreen;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <automatic_run+0x23c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <automatic_run+0x244>)
 8000d00:	6013      	str	r3, [r2, #0]
        		yellow=countYellow;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <automatic_run+0x248>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <automatic_run+0x24c>)
 8000d08:	6013      	str	r3, [r2, #0]
                status = RED_GREEN;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <automatic_run+0x224>)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	601a      	str	r2, [r3, #0]
            	sprintf(str, "\r!SWITCH LED#\r\n");
 8000d10:	4916      	ldr	r1, [pc, #88]	; (8000d6c <automatic_run+0x250>)
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <automatic_run+0x22c>)
 8000d14:	f003 fca0 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <automatic_run+0x22c>)
 8000d1a:	f7ff fa17 	bl	800014c <strlen>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <automatic_run+0x22c>)
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <automatic_run+0x230>)
 8000d2a:	f003 fa5b 	bl	80041e4 <HAL_UART_Transmit>
                timerFlag[2] = 1;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <automatic_run+0x234>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	609a      	str	r2, [r3, #8]
                timerFlag[1] = 0;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <automatic_run+0x234>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
                break;
 8000d3a:	e21a      	b.n	8001172 <automatic_run+0x656>
 8000d3c:	20000064 	.word	0x20000064
 8000d40:	20000050 	.word	0x20000050
 8000d44:	08004f8c 	.word	0x08004f8c
 8000d48:	20000180 	.word	0x20000180
 8000d4c:	2000025c 	.word	0x2000025c
 8000d50:	200005c4 	.word	0x200005c4
 8000d54:	2000005c 	.word	0x2000005c
 8000d58:	20000054 	.word	0x20000054
 8000d5c:	200001bc 	.word	0x200001bc
 8000d60:	200001b8 	.word	0x200001b8
 8000d64:	20000058 	.word	0x20000058
 8000d68:	200001b4 	.word	0x200001b4
 8000d6c:	08004fa4 	.word	0x08004fa4
 8000d70:	08004fb4 	.word	0x08004fb4
 8000d74:	08004fc0 	.word	0x08004fc0
 8000d78:	08004fc8 	.word	0x08004fc8
 8000d7c:	08004fd8 	.word	0x08004fd8
        	}else if (timerFlag[1] == 1) {
 8000d80:	4ba9      	ldr	r3, [pc, #676]	; (8001028 <automatic_run+0x50c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d162      	bne.n	8000e4e <automatic_run+0x332>
                if (yellow >= 0) {
 8000d88:	4ba8      	ldr	r3, [pc, #672]	; (800102c <automatic_run+0x510>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db58      	blt.n	8000e42 <automatic_run+0x326>
                    turnOnAmber1();
 8000d90:	f7ff fa0a 	bl	80001a8 <turnOnAmber1>
                    turnOnRed2();
 8000d94:	f7ff fa2c 	bl	80001f0 <turnOnRed2>
                    	lcd_clear_display();
 8000d98:	f000 fc25 	bl	80015e6 <lcd_clear_display>
                    	HAL_Delay(10);
 8000d9c:	200a      	movs	r0, #10
 8000d9e:	f001 fa15 	bl	80021cc <HAL_Delay>
                    	char buffer[16];
                    	snprintf(buffer, sizeof(buffer), "YELLOW: %d", yellow);
 8000da2:	4ba2      	ldr	r3, [pc, #648]	; (800102c <automatic_run+0x510>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000daa:	4aa1      	ldr	r2, [pc, #644]	; (8001030 <automatic_run+0x514>)
 8000dac:	2110      	movs	r1, #16
 8000dae:	f003 fc1f 	bl	80045f0 <sniprintf>
                    	lcd_goto_XY(1, 0);
 8000db2:	2100      	movs	r1, #0
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fc1d 	bl	80015f4 <lcd_goto_XY>
                    	lcd_send_string(buffer);
 8000dba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fbfc 	bl	80015bc <lcd_send_string>
                    	char buffer1[16];
                    	snprintf(buffer1, sizeof(buffer1), "RED: %d", red);
 8000dc4:	4b9b      	ldr	r3, [pc, #620]	; (8001034 <automatic_run+0x518>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000dcc:	4a9a      	ldr	r2, [pc, #616]	; (8001038 <automatic_run+0x51c>)
 8000dce:	2110      	movs	r1, #16
 8000dd0:	f003 fc0e 	bl	80045f0 <sniprintf>
                    	lcd_goto_XY(2, 0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f000 fc0c 	bl	80015f4 <lcd_goto_XY>
                    	lcd_send_string(buffer1);
 8000ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fbeb 	bl	80015bc <lcd_send_string>
                    	sprintf(str, "\r!YELLOW# : %d\r\n",yellow);
 8000de6:	4b91      	ldr	r3, [pc, #580]	; (800102c <automatic_run+0x510>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	4993      	ldr	r1, [pc, #588]	; (800103c <automatic_run+0x520>)
 8000dee:	4894      	ldr	r0, [pc, #592]	; (8001040 <automatic_run+0x524>)
 8000df0:	f003 fc32 	bl	8004658 <siprintf>
                    	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000df4:	4892      	ldr	r0, [pc, #584]	; (8001040 <automatic_run+0x524>)
 8000df6:	f7ff f9a9 	bl	800014c <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e02:	498f      	ldr	r1, [pc, #572]	; (8001040 <automatic_run+0x524>)
 8000e04:	488f      	ldr	r0, [pc, #572]	; (8001044 <automatic_run+0x528>)
 8000e06:	f003 f9ed 	bl	80041e4 <HAL_UART_Transmit>
                    	sprintf(str, "\r!RED# : %d\r\n",red);
 8000e0a:	4b8a      	ldr	r3, [pc, #552]	; (8001034 <automatic_run+0x518>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	498d      	ldr	r1, [pc, #564]	; (8001048 <automatic_run+0x52c>)
 8000e12:	488b      	ldr	r0, [pc, #556]	; (8001040 <automatic_run+0x524>)
 8000e14:	f003 fc20 	bl	8004658 <siprintf>
                    	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000e18:	4889      	ldr	r0, [pc, #548]	; (8001040 <automatic_run+0x524>)
 8000e1a:	f7ff f997 	bl	800014c <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e26:	4986      	ldr	r1, [pc, #536]	; (8001040 <automatic_run+0x524>)
 8000e28:	4886      	ldr	r0, [pc, #536]	; (8001044 <automatic_run+0x528>)
 8000e2a:	f003 f9db 	bl	80041e4 <HAL_UART_Transmit>
                    	yellow--;
 8000e2e:	4b7f      	ldr	r3, [pc, #508]	; (800102c <automatic_run+0x510>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a7d      	ldr	r2, [pc, #500]	; (800102c <automatic_run+0x510>)
 8000e36:	6013      	str	r3, [r2, #0]
                    	red--;
 8000e38:	4b7e      	ldr	r3, [pc, #504]	; (8001034 <automatic_run+0x518>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	4a7d      	ldr	r2, [pc, #500]	; (8001034 <automatic_run+0x518>)
 8000e40:	6013      	str	r3, [r2, #0]

                }
                settimer1(1, 1000);
 8000e42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 ff96 	bl	8001d78 <settimer1>
                break;
 8000e4c:	e191      	b.n	8001172 <automatic_run+0x656>
            }
            if (yellow < 0) {
 8000e4e:	4b77      	ldr	r3, [pc, #476]	; (800102c <automatic_run+0x510>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f280 8188 	bge.w	8001168 <automatic_run+0x64c>
                yellow = countYellow;
 8000e58:	4b7c      	ldr	r3, [pc, #496]	; (800104c <automatic_run+0x530>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a73      	ldr	r2, [pc, #460]	; (800102c <automatic_run+0x510>)
 8000e5e:	6013      	str	r3, [r2, #0]
                red=countRed;
 8000e60:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <automatic_run+0x534>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a73      	ldr	r2, [pc, #460]	; (8001034 <automatic_run+0x518>)
 8000e66:	6013      	str	r3, [r2, #0]
                status = RED_GREEN;
 8000e68:	4b7a      	ldr	r3, [pc, #488]	; (8001054 <automatic_run+0x538>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	601a      	str	r2, [r3, #0]
                timerFlag[2] = 1;
 8000e6e:	4b6e      	ldr	r3, [pc, #440]	; (8001028 <automatic_run+0x50c>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	609a      	str	r2, [r3, #8]
            }
            break;
 8000e74:	e178      	b.n	8001168 <automatic_run+0x64c>

        case RED_GREEN:
        	if( isButtonPressed(1)==1&& MODE==1){
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff fa74 	bl	8000364 <isButtonPressed>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d12b      	bne.n	8000eda <automatic_run+0x3be>
 8000e82:	4b75      	ldr	r3, [pc, #468]	; (8001058 <automatic_run+0x53c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d127      	bne.n	8000eda <automatic_run+0x3be>
        		red=countRed-countGreen;
 8000e8a:	4b71      	ldr	r3, [pc, #452]	; (8001050 <automatic_run+0x534>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b73      	ldr	r3, [pc, #460]	; (800105c <automatic_run+0x540>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4a67      	ldr	r2, [pc, #412]	; (8001034 <automatic_run+0x518>)
 8000e96:	6013      	str	r3, [r2, #0]
        		green=countGreen;
 8000e98:	4b70      	ldr	r3, [pc, #448]	; (800105c <automatic_run+0x540>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a70      	ldr	r2, [pc, #448]	; (8001060 <automatic_run+0x544>)
 8000e9e:	6013      	str	r3, [r2, #0]
        		yellow=countYellow;
 8000ea0:	4b6a      	ldr	r3, [pc, #424]	; (800104c <automatic_run+0x530>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a61      	ldr	r2, [pc, #388]	; (800102c <automatic_run+0x510>)
 8000ea6:	6013      	str	r3, [r2, #0]
                status = RED_YELLOW;
 8000ea8:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <automatic_run+0x538>)
 8000eaa:	2205      	movs	r2, #5
 8000eac:	601a      	str	r2, [r3, #0]
            	sprintf(str, "\r!SWITCH LED#\r\n");
 8000eae:	496d      	ldr	r1, [pc, #436]	; (8001064 <automatic_run+0x548>)
 8000eb0:	4863      	ldr	r0, [pc, #396]	; (8001040 <automatic_run+0x524>)
 8000eb2:	f003 fbd1 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000eb6:	4862      	ldr	r0, [pc, #392]	; (8001040 <automatic_run+0x524>)
 8000eb8:	f7ff f948 	bl	800014c <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ec4:	495e      	ldr	r1, [pc, #376]	; (8001040 <automatic_run+0x524>)
 8000ec6:	485f      	ldr	r0, [pc, #380]	; (8001044 <automatic_run+0x528>)
 8000ec8:	f003 f98c 	bl	80041e4 <HAL_UART_Transmit>
                timerFlag[3] = 1;
 8000ecc:	4b56      	ldr	r3, [pc, #344]	; (8001028 <automatic_run+0x50c>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	60da      	str	r2, [r3, #12]
                timerFlag[2] = 0;
 8000ed2:	4b55      	ldr	r3, [pc, #340]	; (8001028 <automatic_run+0x50c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
                break;
 8000ed8:	e14b      	b.n	8001172 <automatic_run+0x656>
        	}
        	else if (timerFlag[2] == 1) {
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <automatic_run+0x50c>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d162      	bne.n	8000fa8 <automatic_run+0x48c>
                if (green >= 0) {
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <automatic_run+0x544>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db58      	blt.n	8000f9c <automatic_run+0x480>
                    turnOnRed1();
 8000eea:	f7ff f951 	bl	8000190 <turnOnRed1>
                    turnOnGreen2();
 8000eee:	f7ff f99d 	bl	800022c <turnOnGreen2>
                	lcd_clear_display();
 8000ef2:	f000 fb78 	bl	80015e6 <lcd_clear_display>
                	HAL_Delay(10);
 8000ef6:	200a      	movs	r0, #10
 8000ef8:	f001 f968 	bl	80021cc <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "RED: %d", red);
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <automatic_run+0x518>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <automatic_run+0x51c>)
 8000f06:	2110      	movs	r1, #16
 8000f08:	f003 fb72 	bl	80045f0 <sniprintf>
                	lcd_goto_XY(1, 0);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 fb70 	bl	80015f4 <lcd_goto_XY>
                	lcd_send_string(buffer);
 8000f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fb4f 	bl	80015bc <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "GREEN: %d", green);
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <automatic_run+0x544>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f107 0020 	add.w	r0, r7, #32
 8000f26:	4a50      	ldr	r2, [pc, #320]	; (8001068 <automatic_run+0x54c>)
 8000f28:	2110      	movs	r1, #16
 8000f2a:	f003 fb61 	bl	80045f0 <sniprintf>
                	lcd_goto_XY(2, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2002      	movs	r0, #2
 8000f32:	f000 fb5f 	bl	80015f4 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fb3e 	bl	80015bc <lcd_send_string>
                	sprintf(str, "\r!RED# : %d\r\n",red);
 8000f40:	4b3c      	ldr	r3, [pc, #240]	; (8001034 <automatic_run+0x518>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4940      	ldr	r1, [pc, #256]	; (8001048 <automatic_run+0x52c>)
 8000f48:	483d      	ldr	r0, [pc, #244]	; (8001040 <automatic_run+0x524>)
 8000f4a:	f003 fb85 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000f4e:	483c      	ldr	r0, [pc, #240]	; (8001040 <automatic_run+0x524>)
 8000f50:	f7ff f8fc 	bl	800014c <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f5c:	4938      	ldr	r1, [pc, #224]	; (8001040 <automatic_run+0x524>)
 8000f5e:	4839      	ldr	r0, [pc, #228]	; (8001044 <automatic_run+0x528>)
 8000f60:	f003 f940 	bl	80041e4 <HAL_UART_Transmit>
                	sprintf(str, "\r!GREEN# : %d\r\n",green);
 8000f64:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <automatic_run+0x544>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4940      	ldr	r1, [pc, #256]	; (800106c <automatic_run+0x550>)
 8000f6c:	4834      	ldr	r0, [pc, #208]	; (8001040 <automatic_run+0x524>)
 8000f6e:	f003 fb73 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8000f72:	4833      	ldr	r0, [pc, #204]	; (8001040 <automatic_run+0x524>)
 8000f74:	f7ff f8ea 	bl	800014c <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f80:	492f      	ldr	r1, [pc, #188]	; (8001040 <automatic_run+0x524>)
 8000f82:	4830      	ldr	r0, [pc, #192]	; (8001044 <automatic_run+0x528>)
 8000f84:	f003 f92e 	bl	80041e4 <HAL_UART_Transmit>
                	red--;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <automatic_run+0x518>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a29      	ldr	r2, [pc, #164]	; (8001034 <automatic_run+0x518>)
 8000f90:	6013      	str	r3, [r2, #0]
                	green--;
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <automatic_run+0x544>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	4a31      	ldr	r2, [pc, #196]	; (8001060 <automatic_run+0x544>)
 8000f9a:	6013      	str	r3, [r2, #0]
                }
                settimer1(2, 1000);
 8000f9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f000 fee9 	bl	8001d78 <settimer1>
                break;
 8000fa6:	e0e4      	b.n	8001172 <automatic_run+0x656>
            }
            if (green < 0) {
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <automatic_run+0x544>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f280 80dd 	bge.w	800116c <automatic_run+0x650>
            	red++;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <automatic_run+0x518>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <automatic_run+0x518>)
 8000fba:	6013      	str	r3, [r2, #0]
                green = countGreen;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <automatic_run+0x540>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a27      	ldr	r2, [pc, #156]	; (8001060 <automatic_run+0x544>)
 8000fc2:	6013      	str	r3, [r2, #0]
                status = RED_YELLOW;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <automatic_run+0x538>)
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	601a      	str	r2, [r3, #0]
                timerFlag[3] = 1;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <automatic_run+0x50c>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	60da      	str	r2, [r3, #12]
            }
            break;
 8000fd0:	e0cc      	b.n	800116c <automatic_run+0x650>

        case RED_YELLOW:

        	if( isButtonPressed(1)==1 && MODE==1){
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff f9c6 	bl	8000364 <isButtonPressed>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d148      	bne.n	8001070 <automatic_run+0x554>
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <automatic_run+0x53c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d144      	bne.n	8001070 <automatic_run+0x554>
        		red=countRed;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <automatic_run+0x534>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <automatic_run+0x518>)
 8000fec:	6013      	str	r3, [r2, #0]
        		green=countGreen;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <automatic_run+0x540>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <automatic_run+0x544>)
 8000ff4:	6013      	str	r3, [r2, #0]
                status = GREEN_RED;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <automatic_run+0x538>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	601a      	str	r2, [r3, #0]
            	sprintf(str, "\r!SWITCH LED#\r\n");
 8000ffc:	4919      	ldr	r1, [pc, #100]	; (8001064 <automatic_run+0x548>)
 8000ffe:	4810      	ldr	r0, [pc, #64]	; (8001040 <automatic_run+0x524>)
 8001000:	f003 fb2a 	bl	8004658 <siprintf>
            	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8001004:	480e      	ldr	r0, [pc, #56]	; (8001040 <automatic_run+0x524>)
 8001006:	f7ff f8a1 	bl	800014c <strlen>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001012:	490b      	ldr	r1, [pc, #44]	; (8001040 <automatic_run+0x524>)
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <automatic_run+0x528>)
 8001016:	f003 f8e5 	bl	80041e4 <HAL_UART_Transmit>
                timerFlag[0] = 1;
 800101a:	4b03      	ldr	r3, [pc, #12]	; (8001028 <automatic_run+0x50c>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
                timerFlag[3] = 0;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <automatic_run+0x50c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
                break;
 8001026:	e0a4      	b.n	8001172 <automatic_run+0x656>
 8001028:	200005c4 	.word	0x200005c4
 800102c:	200001b4 	.word	0x200001b4
 8001030:	08004fe8 	.word	0x08004fe8
 8001034:	200001bc 	.word	0x200001bc
 8001038:	08004fc0 	.word	0x08004fc0
 800103c:	08004ff4 	.word	0x08004ff4
 8001040:	20000180 	.word	0x20000180
 8001044:	2000025c 	.word	0x2000025c
 8001048:	08004fd8 	.word	0x08004fd8
 800104c:	20000058 	.word	0x20000058
 8001050:	2000005c 	.word	0x2000005c
 8001054:	20000050 	.word	0x20000050
 8001058:	20000064 	.word	0x20000064
 800105c:	20000054 	.word	0x20000054
 8001060:	200001b8 	.word	0x200001b8
 8001064:	08004fa4 	.word	0x08004fa4
 8001068:	08004fb4 	.word	0x08004fb4
 800106c:	08004fc8 	.word	0x08004fc8
        	}
        	else if (timerFlag[3] == 1) {
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <automatic_run+0x660>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d160      	bne.n	800113a <automatic_run+0x61e>
                if (yellow >= 0) {
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <automatic_run+0x664>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db56      	blt.n	800112e <automatic_run+0x612>
                    turnOnRed1();
 8001080:	f7ff f886 	bl	8000190 <turnOnRed1>
                    turnOnAmber2();
 8001084:	f7ff f8c0 	bl	8000208 <turnOnAmber2>
                	lcd_clear_display();
 8001088:	f000 faad 	bl	80015e6 <lcd_clear_display>
                	HAL_Delay(10);
 800108c:	200a      	movs	r0, #10
 800108e:	f001 f89d 	bl	80021cc <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "RED: %d", red);
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <automatic_run+0x668>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f107 0010 	add.w	r0, r7, #16
 800109a:	4a3b      	ldr	r2, [pc, #236]	; (8001188 <automatic_run+0x66c>)
 800109c:	2110      	movs	r1, #16
 800109e:	f003 faa7 	bl	80045f0 <sniprintf>
                	lcd_goto_XY(1, 0);
 80010a2:	2100      	movs	r1, #0
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 faa5 	bl	80015f4 <lcd_goto_XY>
                	lcd_send_string(buffer);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fa84 	bl	80015bc <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "YELLOW: %d", yellow);
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <automatic_run+0x664>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4638      	mov	r0, r7
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <automatic_run+0x670>)
 80010bc:	2110      	movs	r1, #16
 80010be:	f003 fa97 	bl	80045f0 <sniprintf>
                	lcd_goto_XY(2, 0);
 80010c2:	2100      	movs	r1, #0
 80010c4:	2002      	movs	r0, #2
 80010c6:	f000 fa95 	bl	80015f4 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 80010ca:	463b      	mov	r3, r7
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fa75 	bl	80015bc <lcd_send_string>
                	sprintf(str, "\r!RED# : %d\r\n",red);
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <automatic_run+0x668>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	492d      	ldr	r1, [pc, #180]	; (8001190 <automatic_run+0x674>)
 80010da:	482e      	ldr	r0, [pc, #184]	; (8001194 <automatic_run+0x678>)
 80010dc:	f003 fabc 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 80010e0:	482c      	ldr	r0, [pc, #176]	; (8001194 <automatic_run+0x678>)
 80010e2:	f7ff f833 	bl	800014c <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ee:	4929      	ldr	r1, [pc, #164]	; (8001194 <automatic_run+0x678>)
 80010f0:	4829      	ldr	r0, [pc, #164]	; (8001198 <automatic_run+0x67c>)
 80010f2:	f003 f877 	bl	80041e4 <HAL_UART_Transmit>
                	sprintf(str, "\r!YELLOW# : %d\r\n",yellow);
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <automatic_run+0x664>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4927      	ldr	r1, [pc, #156]	; (800119c <automatic_run+0x680>)
 80010fe:	4825      	ldr	r0, [pc, #148]	; (8001194 <automatic_run+0x678>)
 8001100:	f003 faaa 	bl	8004658 <siprintf>
                	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <automatic_run+0x678>)
 8001106:	f7ff f821 	bl	800014c <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	b29a      	uxth	r2, r3
 800110e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001112:	4920      	ldr	r1, [pc, #128]	; (8001194 <automatic_run+0x678>)
 8001114:	4820      	ldr	r0, [pc, #128]	; (8001198 <automatic_run+0x67c>)
 8001116:	f003 f865 	bl	80041e4 <HAL_UART_Transmit>
                    yellow--;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <automatic_run+0x664>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <automatic_run+0x664>)
 8001122:	6013      	str	r3, [r2, #0]
                    red--;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <automatic_run+0x668>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	4a16      	ldr	r2, [pc, #88]	; (8001184 <automatic_run+0x668>)
 800112c:	6013      	str	r3, [r2, #0]
                }
                settimer1(3, 1000);
 800112e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001132:	2003      	movs	r0, #3
 8001134:	f000 fe20 	bl	8001d78 <settimer1>
                break;
 8001138:	e01b      	b.n	8001172 <automatic_run+0x656>
            }
            if (yellow < 0) {
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <automatic_run+0x664>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	da16      	bge.n	8001170 <automatic_run+0x654>
                yellow = countYellow;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <automatic_run+0x684>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <automatic_run+0x664>)
 8001148:	6013      	str	r3, [r2, #0]
                red = countRed;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <automatic_run+0x688>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <automatic_run+0x668>)
 8001150:	6013      	str	r3, [r2, #0]
                status = GREEN_RED;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <automatic_run+0x68c>)
 8001154:	2202      	movs	r2, #2
 8001156:	601a      	str	r2, [r3, #0]
                timerFlag[0] = 1;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <automatic_run+0x660>)
 800115a:	2201      	movs	r2, #1
 800115c:	601a      	str	r2, [r3, #0]
            }
            break;
 800115e:	e007      	b.n	8001170 <automatic_run+0x654>
    }
	}
 8001160:	bf00      	nop
 8001162:	e006      	b.n	8001172 <automatic_run+0x656>
            break;
 8001164:	bf00      	nop
 8001166:	e004      	b.n	8001172 <automatic_run+0x656>
            break;
 8001168:	bf00      	nop
 800116a:	e002      	b.n	8001172 <automatic_run+0x656>
            break;
 800116c:	bf00      	nop
 800116e:	e000      	b.n	8001172 <automatic_run+0x656>
            break;
 8001170:	bf00      	nop
}
 8001172:	bf00      	nop
 8001174:	3780      	adds	r7, #128	; 0x80
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200005c4 	.word	0x200005c4
 8001180:	200001b4 	.word	0x200001b4
 8001184:	200001bc 	.word	0x200001bc
 8001188:	08004fc0 	.word	0x08004fc0
 800118c:	08004fe8 	.word	0x08004fe8
 8001190:	08004fd8 	.word	0x08004fd8
 8001194:	20000180 	.word	0x20000180
 8001198:	2000025c 	.word	0x2000025c
 800119c:	08004ff4 	.word	0x08004ff4
 80011a0:	20000058 	.word	0x20000058
 80011a4:	2000005c 	.word	0x2000005c
 80011a8:	20000050 	.word	0x20000050

080011ac <reset_time>:
#include "stm32f1xx_hal.h"

extern UART_HandleTypeDef huart2;
char str[50];

void reset_time(){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    countRed = initRED;
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <reset_time+0xac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <reset_time+0xb0>)
 80011b6:	6013      	str	r3, [r2, #0]
    countYellow = initYELLOW;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <reset_time+0xb4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a29      	ldr	r2, [pc, #164]	; (8001264 <reset_time+0xb8>)
 80011be:	6013      	str	r3, [r2, #0]
    countGreen = initGREEN;
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <reset_time+0xbc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a29      	ldr	r2, [pc, #164]	; (800126c <reset_time+0xc0>)
 80011c6:	6013      	str	r3, [r2, #0]
	sprintf(str, "!RESET TIME#\r\n");
 80011c8:	4929      	ldr	r1, [pc, #164]	; (8001270 <reset_time+0xc4>)
 80011ca:	482a      	ldr	r0, [pc, #168]	; (8001274 <reset_time+0xc8>)
 80011cc:	f003 fa44 	bl	8004658 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 80011d0:	4828      	ldr	r0, [pc, #160]	; (8001274 <reset_time+0xc8>)
 80011d2:	f7fe ffbb 	bl	800014c <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011de:	4925      	ldr	r1, [pc, #148]	; (8001274 <reset_time+0xc8>)
 80011e0:	4825      	ldr	r0, [pc, #148]	; (8001278 <reset_time+0xcc>)
 80011e2:	f002 ffff 	bl	80041e4 <HAL_UART_Transmit>
	sprintf(str, "!TIMERED# : %d\r\n",countRed);
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <reset_time+0xb0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4923      	ldr	r1, [pc, #140]	; (800127c <reset_time+0xd0>)
 80011ee:	4821      	ldr	r0, [pc, #132]	; (8001274 <reset_time+0xc8>)
 80011f0:	f003 fa32 	bl	8004658 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 80011f4:	481f      	ldr	r0, [pc, #124]	; (8001274 <reset_time+0xc8>)
 80011f6:	f7fe ffa9 	bl	800014c <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001202:	491c      	ldr	r1, [pc, #112]	; (8001274 <reset_time+0xc8>)
 8001204:	481c      	ldr	r0, [pc, #112]	; (8001278 <reset_time+0xcc>)
 8001206:	f002 ffed 	bl	80041e4 <HAL_UART_Transmit>
	sprintf(str, "!TIMEYELLOW# : %d\r\n",countYellow);
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <reset_time+0xb8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	491b      	ldr	r1, [pc, #108]	; (8001280 <reset_time+0xd4>)
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <reset_time+0xc8>)
 8001214:	f003 fa20 	bl	8004658 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8001218:	4816      	ldr	r0, [pc, #88]	; (8001274 <reset_time+0xc8>)
 800121a:	f7fe ff97 	bl	800014c <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001226:	4913      	ldr	r1, [pc, #76]	; (8001274 <reset_time+0xc8>)
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <reset_time+0xcc>)
 800122a:	f002 ffdb 	bl	80041e4 <HAL_UART_Transmit>
	sprintf(str, "!TIMEGREEN# : %d\r\n",countGreen);
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <reset_time+0xc0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4913      	ldr	r1, [pc, #76]	; (8001284 <reset_time+0xd8>)
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <reset_time+0xc8>)
 8001238:	f003 fa0e 	bl	8004658 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <reset_time+0xc8>)
 800123e:	f7fe ff85 	bl	800014c <strlen>
 8001242:	4603      	mov	r3, r0
 8001244:	b29a      	uxth	r2, r3
 8001246:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800124a:	490a      	ldr	r1, [pc, #40]	; (8001274 <reset_time+0xc8>)
 800124c:	480a      	ldr	r0, [pc, #40]	; (8001278 <reset_time+0xcc>)
 800124e:	f002 ffc9 	bl	80041e4 <HAL_UART_Transmit>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000074 	.word	0x20000074
 800125c:	2000005c 	.word	0x2000005c
 8001260:	20000078 	.word	0x20000078
 8001264:	20000058 	.word	0x20000058
 8001268:	2000007c 	.word	0x2000007c
 800126c:	20000054 	.word	0x20000054
 8001270:	08005008 	.word	0x08005008
 8001274:	20000180 	.word	0x20000180
 8001278:	2000025c 	.word	0x2000025c
 800127c:	08005018 	.word	0x08005018
 8001280:	0800502c 	.word	0x0800502c
 8001284:	08005040 	.word	0x08005040

08001288 <fsmmanual_run>:

void fsmmanual_run() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    switch(MODE) {
 800128c:	4b73      	ldr	r3, [pc, #460]	; (800145c <fsmmanual_run+0x1d4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b04      	cmp	r3, #4
 8001292:	f000 8095 	beq.w	80013c0 <fsmmanual_run+0x138>
 8001296:	2b04      	cmp	r3, #4
 8001298:	f300 80dd 	bgt.w	8001456 <fsmmanual_run+0x1ce>
 800129c:	2b02      	cmp	r3, #2
 800129e:	d002      	beq.n	80012a6 <fsmmanual_run+0x1e>
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d047      	beq.n	8001334 <fsmmanual_run+0xac>
                HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
                MODE = 1;
            }
            break;
    }
}
 80012a4:	e0d7      	b.n	8001456 <fsmmanual_run+0x1ce>
            if (isButtonLongPressed(0) == 1) {
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff f87e 	bl	80003a8 <isButtonLongPressed>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <fsmmanual_run+0x3a>
            	reset_time();
 80012b2:	f7ff ff7b 	bl	80011ac <reset_time>
                MODE = 2;
 80012b6:	4b69      	ldr	r3, [pc, #420]	; (800145c <fsmmanual_run+0x1d4>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	601a      	str	r2, [r3, #0]
            	display_timerRed();
 80012bc:	f7ff f88e 	bl	80003dc <display_timerRed>
                break;
 80012c0:	e0c9      	b.n	8001456 <fsmmanual_run+0x1ce>
            blinkyRed();
 80012c2:	f7fe ffc5 	bl	8000250 <blinkyRed>
            if (count > 0) {
 80012c6:	4b66      	ldr	r3, [pc, #408]	; (8001460 <fsmmanual_run+0x1d8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dd0e      	ble.n	80012ec <fsmmanual_run+0x64>
                yellow = countYellow;
 80012ce:	4b65      	ldr	r3, [pc, #404]	; (8001464 <fsmmanual_run+0x1dc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a65      	ldr	r2, [pc, #404]	; (8001468 <fsmmanual_run+0x1e0>)
 80012d4:	6013      	str	r3, [r2, #0]
                red = countRed;
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <fsmmanual_run+0x1e4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a65      	ldr	r2, [pc, #404]	; (8001470 <fsmmanual_run+0x1e8>)
 80012dc:	6013      	str	r3, [r2, #0]
                green = countGreen;
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <fsmmanual_run+0x1ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a65      	ldr	r2, [pc, #404]	; (8001478 <fsmmanual_run+0x1f0>)
 80012e4:	6013      	str	r3, [r2, #0]
                status=INIT;
 80012e6:	4b65      	ldr	r3, [pc, #404]	; (800147c <fsmmanual_run+0x1f4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
            if (count == 0) {
 80012ec:	4b5c      	ldr	r3, [pc, #368]	; (8001460 <fsmmanual_run+0x1d8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 80ab 	bne.w	800144c <fsmmanual_run+0x1c4>
                status = GREEN_RED;
 80012f6:	4b61      	ldr	r3, [pc, #388]	; (800147c <fsmmanual_run+0x1f4>)
 80012f8:	2202      	movs	r2, #2
 80012fa:	601a      	str	r2, [r3, #0]
                timerFlag[0] = 1;
 80012fc:	4b60      	ldr	r3, [pc, #384]	; (8001480 <fsmmanual_run+0x1f8>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
                count = 10;
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <fsmmanual_run+0x1d8>)
 8001304:	220a      	movs	r2, #10
 8001306:	601a      	str	r2, [r3, #0]
                currentmode = 2;
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <fsmmanual_run+0x1fc>)
 800130a:	2202      	movs	r2, #2
 800130c:	601a      	str	r2, [r3, #0]
                sprintf(str, "!TIMEOUT BACK TO MODE 1!#\r\n");
 800130e:	495e      	ldr	r1, [pc, #376]	; (8001488 <fsmmanual_run+0x200>)
 8001310:	485e      	ldr	r0, [pc, #376]	; (800148c <fsmmanual_run+0x204>)
 8001312:	f003 f9a1 	bl	8004658 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 8001316:	485d      	ldr	r0, [pc, #372]	; (800148c <fsmmanual_run+0x204>)
 8001318:	f7fe ff18 	bl	800014c <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001324:	4959      	ldr	r1, [pc, #356]	; (800148c <fsmmanual_run+0x204>)
 8001326:	485a      	ldr	r0, [pc, #360]	; (8001490 <fsmmanual_run+0x208>)
 8001328:	f002 ff5c 	bl	80041e4 <HAL_UART_Transmit>
                MODE = 1;
 800132c:	4b4b      	ldr	r3, [pc, #300]	; (800145c <fsmmanual_run+0x1d4>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
            break;
 8001332:	e08b      	b.n	800144c <fsmmanual_run+0x1c4>
            if (isButtonLongPressed(0) == 1) {
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff f837 	bl	80003a8 <isButtonLongPressed>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d107      	bne.n	8001350 <fsmmanual_run+0xc8>
            	reset_time();
 8001340:	f7ff ff34 	bl	80011ac <reset_time>
                MODE = 3;
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <fsmmanual_run+0x1d4>)
 8001346:	2203      	movs	r2, #3
 8001348:	601a      	str	r2, [r3, #0]
            	display_timerAmber();
 800134a:	f7ff f883 	bl	8000454 <display_timerAmber>
                break;
 800134e:	e082      	b.n	8001456 <fsmmanual_run+0x1ce>
            blinkyAmber();
 8001350:	f7fe ffa2 	bl	8000298 <blinkyAmber>
            if (count1 > 0) {
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <fsmmanual_run+0x20c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd0e      	ble.n	800137a <fsmmanual_run+0xf2>
                yellow = countYellow;
 800135c:	4b41      	ldr	r3, [pc, #260]	; (8001464 <fsmmanual_run+0x1dc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a41      	ldr	r2, [pc, #260]	; (8001468 <fsmmanual_run+0x1e0>)
 8001362:	6013      	str	r3, [r2, #0]
                red = countRed;
 8001364:	4b41      	ldr	r3, [pc, #260]	; (800146c <fsmmanual_run+0x1e4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a41      	ldr	r2, [pc, #260]	; (8001470 <fsmmanual_run+0x1e8>)
 800136a:	6013      	str	r3, [r2, #0]
                green = countGreen;
 800136c:	4b41      	ldr	r3, [pc, #260]	; (8001474 <fsmmanual_run+0x1ec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a41      	ldr	r2, [pc, #260]	; (8001478 <fsmmanual_run+0x1f0>)
 8001372:	6013      	str	r3, [r2, #0]
                status=INIT;
 8001374:	4b41      	ldr	r3, [pc, #260]	; (800147c <fsmmanual_run+0x1f4>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
            if (count1 == 0) {
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <fsmmanual_run+0x20c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d166      	bne.n	8001450 <fsmmanual_run+0x1c8>
                status = GREEN_RED;
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <fsmmanual_run+0x1f4>)
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
                count1 = 10;
 8001388:	4b42      	ldr	r3, [pc, #264]	; (8001494 <fsmmanual_run+0x20c>)
 800138a:	220a      	movs	r2, #10
 800138c:	601a      	str	r2, [r3, #0]
                currentmode = 2;
 800138e:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <fsmmanual_run+0x1fc>)
 8001390:	2202      	movs	r2, #2
 8001392:	601a      	str	r2, [r3, #0]
                timerFlag[0] = 1;
 8001394:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <fsmmanual_run+0x1f8>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
                sprintf(str, "!TIMEOUT BACK TO MODE 1 !#\r\n");
 800139a:	493f      	ldr	r1, [pc, #252]	; (8001498 <fsmmanual_run+0x210>)
 800139c:	483b      	ldr	r0, [pc, #236]	; (800148c <fsmmanual_run+0x204>)
 800139e:	f003 f95b 	bl	8004658 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 80013a2:	483a      	ldr	r0, [pc, #232]	; (800148c <fsmmanual_run+0x204>)
 80013a4:	f7fe fed2 	bl	800014c <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013b0:	4936      	ldr	r1, [pc, #216]	; (800148c <fsmmanual_run+0x204>)
 80013b2:	4837      	ldr	r0, [pc, #220]	; (8001490 <fsmmanual_run+0x208>)
 80013b4:	f002 ff16 	bl	80041e4 <HAL_UART_Transmit>
                MODE = 1;
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <fsmmanual_run+0x1d4>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
            break;
 80013be:	e047      	b.n	8001450 <fsmmanual_run+0x1c8>
            if (isButtonLongPressed(0) == 1) {
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7fe fff1 	bl	80003a8 <isButtonLongPressed>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d107      	bne.n	80013dc <fsmmanual_run+0x154>
            	reset_time();
 80013cc:	f7ff feee 	bl	80011ac <reset_time>
                MODE = 4;
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <fsmmanual_run+0x1d4>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	601a      	str	r2, [r3, #0]
            	display_timerGreen();
 80013d6:	f7ff f81f 	bl	8000418 <display_timerGreen>
                break;
 80013da:	e03c      	b.n	8001456 <fsmmanual_run+0x1ce>
            blinkyGreen();
 80013dc:	f7fe ff8c 	bl	80002f8 <blinkyGreen>
            if (count2 > 0) {
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <fsmmanual_run+0x214>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd0e      	ble.n	8001406 <fsmmanual_run+0x17e>
                yellow = countYellow;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <fsmmanual_run+0x1dc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <fsmmanual_run+0x1e0>)
 80013ee:	6013      	str	r3, [r2, #0]
                red = countRed;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <fsmmanual_run+0x1e4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <fsmmanual_run+0x1e8>)
 80013f6:	6013      	str	r3, [r2, #0]
                green = countGreen;
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <fsmmanual_run+0x1ec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1e      	ldr	r2, [pc, #120]	; (8001478 <fsmmanual_run+0x1f0>)
 80013fe:	6013      	str	r3, [r2, #0]
                status=INIT;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <fsmmanual_run+0x1f4>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]
            if (count2 == 0) {
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <fsmmanual_run+0x214>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d122      	bne.n	8001454 <fsmmanual_run+0x1cc>
                status = GREEN_RED;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <fsmmanual_run+0x1f4>)
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
                timerFlag[0] = 1;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <fsmmanual_run+0x1f8>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
                count2 = 10;
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <fsmmanual_run+0x214>)
 800141c:	220a      	movs	r2, #10
 800141e:	601a      	str	r2, [r3, #0]
                currentmode = 2;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <fsmmanual_run+0x1fc>)
 8001422:	2202      	movs	r2, #2
 8001424:	601a      	str	r2, [r3, #0]
                sprintf(str, "!TIMEOUT BACK TO MODE 1!#\r\n");
 8001426:	4918      	ldr	r1, [pc, #96]	; (8001488 <fsmmanual_run+0x200>)
 8001428:	4818      	ldr	r0, [pc, #96]	; (800148c <fsmmanual_run+0x204>)
 800142a:	f003 f915 	bl	8004658 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 500);
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <fsmmanual_run+0x204>)
 8001430:	f7fe fe8c 	bl	800014c <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800143c:	4913      	ldr	r1, [pc, #76]	; (800148c <fsmmanual_run+0x204>)
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <fsmmanual_run+0x208>)
 8001440:	f002 fed0 	bl	80041e4 <HAL_UART_Transmit>
                MODE = 1;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <fsmmanual_run+0x1d4>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
            break;
 800144a:	e003      	b.n	8001454 <fsmmanual_run+0x1cc>
            break;
 800144c:	bf00      	nop
 800144e:	e002      	b.n	8001456 <fsmmanual_run+0x1ce>
            break;
 8001450:	bf00      	nop
 8001452:	e000      	b.n	8001456 <fsmmanual_run+0x1ce>
            break;
 8001454:	bf00      	nop
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000064 	.word	0x20000064
 8001460:	20000068 	.word	0x20000068
 8001464:	20000058 	.word	0x20000058
 8001468:	200001b4 	.word	0x200001b4
 800146c:	2000005c 	.word	0x2000005c
 8001470:	200001bc 	.word	0x200001bc
 8001474:	20000054 	.word	0x20000054
 8001478:	200001b8 	.word	0x200001b8
 800147c:	20000050 	.word	0x20000050
 8001480:	200005c4 	.word	0x200005c4
 8001484:	20000060 	.word	0x20000060
 8001488:	08005054 	.word	0x08005054
 800148c:	20000180 	.word	0x20000180
 8001490:	2000025c 	.word	0x2000025c
 8001494:	2000006c 	.word	0x2000006c
 8001498:	08005070 	.word	0x08005070
 800149c:	20000070 	.word	0x20000070

080014a0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f023 030f 	bic.w	r3, r3, #15
 80014b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f043 030c 	orr.w	r3, r3, #12
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	f043 030c 	orr.w	r3, r3, #12
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2304      	movs	r3, #4
 80014ea:	2142      	movs	r1, #66	; 0x42
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <lcd_send_cmd+0x5c>)
 80014ee:	f001 fad1 	bl	8002a94 <HAL_I2C_Master_Transmit>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001c0 	.word	0x200001c0

08001500 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f023 030f 	bic.w	r3, r3, #15
 8001510:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	f043 030d 	orr.w	r3, r3, #13
 800151e:	b2db      	uxtb	r3, r3
 8001520:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	f043 0309 	orr.w	r3, r3, #9
 8001528:	b2db      	uxtb	r3, r3
 800152a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	f043 030d 	orr.w	r3, r3, #13
 8001532:	b2db      	uxtb	r3, r3
 8001534:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	f043 0309 	orr.w	r3, r3, #9
 800153c:	b2db      	uxtb	r3, r3
 800153e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001540:	f107 0208 	add.w	r2, r7, #8
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2304      	movs	r3, #4
 800154a:	2142      	movs	r1, #66	; 0x42
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <lcd_send_data+0x5c>)
 800154e:	f001 faa1 	bl	8002a94 <HAL_I2C_Master_Transmit>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200001c0 	.word	0x200001c0

08001560 <lcd_init>:

void lcd_init (void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001564:	2033      	movs	r0, #51	; 0x33
 8001566:	f7ff ff9b 	bl	80014a0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800156a:	2032      	movs	r0, #50	; 0x32
 800156c:	f7ff ff98 	bl	80014a0 <lcd_send_cmd>
	HAL_Delay(50);
 8001570:	2032      	movs	r0, #50	; 0x32
 8001572:	f000 fe2b 	bl	80021cc <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001576:	2028      	movs	r0, #40	; 0x28
 8001578:	f7ff ff92 	bl	80014a0 <lcd_send_cmd>
	HAL_Delay(50);
 800157c:	2032      	movs	r0, #50	; 0x32
 800157e:	f000 fe25 	bl	80021cc <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff ff8c 	bl	80014a0 <lcd_send_cmd>
	HAL_Delay(50);
 8001588:	2032      	movs	r0, #50	; 0x32
 800158a:	f000 fe1f 	bl	80021cc <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800158e:	2006      	movs	r0, #6
 8001590:	f7ff ff86 	bl	80014a0 <lcd_send_cmd>
	HAL_Delay(50);
 8001594:	2032      	movs	r0, #50	; 0x32
 8001596:	f000 fe19 	bl	80021cc <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800159a:	200c      	movs	r0, #12
 800159c:	f7ff ff80 	bl	80014a0 <lcd_send_cmd>
	HAL_Delay(50);
 80015a0:	2032      	movs	r0, #50	; 0x32
 80015a2:	f000 fe13 	bl	80021cc <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff ff7a 	bl	80014a0 <lcd_send_cmd>
	HAL_Delay(50);
 80015ac:	2032      	movs	r0, #50	; 0x32
 80015ae:	f000 fe0d 	bl	80021cc <HAL_Delay>
	lcd_send_cmd (0x80);
 80015b2:	2080      	movs	r0, #128	; 0x80
 80015b4:	f7ff ff74 	bl	80014a0 <lcd_send_cmd>
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80015c4:	e006      	b.n	80015d4 <lcd_send_string+0x18>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff96 	bl	8001500 <lcd_send_data>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f4      	bne.n	80015c6 <lcd_send_string+0xa>
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff ff58 	bl	80014a0 <lcd_send_cmd>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d108      	bne.n	8001616 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4413      	add	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	337f      	adds	r3, #127	; 0x7f
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e008      	b.n	8001628 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	3340      	adds	r3, #64	; 0x40
 800161c:	b2db      	uxtb	r3, r3
 800161e:	b25b      	sxtb	r3, r3
 8001620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001624:	b25b      	sxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff38 	bl	80014a0 <lcd_send_cmd>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163c:	f000 fd64 	bl	8002108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001640:	f000 f830 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f000 f914 	bl	8001870 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001648:	f000 f8e8 	bl	800181c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800164c:	f000 f86c 	bl	8001728 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001650:	f000 f898 	bl	8001784 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <main+0x5c>)
 8001656:	f002 f9d3 	bl	8003a00 <HAL_TIM_Base_Start_IT>
  lcd_init();
 800165a:	f7ff ff81 	bl	8001560 <lcd_init>
  lcd_clear_display();
 800165e:	f7ff ffc2 	bl	80015e6 <lcd_clear_display>
  HAL_Delay(50);
 8001662:	2032      	movs	r0, #50	; 0x32
 8001664:	f000 fdb2 	bl	80021cc <HAL_Delay>

  SCH_INIT();
 8001668:	f000 f9c9 	bl	80019fe <SCH_INIT>
  SCH_Add_Task(automatic_run, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <main+0x60>)
 8001672:	f000 f9d9 	bl	8001a28 <SCH_Add_Task>
  SCH_Add_Task(fsmmanual_run, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <main+0x64>)
 800167c:	f000 f9d4 	bl	8001a28 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	4806      	ldr	r0, [pc, #24]	; (80016a0 <main+0x68>)
 8001686:	f000 f9cf 	bl	8001a28 <SCH_Add_Task>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_led();
 800168a:	f7fe fd67 	bl	800015c <init_led>
  while (1)
  {
	  SCH_Dispatch_Task();
 800168e:	f000 faa5 	bl	8001bdc <SCH_Dispatch_Task>
 8001692:	e7fc      	b.n	800168e <main+0x56>
 8001694:	20000214 	.word	0x20000214
 8001698:	08000b1d 	.word	0x08000b1d
 800169c:	08001289 	.word	0x08001289
 80016a0:	08000971 	.word	0x08000971

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b090      	sub	sp, #64	; 0x40
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	2228      	movs	r2, #40	; 0x28
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f002 ff94 	bl	80045e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ca:	2301      	movs	r3, #1
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ce:	2310      	movs	r3, #16
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	2302      	movs	r3, #2
 80016d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fd2d 	bl	8003144 <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016f0:	f000 f980 	bl	80019f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f001 ff98 	bl	8003644 <HAL_RCC_ClockConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800171a:	f000 f96b 	bl	80019f4 <Error_Handler>
  }
}
 800171e:	bf00      	nop
 8001720:	3740      	adds	r7, #64	; 0x40
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_I2C1_Init+0x50>)
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <MX_I2C1_Init+0x54>)
 8001730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_I2C1_Init+0x50>)
 8001734:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_I2C1_Init+0x58>)
 8001736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_I2C1_Init+0x50>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_I2C1_Init+0x50>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_I2C1_Init+0x50>)
 8001746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800174a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <MX_I2C1_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_I2C1_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <MX_I2C1_Init+0x50>)
 8001766:	f001 f851 	bl	800280c <HAL_I2C_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001770:	f000 f940 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200001c0 	.word	0x200001c0
 800177c:	40005400 	.word	0x40005400
 8001780:	000186a0 	.word	0x000186a0

08001784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a0:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_TIM2_Init+0x94>)
 80017a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_TIM2_Init+0x94>)
 80017aa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <MX_TIM2_Init+0x94>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_TIM2_Init+0x94>)
 80017b8:	2209      	movs	r2, #9
 80017ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <MX_TIM2_Init+0x94>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_TIM2_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c8:	4813      	ldr	r0, [pc, #76]	; (8001818 <MX_TIM2_Init+0x94>)
 80017ca:	f002 f8c9 	bl	8003960 <HAL_TIM_Base_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017d4:	f000 f90e 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4619      	mov	r1, r3
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_TIM2_Init+0x94>)
 80017e6:	f002 fa4d 	bl	8003c84 <HAL_TIM_ConfigClockSource>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017f0:	f000 f900 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_TIM2_Init+0x94>)
 8001802:	f002 fc2f 	bl	8004064 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800180c:	f000 f8f2 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000214 	.word	0x20000214

0800181c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <MX_USART2_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001828:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800182c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_USART2_UART_Init+0x4c>)
 8001854:	f002 fc76 	bl	8004144 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f000 f8c9 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000025c 	.word	0x2000025c
 800186c:	40004400 	.word	0x40004400

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <MX_GPIO_Init+0x154>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a4e      	ldr	r2, [pc, #312]	; (80019c4 <MX_GPIO_Init+0x154>)
 800188a:	f043 0310 	orr.w	r3, r3, #16
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <MX_GPIO_Init+0x154>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <MX_GPIO_Init+0x154>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <MX_GPIO_Init+0x154>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 80018e4:	2200      	movs	r2, #0
 80018e6:	f240 31f2 	movw	r1, #1010	; 0x3f2
 80018ea:	4837      	ldr	r0, [pc, #220]	; (80019c8 <MX_GPIO_Init+0x158>)
 80018ec:	f000 ff3b 	bl	8002766 <HAL_GPIO_WritePin>
                          |RED_LED2_Pin|LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_B_Pin|LED1_A_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80018f6:	4835      	ldr	r0, [pc, #212]	; (80019cc <MX_GPIO_Init+0x15c>)
 80018f8:	f000 ff35 	bl	8002766 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001902:	4833      	ldr	r0, [pc, #204]	; (80019d0 <MX_GPIO_Init+0x160>)
 8001904:	f000 ff2f 	bl	8002766 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <MX_GPIO_Init+0x164>)
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0310 	add.w	r3, r7, #16
 800191a:	4619      	mov	r1, r3
 800191c:	482c      	ldr	r0, [pc, #176]	; (80019d0 <MX_GPIO_Init+0x160>)
 800191e:	f000 fd87 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED1_Pin AMBER_LED1_Pin LD2_Pin GREEN_LED1_Pin
                           RED_LED2_Pin LED2_A_Pin LED2_B_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 8001922:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8001926:	613b      	str	r3, [r7, #16]
                          |RED_LED2_Pin|LED2_A_Pin|LED2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2302      	movs	r3, #2
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	4823      	ldr	r0, [pc, #140]	; (80019c8 <MX_GPIO_Init+0x158>)
 800193c:	f000 fd78 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_B_Pin LED1_A_Pin */
  GPIO_InitStruct.Pin = LED1_B_Pin|LED1_A_Pin;
 8001940:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2302      	movs	r3, #2
 8001950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	481c      	ldr	r0, [pc, #112]	; (80019cc <MX_GPIO_Init+0x15c>)
 800195a:	f000 fd69 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	4619      	mov	r1, r3
 8001970:	4817      	ldr	r0, [pc, #92]	; (80019d0 <MX_GPIO_Init+0x160>)
 8001972:	f000 fd5d 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8001976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800197a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2302      	movs	r3, #2
 8001986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	4810      	ldr	r0, [pc, #64]	; (80019d0 <MX_GPIO_Init+0x160>)
 8001990:	f000 fd4e 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON4_Pin BUTTON3_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON4_Pin|BUTTON3_Pin|BUTTON1_Pin;
 8001994:	2368      	movs	r3, #104	; 0x68
 8001996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199c:	2301      	movs	r3, #1
 800199e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <MX_GPIO_Init+0x15c>)
 80019a8:	f000 fd42 	bl	8002430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2028      	movs	r0, #40	; 0x28
 80019b2:	f000 fd06 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019b6:	2028      	movs	r0, #40	; 0x28
 80019b8:	f000 fd1f 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40011000 	.word	0x40011000
 80019d4:	10110000 	.word	0x10110000

080019d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  timerRun();
 80019e0:	f000 f9e2 	bl	8001da8 <timerRun>
  getKeyInput();
 80019e4:	f7fe ffc4 	bl	8000970 <getKeyInput>
  SCH_Update();
 80019e8:	f000 f8a4 	bl	8001b34 <SCH_Update>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>

080019fe <SCH_INIT>:
    uint32_t TaskID;
} sTask;

sTask SCH_Tasks_G[SCH_MAX_TASKS];

void SCH_INIT(void) {
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e006      	b.n	8001a18 <SCH_INIT+0x1a>
        SCH_Delete_Task(i);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 f949 	bl	8001ca4 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3301      	adds	r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b27      	cmp	r3, #39	; 0x27
 8001a1c:	ddf5      	ble.n	8001a0a <SCH_INIT+0xc>
    }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001a28:	b4b0      	push	{r4, r5, r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
    int Indextoadd = Last_Task;
 8001a34:	4b3c      	ldr	r3, [pc, #240]	; (8001b28 <SCH_Add_Task+0x100>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61fb      	str	r3, [r7, #28]
    DELAY = DELAY / 10;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	4a3b      	ldr	r2, [pc, #236]	; (8001b2c <SCH_Add_Task+0x104>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	60bb      	str	r3, [r7, #8]
    if (Last_Task < SCH_MAX_TASKS) {
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <SCH_Add_Task+0x100>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b27      	cmp	r3, #39	; 0x27
 8001a4c:	dc66      	bgt.n	8001b1c <SCH_Add_Task+0xf4>
        for (int i = 0; i < Last_Task; i++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	e012      	b.n	8001a7a <SCH_Add_Task+0x52>
            if (SCH_Tasks_G[i].Delay <= DELAY) {
 8001a54:	4936      	ldr	r1, [pc, #216]	; (8001b30 <SCH_Add_Task+0x108>)
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	3304      	adds	r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d303      	bcc.n	8001a74 <SCH_Add_Task+0x4c>
        for (int i = 0; i < Last_Task; i++) {
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	e002      	b.n	8001a7a <SCH_Add_Task+0x52>
                continue;
            } else {
                Indextoadd = i;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	61fb      	str	r3, [r7, #28]
                break;
 8001a78:	e004      	b.n	8001a84 <SCH_Add_Task+0x5c>
        for (int i = 0; i < Last_Task; i++) {
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <SCH_Add_Task+0x100>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbe7      	blt.n	8001a54 <SCH_Add_Task+0x2c>
            }
        }
        for (int i = Last_Task; i > Indextoadd; i--) {
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <SCH_Add_Task+0x100>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e017      	b.n	8001abc <SCH_Add_Task+0x94>
            SCH_Tasks_G[i] = SCH_Tasks_G[i - 1];
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1e5a      	subs	r2, r3, #1
 8001a90:	4827      	ldr	r0, [pc, #156]	; (8001b30 <SCH_Add_Task+0x108>)
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	460b      	mov	r3, r1
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4418      	add	r0, r3
 8001a9e:	4924      	ldr	r1, [pc, #144]	; (8001b30 <SCH_Add_Task+0x108>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	4604      	mov	r4, r0
 8001aac:	461d      	mov	r5, r3
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	682b      	ldr	r3, [r5, #0]
 8001ab4:	6023      	str	r3, [r4, #0]
        for (int i = Last_Task; i > Indextoadd; i--) {
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dce3      	bgt.n	8001a8c <SCH_Add_Task+0x64>
        }
        Last_Task++;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <SCH_Add_Task+0x100>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <SCH_Add_Task+0x100>)
 8001acc:	6013      	str	r3, [r2, #0]
        SCH_Tasks_G[Indextoadd].pTask = pFunction;
 8001ace:	4918      	ldr	r1, [pc, #96]	; (8001b30 <SCH_Add_Task+0x108>)
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	601a      	str	r2, [r3, #0]
        SCH_Tasks_G[Indextoadd].Delay = DELAY;
 8001ae0:	4913      	ldr	r1, [pc, #76]	; (8001b30 <SCH_Add_Task+0x108>)
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	3304      	adds	r3, #4
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	601a      	str	r2, [r3, #0]
        SCH_Tasks_G[Indextoadd].Period = PERIOD;
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <SCH_Add_Task+0x108>)
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3308      	adds	r3, #8
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	601a      	str	r2, [r3, #0]
        SCH_Tasks_G[Indextoadd].RunMe = 0;
 8001b08:	4909      	ldr	r1, [pc, #36]	; (8001b30 <SCH_Add_Task+0x108>)
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	330c      	adds	r3, #12
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
//        if (Indextoadd < Last_Task - 1) {
//            SCH_Tasks_G[Indextoadd + 1].Delay -= SCH_Tasks_G[Indextoadd].Delay;
//        }
    }
}
 8001b1c:	bf00      	nop
 8001b1e:	3724      	adds	r7, #36	; 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bcb0      	pop	{r4, r5, r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000013c 	.word	0x2000013c
 8001b2c:	cccccccd 	.word	0xcccccccd
 8001b30:	200002a4 	.word	0x200002a4

08001b34 <SCH_Update>:

void SCH_Update(void) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
    for (int i = 0; i < Last_Task; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	e040      	b.n	8001bc2 <SCH_Update+0x8e>
        if (SCH_Tasks_G[i].Delay > 0) {
 8001b40:	4924      	ldr	r1, [pc, #144]	; (8001bd4 <SCH_Update+0xa0>)
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3304      	adds	r3, #4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <SCH_Update+0x48>
            SCH_Tasks_G[i].Delay--;
 8001b56:	491f      	ldr	r1, [pc, #124]	; (8001bd4 <SCH_Update+0xa0>)
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3304      	adds	r3, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1e59      	subs	r1, r3, #1
 8001b6a:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <SCH_Update+0xa0>)
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4403      	add	r3, r0
 8001b78:	3304      	adds	r3, #4
 8001b7a:	6019      	str	r1, [r3, #0]
        }
        if (SCH_Tasks_G[i].Delay == 0) {
 8001b7c:	4915      	ldr	r1, [pc, #84]	; (8001bd4 <SCH_Update+0xa0>)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <SCH_Update+0x88>
            SCH_Tasks_G[i].RunMe++;
 8001b92:	4910      	ldr	r1, [pc, #64]	; (8001bd4 <SCH_Update+0xa0>)
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330c      	adds	r3, #12
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2d8      	uxtb	r0, r3
 8001ba8:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <SCH_Update+0xa0>)
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	330c      	adds	r3, #12
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < Last_Task; i++) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SCH_Update+0xa4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbb9      	blt.n	8001b40 <SCH_Update+0xc>
//        SCH_Tasks_G[0].RunMe++;
//    }
//    if(SCH_Tasks_G[0].Delay < 0){
//    	return;
//    }
}
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	200002a4 	.word	0x200002a4
 8001bd8:	2000013c 	.word	0x2000013c

08001bdc <SCH_Dispatch_Task>:

void SCH_Dispatch_Task(void) {
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
    for (int i = 0; i < Last_Task; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e04f      	b.n	8001c88 <SCH_Dispatch_Task+0xac>
        if (SCH_Tasks_G[i].RunMe > 0) {
 8001be8:	492c      	ldr	r1, [pc, #176]	; (8001c9c <SCH_Dispatch_Task+0xc0>)
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	330c      	adds	r3, #12
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d041      	beq.n	8001c82 <SCH_Dispatch_Task+0xa6>
            SCH_Tasks_G[i].RunMe--;
 8001bfe:	4927      	ldr	r1, [pc, #156]	; (8001c9c <SCH_Dispatch_Task+0xc0>)
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	330c      	adds	r3, #12
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b2d8      	uxtb	r0, r3
 8001c14:	4921      	ldr	r1, [pc, #132]	; (8001c9c <SCH_Dispatch_Task+0xc0>)
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	330c      	adds	r3, #12
 8001c24:	4602      	mov	r2, r0
 8001c26:	701a      	strb	r2, [r3, #0]
            (*SCH_Tasks_G[i].pTask)();
 8001c28:	491c      	ldr	r1, [pc, #112]	; (8001c9c <SCH_Dispatch_Task+0xc0>)
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4798      	blx	r3
            sTask temp = SCH_Tasks_G[i];
 8001c3a:	4918      	ldr	r1, [pc, #96]	; (8001c9c <SCH_Dispatch_Task+0xc0>)
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	463c      	mov	r4, r7
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	6023      	str	r3, [r4, #0]
            SCH_Delete_Task(i);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f824 	bl	8001ca4 <SCH_Delete_Task>
            if (temp.Period > 0) {
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <SCH_Dispatch_Task+0x94>
                SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fedd 	bl	8001a28 <SCH_Add_Task>
 8001c6e:	e008      	b.n	8001c82 <SCH_Dispatch_Task+0xa6>
            } else if (temp.Period == 0) {
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <SCH_Dispatch_Task+0xa6>
                SCH_Add_Task(temp.pTask, 0, 0);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fed3 	bl	8001a28 <SCH_Add_Task>
    for (int i = 0; i < Last_Task; i++) {
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <SCH_Dispatch_Task+0xc4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbaa      	blt.n	8001be8 <SCH_Dispatch_Task+0xc>
            }
        }
    }
}
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	200002a4 	.word	0x200002a4
 8001ca0:	2000013c 	.word	0x2000013c

08001ca4 <SCH_Delete_Task>:

void SCH_Add_Oneshot_Task(void (*pFunction)(), uint32_t DELAY) {
    SCH_Add_Task(pFunction, DELAY, -1);
}

void SCH_Delete_Task(uint32_t index) {
 8001ca4:	b4b0      	push	{r4, r5, r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    if (index >= Last_Task) {
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d255      	bcs.n	8001d64 <SCH_Delete_Task+0xc0>
        return;
    }
//    if (index < Last_Task - 1) {
//        SCH_Tasks_G[index + 1].Delay += SCH_Tasks_G[index].Delay;
//    }
    for (int i = index; i < Last_Task - 1; i++) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e017      	b.n	8001cee <SCH_Delete_Task+0x4a>
        SCH_Tasks_G[i] = SCH_Tasks_G[i + 1];
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	482c      	ldr	r0, [pc, #176]	; (8001d74 <SCH_Delete_Task+0xd0>)
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4418      	add	r0, r3
 8001cd0:	4928      	ldr	r1, [pc, #160]	; (8001d74 <SCH_Delete_Task+0xd0>)
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	4604      	mov	r4, r0
 8001cde:	461d      	mov	r5, r3
 8001ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce4:	682b      	ldr	r3, [r5, #0]
 8001ce6:	6023      	str	r3, [r4, #0]
    for (int i = index; i < Last_Task - 1; i++) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dbe1      	blt.n	8001cbe <SCH_Delete_Task+0x1a>
    }
    SCH_Tasks_G[Last_Task - 1].pTask = NULL;
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	491c      	ldr	r1, [pc, #112]	; (8001d74 <SCH_Delete_Task+0xd0>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[Last_Task - 1].Delay = 0;
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1e5a      	subs	r2, r3, #1
 8001d16:	4917      	ldr	r1, [pc, #92]	; (8001d74 <SCH_Delete_Task+0xd0>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3304      	adds	r3, #4
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[Last_Task - 1].Period = 0;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	1e5a      	subs	r2, r3, #1
 8001d2e:	4911      	ldr	r1, [pc, #68]	; (8001d74 <SCH_Delete_Task+0xd0>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3308      	adds	r3, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    SCH_Tasks_G[Last_Task - 1].RunMe = 0;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	1e5a      	subs	r2, r3, #1
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <SCH_Delete_Task+0xd0>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	330c      	adds	r3, #12
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    Last_Task--;
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <SCH_Delete_Task+0xcc>)
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e000      	b.n	8001d66 <SCH_Delete_Task+0xc2>
        return;
 8001d64:	bf00      	nop
}
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bcb0      	pop	{r4, r5, r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000013c 	.word	0x2000013c
 8001d74:	200002a4 	.word	0x200002a4

08001d78 <settimer1>:
 */
#include "software_timer.h"

int timerCouter[10];
int timerFlag[10];
void settimer1( int index , int counter){
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	 timerCouter[index]= counter;
 8001d82:	4907      	ldr	r1, [pc, #28]	; (8001da0 <settimer1+0x28>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 timerFlag[index]=0;
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <settimer1+0x2c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2100      	movs	r1, #0
 8001d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	200005ec 	.word	0x200005ec
 8001da4:	200005c4 	.word	0x200005c4

08001da8 <timerRun>:
void settimer2( int index , int counter){
	 timerCouter[index]= counter;
	 timerFlag[index]=0;
}
void timerRun(){
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
	for( int i=0 ; i < 10 ; i++){
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
 8001db2:	e01c      	b.n	8001dee <timerRun+0x46>
		if(timerCouter[i]>0){
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <timerRun+0x58>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	dd08      	ble.n	8001dd2 <timerRun+0x2a>
			timerCouter[i]--;
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <timerRun+0x58>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <timerRun+0x58>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(timerCouter[i]<=0){
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <timerRun+0x58>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	dc04      	bgt.n	8001de8 <timerRun+0x40>
			timerFlag[i]=1;
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <timerRun+0x5c>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2101      	movs	r1, #1
 8001de4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int i=0 ; i < 10 ; i++){
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	dddf      	ble.n	8001db4 <timerRun+0xc>
		}
	}
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	200005ec 	.word	0x200005ec
 8001e04:	200005c4 	.word	0x200005c4

08001e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_MspInit+0x5c>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_MspInit+0x60>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_MspInit+0x60>)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010000 	.word	0x40010000

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_I2C_MspInit+0x90>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d132      	bne.n	8001ef2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_I2C_MspInit+0x94>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_I2C_MspInit+0x94>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_I2C_MspInit+0x94>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eaa:	2312      	movs	r3, #18
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4812      	ldr	r0, [pc, #72]	; (8001f04 <HAL_I2C_MspInit+0x98>)
 8001eba:	f000 fab9 	bl	8002430 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_I2C_MspInit+0x9c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_I2C_MspInit+0x9c>)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_I2C_MspInit+0x94>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <HAL_I2C_MspInit+0x94>)
 8001ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_I2C_MspInit+0x94>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40005400 	.word	0x40005400
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40010c00 	.word	0x40010c00
 8001f08:	40010000 	.word	0x40010000

08001f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1c:	d113      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <HAL_TIM_Base_MspInit+0x44>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <HAL_TIM_Base_MspInit+0x44>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_TIM_Base_MspInit+0x44>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	201c      	movs	r0, #28
 8001f3c:	f000 fa41 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f40:	201c      	movs	r0, #28
 8001f42:	f000 fa5a 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a15      	ldr	r2, [pc, #84]	; (8001fc4 <HAL_UART_MspInit+0x70>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d123      	bne.n	8001fbc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_UART_MspInit+0x74>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4a13      	ldr	r2, [pc, #76]	; (8001fc8 <HAL_UART_MspInit+0x74>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7e:	61d3      	str	r3, [r2, #28]
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x74>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_UART_MspInit+0x74>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_UART_MspInit+0x74>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_UART_MspInit+0x74>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_UART_MspInit+0x78>)
 8001fb8:	f000 fa3a 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3720      	adds	r7, #32
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40010800 	.word	0x40010800

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <UsageFault_Handler+0x4>

08001fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002016:	f000 f8bd 	bl	8002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <TIM2_IRQHandler+0x10>)
 8002026:	f001 fd3d 	bl	8003aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000214 	.word	0x20000214

08002034 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002038:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800203c:	f000 fbc4 	bl	80027c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}

08002044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <_sbrk+0x5c>)
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <_sbrk+0x60>)
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <_sbrk+0x64>)
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <_sbrk+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d207      	bcs.n	8002084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002074:	f002 fa8a 	bl	800458c <__errno>
 8002078:	4603      	mov	r3, r0
 800207a:	220c      	movs	r2, #12
 800207c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
 8002082:	e009      	b.n	8002098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <_sbrk+0x64>)
 8002094:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20005000 	.word	0x20005000
 80020a4:	00000400 	.word	0x00000400
 80020a8:	20000140 	.word	0x20000140
 80020ac:	20000628 	.word	0x20000628

080020b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020bc:	f7ff fff8 	bl	80020b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020c0:	480b      	ldr	r0, [pc, #44]	; (80020f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020c2:	490c      	ldr	r1, [pc, #48]	; (80020f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020d8:	4c09      	ldr	r4, [pc, #36]	; (8002100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020e6:	f002 fa57 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ea:	f7ff faa5 	bl	8001638 <main>
  bx lr
 80020ee:	4770      	bx	lr
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80020f8:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 80020fc:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002100:	20000628 	.word	0x20000628

08002104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC1_2_IRQHandler>
	...

08002108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_Init+0x28>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_Init+0x28>)
 8002112:	f043 0310 	orr.w	r3, r3, #16
 8002116:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002118:	2003      	movs	r0, #3
 800211a:	f000 f947 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f808 	bl	8002134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002124:	f7ff fe70 	bl	8001e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000

08002134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_InitTick+0x54>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_InitTick+0x58>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214a:	fbb3 f3f1 	udiv	r3, r3, r1
 800214e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f95f 	bl	8002416 <HAL_SYSTICK_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00e      	b.n	8002180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b0f      	cmp	r3, #15
 8002166:	d80a      	bhi.n	800217e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002168:	2200      	movs	r2, #0
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f000 f927 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002174:	4a06      	ldr	r2, [pc, #24]	; (8002190 <HAL_InitTick+0x5c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000080 	.word	0x20000080
 800218c:	20000088 	.word	0x20000088
 8002190:	20000084 	.word	0x20000084

08002194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_IncTick+0x1c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_IncTick+0x20>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_IncTick+0x20>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	20000088 	.word	0x20000088
 80021b4:	20000614 	.word	0x20000614

080021b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <HAL_GetTick+0x10>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	20000614 	.word	0x20000614

080021cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d4:	f7ff fff0 	bl	80021b8 <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e4:	d005      	beq.n	80021f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_Delay+0x44>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021f2:	bf00      	nop
 80021f4:	f7ff ffe0 	bl	80021b8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	429a      	cmp	r2, r3
 8002202:	d8f7      	bhi.n	80021f4 <HAL_Delay+0x28>
  {
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000088 	.word	0x20000088

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	; (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4906      	ldr	r1, [pc, #24]	; (80022ac <__NVIC_EnableIRQ+0x34>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	; (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	; (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff90 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff2d 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff42 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff90 	bl	8002304 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5f 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff35 	bl	8002278 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b08b      	sub	sp, #44	; 0x2c
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002442:	e169      	b.n	8002718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002444:	2201      	movs	r2, #1
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	429a      	cmp	r2, r3
 800245e:	f040 8158 	bne.w	8002712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a9a      	ldr	r2, [pc, #616]	; (80026d0 <HAL_GPIO_Init+0x2a0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d05e      	beq.n	800252a <HAL_GPIO_Init+0xfa>
 800246c:	4a98      	ldr	r2, [pc, #608]	; (80026d0 <HAL_GPIO_Init+0x2a0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d875      	bhi.n	800255e <HAL_GPIO_Init+0x12e>
 8002472:	4a98      	ldr	r2, [pc, #608]	; (80026d4 <HAL_GPIO_Init+0x2a4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d058      	beq.n	800252a <HAL_GPIO_Init+0xfa>
 8002478:	4a96      	ldr	r2, [pc, #600]	; (80026d4 <HAL_GPIO_Init+0x2a4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d86f      	bhi.n	800255e <HAL_GPIO_Init+0x12e>
 800247e:	4a96      	ldr	r2, [pc, #600]	; (80026d8 <HAL_GPIO_Init+0x2a8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d052      	beq.n	800252a <HAL_GPIO_Init+0xfa>
 8002484:	4a94      	ldr	r2, [pc, #592]	; (80026d8 <HAL_GPIO_Init+0x2a8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d869      	bhi.n	800255e <HAL_GPIO_Init+0x12e>
 800248a:	4a94      	ldr	r2, [pc, #592]	; (80026dc <HAL_GPIO_Init+0x2ac>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d04c      	beq.n	800252a <HAL_GPIO_Init+0xfa>
 8002490:	4a92      	ldr	r2, [pc, #584]	; (80026dc <HAL_GPIO_Init+0x2ac>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d863      	bhi.n	800255e <HAL_GPIO_Init+0x12e>
 8002496:	4a92      	ldr	r2, [pc, #584]	; (80026e0 <HAL_GPIO_Init+0x2b0>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d046      	beq.n	800252a <HAL_GPIO_Init+0xfa>
 800249c:	4a90      	ldr	r2, [pc, #576]	; (80026e0 <HAL_GPIO_Init+0x2b0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d85d      	bhi.n	800255e <HAL_GPIO_Init+0x12e>
 80024a2:	2b12      	cmp	r3, #18
 80024a4:	d82a      	bhi.n	80024fc <HAL_GPIO_Init+0xcc>
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d859      	bhi.n	800255e <HAL_GPIO_Init+0x12e>
 80024aa:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <HAL_GPIO_Init+0x80>)
 80024ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b0:	0800252b 	.word	0x0800252b
 80024b4:	08002505 	.word	0x08002505
 80024b8:	08002517 	.word	0x08002517
 80024bc:	08002559 	.word	0x08002559
 80024c0:	0800255f 	.word	0x0800255f
 80024c4:	0800255f 	.word	0x0800255f
 80024c8:	0800255f 	.word	0x0800255f
 80024cc:	0800255f 	.word	0x0800255f
 80024d0:	0800255f 	.word	0x0800255f
 80024d4:	0800255f 	.word	0x0800255f
 80024d8:	0800255f 	.word	0x0800255f
 80024dc:	0800255f 	.word	0x0800255f
 80024e0:	0800255f 	.word	0x0800255f
 80024e4:	0800255f 	.word	0x0800255f
 80024e8:	0800255f 	.word	0x0800255f
 80024ec:	0800255f 	.word	0x0800255f
 80024f0:	0800255f 	.word	0x0800255f
 80024f4:	0800250d 	.word	0x0800250d
 80024f8:	08002521 	.word	0x08002521
 80024fc:	4a79      	ldr	r2, [pc, #484]	; (80026e4 <HAL_GPIO_Init+0x2b4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002502:	e02c      	b.n	800255e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	623b      	str	r3, [r7, #32]
          break;
 800250a:	e029      	b.n	8002560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	3304      	adds	r3, #4
 8002512:	623b      	str	r3, [r7, #32]
          break;
 8002514:	e024      	b.n	8002560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	3308      	adds	r3, #8
 800251c:	623b      	str	r3, [r7, #32]
          break;
 800251e:	e01f      	b.n	8002560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	330c      	adds	r3, #12
 8002526:	623b      	str	r3, [r7, #32]
          break;
 8002528:	e01a      	b.n	8002560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002532:	2304      	movs	r3, #4
 8002534:	623b      	str	r3, [r7, #32]
          break;
 8002536:	e013      	b.n	8002560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002540:	2308      	movs	r3, #8
 8002542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	611a      	str	r2, [r3, #16]
          break;
 800254a:	e009      	b.n	8002560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800254c:	2308      	movs	r3, #8
 800254e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69fa      	ldr	r2, [r7, #28]
 8002554:	615a      	str	r2, [r3, #20]
          break;
 8002556:	e003      	b.n	8002560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002558:	2300      	movs	r3, #0
 800255a:	623b      	str	r3, [r7, #32]
          break;
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x130>
          break;
 800255e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2bff      	cmp	r3, #255	; 0xff
 8002564:	d801      	bhi.n	800256a <HAL_GPIO_Init+0x13a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	e001      	b.n	800256e <HAL_GPIO_Init+0x13e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2bff      	cmp	r3, #255	; 0xff
 8002574:	d802      	bhi.n	800257c <HAL_GPIO_Init+0x14c>
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	e002      	b.n	8002582 <HAL_GPIO_Init+0x152>
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3b08      	subs	r3, #8
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	210f      	movs	r1, #15
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	401a      	ands	r2, r3
 8002594:	6a39      	ldr	r1, [r7, #32]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	431a      	orrs	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80b1 	beq.w	8002712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025b0:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <HAL_GPIO_Init+0x2b8>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4a4c      	ldr	r2, [pc, #304]	; (80026e8 <HAL_GPIO_Init+0x2b8>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6193      	str	r3, [r2, #24]
 80025bc:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_GPIO_Init+0x2b8>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025c8:	4a48      	ldr	r2, [pc, #288]	; (80026ec <HAL_GPIO_Init+0x2bc>)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	3302      	adds	r3, #2
 80025d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_GPIO_Init+0x2c0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_GPIO_Init+0x1ec>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a3f      	ldr	r2, [pc, #252]	; (80026f4 <HAL_GPIO_Init+0x2c4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00d      	beq.n	8002618 <HAL_GPIO_Init+0x1e8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a3e      	ldr	r2, [pc, #248]	; (80026f8 <HAL_GPIO_Init+0x2c8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <HAL_GPIO_Init+0x1e4>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a3d      	ldr	r2, [pc, #244]	; (80026fc <HAL_GPIO_Init+0x2cc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d101      	bne.n	8002610 <HAL_GPIO_Init+0x1e0>
 800260c:	2303      	movs	r3, #3
 800260e:	e006      	b.n	800261e <HAL_GPIO_Init+0x1ee>
 8002610:	2304      	movs	r3, #4
 8002612:	e004      	b.n	800261e <HAL_GPIO_Init+0x1ee>
 8002614:	2302      	movs	r3, #2
 8002616:	e002      	b.n	800261e <HAL_GPIO_Init+0x1ee>
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_GPIO_Init+0x1ee>
 800261c:	2300      	movs	r3, #0
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	f002 0203 	and.w	r2, r2, #3
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	4093      	lsls	r3, r2
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800262e:	492f      	ldr	r1, [pc, #188]	; (80026ec <HAL_GPIO_Init+0x2bc>)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	492c      	ldr	r1, [pc, #176]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	43db      	mvns	r3, r3
 800265e:	4928      	ldr	r1, [pc, #160]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 8002660:	4013      	ands	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4922      	ldr	r1, [pc, #136]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	60cb      	str	r3, [r1, #12]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	491e      	ldr	r1, [pc, #120]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4918      	ldr	r1, [pc, #96]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	4914      	ldr	r1, [pc, #80]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d021      	beq.n	8002704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	490e      	ldr	r1, [pc, #56]	; (8002700 <HAL_GPIO_Init+0x2d0>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	e021      	b.n	8002712 <HAL_GPIO_Init+0x2e2>
 80026ce:	bf00      	nop
 80026d0:	10320000 	.word	0x10320000
 80026d4:	10310000 	.word	0x10310000
 80026d8:	10220000 	.word	0x10220000
 80026dc:	10210000 	.word	0x10210000
 80026e0:	10120000 	.word	0x10120000
 80026e4:	10110000 	.word	0x10110000
 80026e8:	40021000 	.word	0x40021000
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40010800 	.word	0x40010800
 80026f4:	40010c00 	.word	0x40010c00
 80026f8:	40011000 	.word	0x40011000
 80026fc:	40011400 	.word	0x40011400
 8002700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_GPIO_Init+0x304>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	43db      	mvns	r3, r3
 800270c:	4909      	ldr	r1, [pc, #36]	; (8002734 <HAL_GPIO_Init+0x304>)
 800270e:	4013      	ands	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3301      	adds	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	fa22 f303 	lsr.w	r3, r2, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	f47f ae8e 	bne.w	8002444 <HAL_GPIO_Init+0x14>
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	372c      	adds	r7, #44	; 0x2c
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e001      	b.n	800275a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]
 8002772:	4613      	mov	r3, r2
 8002774:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002776:	787b      	ldrb	r3, [r7, #1]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277c:	887a      	ldrh	r2, [r7, #2]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002782:	e003      	b.n	800278c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	041a      	lsls	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	611a      	str	r2, [r3, #16]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4013      	ands	r3, r2
 80027ae:	041a      	lsls	r2, r3, #16
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	400b      	ands	r3, r1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	611a      	str	r2, [r3, #16]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027de:	4a05      	ldr	r2, [pc, #20]	; (80027f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f806 	bl	80027f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e12b      	b.n	8002a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fb1a 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2224      	movs	r2, #36	; 0x24
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800285e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800286e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002870:	f001 f830 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a81      	ldr	r2, [pc, #516]	; (8002a80 <HAL_I2C_Init+0x274>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d807      	bhi.n	8002890 <HAL_I2C_Init+0x84>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a80      	ldr	r2, [pc, #512]	; (8002a84 <HAL_I2C_Init+0x278>)
 8002884:	4293      	cmp	r3, r2
 8002886:	bf94      	ite	ls
 8002888:	2301      	movls	r3, #1
 800288a:	2300      	movhi	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	e006      	b.n	800289e <HAL_I2C_Init+0x92>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a7d      	ldr	r2, [pc, #500]	; (8002a88 <HAL_I2C_Init+0x27c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0e7      	b.n	8002a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4a78      	ldr	r2, [pc, #480]	; (8002a8c <HAL_I2C_Init+0x280>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9b      	lsrs	r3, r3, #18
 80028b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	; (8002a80 <HAL_I2C_Init+0x274>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d802      	bhi.n	80028e0 <HAL_I2C_Init+0xd4>
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	3301      	adds	r3, #1
 80028de:	e009      	b.n	80028f4 <HAL_I2C_Init+0xe8>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <HAL_I2C_Init+0x284>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	3301      	adds	r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	495c      	ldr	r1, [pc, #368]	; (8002a80 <HAL_I2C_Init+0x274>)
 8002910:	428b      	cmp	r3, r1
 8002912:	d819      	bhi.n	8002948 <HAL_I2C_Init+0x13c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e59      	subs	r1, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002922:	1c59      	adds	r1, r3, #1
 8002924:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002928:	400b      	ands	r3, r1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_I2C_Init+0x138>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e59      	subs	r1, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fbb1 f3f3 	udiv	r3, r1, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002942:	e051      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 8002944:	2304      	movs	r3, #4
 8002946:	e04f      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_I2C_Init+0x168>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	440b      	add	r3, r1
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e012      	b.n	800299a <HAL_I2C_Init+0x18e>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	0099      	lsls	r1, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	fbb0 f3f3 	udiv	r3, r0, r3
 800298a:	3301      	adds	r3, #1
 800298c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Init+0x196>
 800299e:	2301      	movs	r3, #1
 80029a0:	e022      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10e      	bne.n	80029c8 <HAL_I2C_Init+0x1bc>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e58      	subs	r0, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	440b      	add	r3, r1
 80029b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	e00f      	b.n	80029e8 <HAL_I2C_Init+0x1dc>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e58      	subs	r0, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6859      	ldr	r1, [r3, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	0099      	lsls	r1, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	fbb0 f3f3 	udiv	r3, r0, r3
 80029de:	3301      	adds	r3, #1
 80029e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	6809      	ldr	r1, [r1, #0]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6911      	ldr	r1, [r2, #16]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	68d2      	ldr	r2, [r2, #12]
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	000186a0 	.word	0x000186a0
 8002a84:	001e847f 	.word	0x001e847f
 8002a88:	003d08ff 	.word	0x003d08ff
 8002a8c:	431bde83 	.word	0x431bde83
 8002a90:	10624dd3 	.word	0x10624dd3

08002a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	817b      	strh	r3, [r7, #10]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fb86 	bl	80021b8 <HAL_GetTick>
 8002aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	f040 80e0 	bne.w	8002c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2319      	movs	r3, #25
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4970      	ldr	r1, [pc, #448]	; (8002c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f964 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0d3      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x50>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e0cc      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d007      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2221      	movs	r2, #33	; 0x21
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2210      	movs	r2, #16
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	893a      	ldrh	r2, [r7, #8]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	6a3a      	ldr	r2, [r7, #32]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f89c 	bl	8002c90 <I2C_MasterRequestWrite>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e08d      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b78:	e066      	b.n	8002c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	6a39      	ldr	r1, [r7, #32]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fa22 	bl	8002fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	781a      	ldrb	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d11b      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x188>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d017      	beq.n	8002c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	781a      	ldrb	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	6a39      	ldr	r1, [r7, #32]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fa19 	bl	8003058 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00d      	beq.n	8002c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d107      	bne.n	8002c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e01a      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d194      	bne.n	8002b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e000      	b.n	8002c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	00100002 	.word	0x00100002
 8002c8c:	ffff0000 	.word	0xffff0000

08002c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d006      	beq.n	8002cba <I2C_MasterRequestWrite+0x2a>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d003      	beq.n	8002cba <I2C_MasterRequestWrite+0x2a>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb8:	d108      	bne.n	8002ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e00b      	b.n	8002ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2b12      	cmp	r3, #18
 8002cd2:	d107      	bne.n	8002ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f84f 	bl	8002d94 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0a:	d103      	bne.n	8002d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e035      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d20:	d108      	bne.n	8002d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	e01b      	b.n	8002d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	11db      	asrs	r3, r3, #7
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0306 	and.w	r3, r3, #6
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f063 030f 	orn	r3, r3, #15
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <I2C_MasterRequestWrite+0xfc>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f898 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e010      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <I2C_MasterRequestWrite+0x100>)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f888 	bl	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	00010008 	.word	0x00010008
 8002d90:	00010002 	.word	0x00010002

08002d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002da4:	e048      	b.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d044      	beq.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff fa03 	bl	80021b8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d139      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	e00c      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d116      	bne.n	8002e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0220 	orr.w	r2, r3, #32
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e023      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	0c1b      	lsrs	r3, r3, #16
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	e00c      	b.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d093      	beq.n	8002da6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e96:	e071      	b.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d123      	bne.n	8002ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e067      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d041      	beq.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef8:	f7ff f95e 	bl	80021b8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d302      	bcc.n	8002f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d136      	bne.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d10c      	bne.n	8002f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	e00b      	b.n	8002f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e021      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10c      	bne.n	8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e00b      	b.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f47f af6d 	bne.w	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fd4:	e034      	b.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f886 	bl	80030e8 <I2C_IsAcknowledgeFailed>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e034      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d028      	beq.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7ff f8e3 	bl	80021b8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11d      	bne.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d016      	beq.n	8003040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d1c3      	bne.n	8002fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	e034      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f83e 	bl	80030e8 <I2C_IsAcknowledgeFailed>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e034      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d028      	beq.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7ff f89b 	bl	80021b8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d11d      	bne.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d016      	beq.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e007      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d1c3      	bne.n	8003066 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fe:	d11b      	bne.n	8003138 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003108:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	f043 0204 	orr.w	r2, r3, #4
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e26c      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 8087 	beq.w	8003272 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003164:	4b92      	ldr	r3, [pc, #584]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b04      	cmp	r3, #4
 800316e:	d00c      	beq.n	800318a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003170:	4b8f      	ldr	r3, [pc, #572]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d112      	bne.n	80031a2 <HAL_RCC_OscConfig+0x5e>
 800317c:	4b8c      	ldr	r3, [pc, #560]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d10b      	bne.n	80031a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318a:	4b89      	ldr	r3, [pc, #548]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06c      	beq.n	8003270 <HAL_RCC_OscConfig+0x12c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d168      	bne.n	8003270 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e246      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x76>
 80031ac:	4b80      	ldr	r3, [pc, #512]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7f      	ldr	r2, [pc, #508]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e02e      	b.n	8003218 <HAL_RCC_OscConfig+0xd4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b7b      	ldr	r3, [pc, #492]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7a      	ldr	r2, [pc, #488]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b78      	ldr	r3, [pc, #480]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a77      	ldr	r2, [pc, #476]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e01d      	b.n	8003218 <HAL_RCC_OscConfig+0xd4>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0xbc>
 80031e6:	4b72      	ldr	r3, [pc, #456]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a71      	ldr	r2, [pc, #452]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6e      	ldr	r2, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0xd4>
 8003200:	4b6b      	ldr	r3, [pc, #428]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6a      	ldr	r2, [pc, #424]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a67      	ldr	r2, [pc, #412]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003216:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d013      	beq.n	8003248 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe ffca 	bl	80021b8 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe ffc6 	bl	80021b8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1fa      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0xe4>
 8003246:	e014      	b.n	8003272 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fe ffb6 	bl	80021b8 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003250:	f7fe ffb2 	bl	80021b8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1e6      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x10c>
 800326e:	e000      	b.n	8003272 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d063      	beq.n	8003346 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800327e:	4b4c      	ldr	r3, [pc, #304]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800328a:	4b49      	ldr	r3, [pc, #292]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b08      	cmp	r3, #8
 8003294:	d11c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x18c>
 8003296:	4b46      	ldr	r3, [pc, #280]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a2:	4b43      	ldr	r3, [pc, #268]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_RCC_OscConfig+0x176>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e1ba      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4939      	ldr	r1, [pc, #228]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ce:	e03a      	b.n	8003346 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe ff6b 	bl	80021b8 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe ff67 	bl	80021b8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e19b      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4927      	ldr	r1, [pc, #156]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]
 8003318:	e015      	b.n	8003346 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800331a:	4b26      	ldr	r3, [pc, #152]	; (80033b4 <HAL_RCC_OscConfig+0x270>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe ff4a 	bl	80021b8 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003328:	f7fe ff46 	bl	80021b8 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e17a      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d03a      	beq.n	80033c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe ff2a 	bl	80021b8 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003368:	f7fe ff26 	bl	80021b8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e15a      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003386:	2001      	movs	r0, #1
 8003388:	f000 facc 	bl	8003924 <RCC_Delay>
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCC_OscConfig+0x274>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fe ff10 	bl	80021b8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339a:	e00f      	b.n	80033bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe ff0c 	bl	80021b8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d908      	bls.n	80033bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e140      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	42420000 	.word	0x42420000
 80033b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033bc:	4b9e      	ldr	r3, [pc, #632]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e9      	bne.n	800339c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a6 	beq.w	8003522 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033da:	4b97      	ldr	r3, [pc, #604]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	4b94      	ldr	r3, [pc, #592]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a93      	ldr	r2, [pc, #588]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]
 80033f2:	4b91      	ldr	r3, [pc, #580]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b8e      	ldr	r3, [pc, #568]	; (800363c <HAL_RCC_OscConfig+0x4f8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d118      	bne.n	8003440 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800340e:	4b8b      	ldr	r3, [pc, #556]	; (800363c <HAL_RCC_OscConfig+0x4f8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a8a      	ldr	r2, [pc, #552]	; (800363c <HAL_RCC_OscConfig+0x4f8>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341a:	f7fe fecd 	bl	80021b8 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003422:	f7fe fec9 	bl	80021b8 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b64      	cmp	r3, #100	; 0x64
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e0fd      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003434:	4b81      	ldr	r3, [pc, #516]	; (800363c <HAL_RCC_OscConfig+0x4f8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x312>
 8003448:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a7a      	ldr	r2, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	e02d      	b.n	80034b2 <HAL_RCC_OscConfig+0x36e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x334>
 800345e:	4b76      	ldr	r3, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a75      	ldr	r2, [pc, #468]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	6213      	str	r3, [r2, #32]
 800346a:	4b73      	ldr	r3, [pc, #460]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	4a72      	ldr	r2, [pc, #456]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	f023 0304 	bic.w	r3, r3, #4
 8003474:	6213      	str	r3, [r2, #32]
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x36e>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x356>
 8003480:	4b6d      	ldr	r3, [pc, #436]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	4a6c      	ldr	r2, [pc, #432]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6213      	str	r3, [r2, #32]
 800348c:	4b6a      	ldr	r3, [pc, #424]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4a69      	ldr	r2, [pc, #420]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6213      	str	r3, [r2, #32]
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x36e>
 800349a:	4b67      	ldr	r3, [pc, #412]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4a66      	ldr	r2, [pc, #408]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6213      	str	r3, [r2, #32]
 80034a6:	4b64      	ldr	r3, [pc, #400]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a63      	ldr	r2, [pc, #396]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fe7d 	bl	80021b8 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe fe79 	bl	80021b8 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0ab      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x37e>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fe67 	bl	80021b8 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fe63 	bl	80021b8 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e095      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b48      	ldr	r3, [pc, #288]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4a47      	ldr	r2, [pc, #284]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8081 	beq.w	800362e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800352c:	4b42      	ldr	r3, [pc, #264]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d061      	beq.n	80035fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d146      	bne.n	80035ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_RCC_OscConfig+0x4fc>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fe37 	bl	80021b8 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fe33 	bl	80021b8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e067      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003560:	4b35      	ldr	r3, [pc, #212]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d108      	bne.n	8003588 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003576:	4b30      	ldr	r3, [pc, #192]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	492d      	ldr	r1, [pc, #180]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003588:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a19      	ldr	r1, [r3, #32]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	430b      	orrs	r3, r1
 800359a:	4927      	ldr	r1, [pc, #156]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a0:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x4fc>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a6:	f7fe fe07 	bl	80021b8 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fe fe03 	bl	80021b8 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e037      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x46a>
 80035cc:	e02f      	b.n	800362e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <HAL_RCC_OscConfig+0x4fc>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fdf0 	bl	80021b8 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fe fdec 	bl	80021b8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e020      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x498>
 80035fa:	e018      	b.n	800362e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e013      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	42420060 	.word	0x42420060

08003644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0d0      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d910      	bls.n	8003688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b67      	ldr	r3, [pc, #412]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0207 	bic.w	r2, r3, #7
 800366e:	4965      	ldr	r1, [pc, #404]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b8      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d020      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036a0:	4b59      	ldr	r3, [pc, #356]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a58      	ldr	r2, [pc, #352]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b8:	4b53      	ldr	r3, [pc, #332]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4a52      	ldr	r2, [pc, #328]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036c4:	4b50      	ldr	r3, [pc, #320]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	494d      	ldr	r1, [pc, #308]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d040      	beq.n	8003764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b47      	ldr	r3, [pc, #284]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d115      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e07f      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	4b41      	ldr	r3, [pc, #260]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e073      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003712:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e06b      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003722:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4936      	ldr	r1, [pc, #216]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003734:	f7fe fd40 	bl	80021b8 <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fe fd3c 	bl	80021b8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e053      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	4b2d      	ldr	r3, [pc, #180]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 020c 	and.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	d1eb      	bne.n	800373c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d210      	bcs.n	8003794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 0207 	bic.w	r2, r3, #7
 800377a:	4922      	ldr	r1, [pc, #136]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e032      	b.n	80037fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4916      	ldr	r1, [pc, #88]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037be:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	490e      	ldr	r1, [pc, #56]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037d2:	f000 f821 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037d6:	4602      	mov	r2, r0
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	490a      	ldr	r1, [pc, #40]	; (800380c <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	5ccb      	ldrb	r3, [r1, r3]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a09      	ldr	r2, [pc, #36]	; (8003810 <HAL_RCC_ClockConfig+0x1cc>)
 80037ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1d0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fc9e 	bl	8002134 <HAL_InitTick>

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40022000 	.word	0x40022000
 8003808:	40021000 	.word	0x40021000
 800380c:	08005090 	.word	0x08005090
 8003810:	20000080 	.word	0x20000080
 8003814:	20000084 	.word	0x20000084

08003818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003832:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b04      	cmp	r3, #4
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x30>
 8003842:	2b08      	cmp	r3, #8
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x36>
 8003846:	e027      	b.n	8003898 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003848:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800384a:	613b      	str	r3, [r7, #16]
      break;
 800384c:	e027      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0c9b      	lsrs	r3, r3, #18
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d010      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	0c5b      	lsrs	r3, r3, #17
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003872:	5cd3      	ldrb	r3, [r2, r3]
 8003874:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800387a:	fb02 f203 	mul.w	r2, r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e004      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800388c:	fb02 f303 	mul.w	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	613b      	str	r3, [r7, #16]
      break;
 8003896:	e002      	b.n	800389e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800389a:	613b      	str	r3, [r7, #16]
      break;
 800389c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389e:	693b      	ldr	r3, [r7, #16]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	007a1200 	.word	0x007a1200
 80038b4:	080050a8 	.word	0x080050a8
 80038b8:	080050b8 	.word	0x080050b8
 80038bc:	003d0900 	.word	0x003d0900

080038c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000080 	.word	0x20000080

080038d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d8:	f7ff fff2 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4903      	ldr	r1, [pc, #12]	; (80038f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	080050a0 	.word	0x080050a0

080038fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003900:	f7ff ffde 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	0adb      	lsrs	r3, r3, #11
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000
 8003920:	080050a0 	.word	0x080050a0

08003924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <RCC_Delay+0x34>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <RCC_Delay+0x38>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a5b      	lsrs	r3, r3, #9
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003940:	bf00      	nop
  }
  while (Delay --);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1e5a      	subs	r2, r3, #1
 8003946:	60fa      	str	r2, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f9      	bne.n	8003940 <RCC_Delay+0x1c>
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	20000080 	.word	0x20000080
 800395c:	10624dd3 	.word	0x10624dd3

08003960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e041      	b.n	80039f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7fe fac0 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f000 fa5c 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
	...

08003a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d001      	beq.n	8003a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e03a      	b.n	8003a8e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_TIM_Base_Start_IT+0x98>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x58>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a42:	d009      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x58>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_TIM_Base_Start_IT+0x9c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0x58>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d010      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7a:	e007      	b.n	8003a8c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800

08003aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d020      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01b      	beq.n	8003b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0202 	mvn.w	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f998 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f98b 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f99a 	bl	8003e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d020      	beq.n	8003b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01b      	beq.n	8003b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0204 	mvn.w	r2, #4
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f972 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f965 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f974 	bl	8003e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d020      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01b      	beq.n	8003ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0208 	mvn.w	r2, #8
 8003b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2204      	movs	r2, #4
 8003b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f94c 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f93f 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f94e 	bl	8003e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d020      	beq.n	8003bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01b      	beq.n	8003bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f926 	bl	8003e24 <HAL_TIM_IC_CaptureCallback>
 8003bd8:	e005      	b.n	8003be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f919 	bl	8003e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f928 	bl	8003e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00c      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0201 	mvn.w	r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fee4 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00c      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa7f 	bl	8004132 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8f8 	bl	8003e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0220 	mvn.w	r2, #32
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa52 	bl	8004120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e0b4      	b.n	8003e0a <HAL_TIM_ConfigClockSource+0x186>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd8:	d03e      	beq.n	8003d58 <HAL_TIM_ConfigClockSource+0xd4>
 8003cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cde:	f200 8087 	bhi.w	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce6:	f000 8086 	beq.w	8003df6 <HAL_TIM_ConfigClockSource+0x172>
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	d87f      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf0:	2b70      	cmp	r3, #112	; 0x70
 8003cf2:	d01a      	beq.n	8003d2a <HAL_TIM_ConfigClockSource+0xa6>
 8003cf4:	2b70      	cmp	r3, #112	; 0x70
 8003cf6:	d87b      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf8:	2b60      	cmp	r3, #96	; 0x60
 8003cfa:	d050      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x11a>
 8003cfc:	2b60      	cmp	r3, #96	; 0x60
 8003cfe:	d877      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b50      	cmp	r3, #80	; 0x50
 8003d02:	d03c      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0xfa>
 8003d04:	2b50      	cmp	r3, #80	; 0x50
 8003d06:	d873      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d058      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x13a>
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d86f      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	d064      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x15a>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d86b      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d060      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x15a>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d867      	bhi.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d05c      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b10      	cmp	r3, #16
 8003d26:	d05a      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	e062      	b.n	8003df0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6899      	ldr	r1, [r3, #8]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f000 f974 	bl	8004026 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	609a      	str	r2, [r3, #8]
      break;
 8003d56:	e04f      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f000 f95d 	bl	8004026 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7a:	609a      	str	r2, [r3, #8]
      break;
 8003d7c:	e03c      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f000 f8d4 	bl	8003f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2150      	movs	r1, #80	; 0x50
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f92b 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e02c      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f000 f8f2 	bl	8003f94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2160      	movs	r1, #96	; 0x60
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f91b 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e01c      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f000 f8b4 	bl	8003f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2140      	movs	r1, #64	; 0x40
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f90b 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003ddc:	e00c      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f000 f902 	bl	8003ff2 <TIM_ITRx_SetConfig>
      break;
 8003dee:	e003      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	e000      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bc80      	pop	{r7}
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr
	...

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0xd0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00b      	beq.n	8003e8c <TIM_Base_SetConfig+0x30>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7a:	d007      	beq.n	8003e8c <TIM_Base_SetConfig+0x30>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0x30>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0xd8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d108      	bne.n	8003e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <TIM_Base_SetConfig+0xd0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_Base_SetConfig+0x62>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eac:	d007      	beq.n	8003ebe <TIM_Base_SetConfig+0x62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <TIM_Base_SetConfig+0xd4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_Base_SetConfig+0x62>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1e      	ldr	r2, [pc, #120]	; (8003f34 <TIM_Base_SetConfig+0xd8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <TIM_Base_SetConfig+0xd0>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d103      	bne.n	8003f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	611a      	str	r2, [r3, #16]
  }
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40012c00 	.word	0x40012c00
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800

08003f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0201 	bic.w	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 030a 	bic.w	r3, r3, #10
 8003f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	bf00      	nop
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0210 	bic.w	r2, r3, #16
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	031b      	lsls	r3, r3, #12
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	621a      	str	r2, [r3, #32]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr

08003ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	f043 0307 	orr.w	r3, r3, #7
 8004014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	609a      	str	r2, [r3, #8]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004040:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	021a      	lsls	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	431a      	orrs	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	609a      	str	r2, [r3, #8]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004078:	2302      	movs	r3, #2
 800407a:	e046      	b.n	800410a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d009      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a10      	ldr	r2, [pc, #64]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800

08004120 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e042      	b.n	80041dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd fef2 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	; 0x24
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004186:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f971 	bl	8004470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800419c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695a      	ldr	r2, [r3, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	d175      	bne.n	80042f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_UART_Transmit+0x2c>
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e06e      	b.n	80042f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2221      	movs	r2, #33	; 0x21
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004222:	f7fd ffc9 	bl	80021b8 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	88fa      	ldrh	r2, [r7, #6]
 8004232:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800423c:	d108      	bne.n	8004250 <HAL_UART_Transmit+0x6c>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	e003      	b.n	8004258 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004258:	e02e      	b.n	80042b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2200      	movs	r2, #0
 8004262:	2180      	movs	r1, #128	; 0x80
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f848 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e03a      	b.n	80042f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10b      	bne.n	800429a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3302      	adds	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e007      	b.n	80042aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	3301      	adds	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1cb      	bne.n	800425a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2200      	movs	r2, #0
 80042ca:	2140      	movs	r1, #64	; 0x40
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f814 	bl	80042fa <UART_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e006      	b.n	80042f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e000      	b.n	80042f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042f0:	2302      	movs	r3, #2
  }
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	e03b      	b.n	8004384 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d037      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fd ff50 	bl	80021b8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	6a3a      	ldr	r2, [r7, #32]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <UART_WaitOnFlagUntilTimeout+0x30>
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e03a      	b.n	80043a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d023      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x8a>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d020      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d01d      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d116      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f81d 	bl	80043ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2208      	movs	r2, #8
 8004376:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e00f      	b.n	80043a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d0b4      	beq.n	800430c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b095      	sub	sp, #84	; 0x54
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d4:	643a      	str	r2, [r7, #64]	; 0x40
 80043d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3314      	adds	r3, #20
 80043ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004408:	62fa      	str	r2, [r7, #44]	; 0x2c
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	2b01      	cmp	r3, #1
 8004422:	d119      	bne.n	8004458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	60bb      	str	r3, [r7, #8]
   return(result);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0310 	bic.w	r3, r3, #16
 800443a:	647b      	str	r3, [r7, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004444:	61ba      	str	r2, [r7, #24]
 8004446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6979      	ldr	r1, [r7, #20]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	613b      	str	r3, [r7, #16]
   return(result);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004466:	bf00      	nop
 8004468:	3754      	adds	r7, #84	; 0x54
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044aa:	f023 030c 	bic.w	r3, r3, #12
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <UART_SetConfig+0x114>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7ff fa10 	bl	80038fc <HAL_RCC_GetPCLK2Freq>
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	e002      	b.n	80044e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044e0:	f7ff f9f8 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 80044e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009a      	lsls	r2, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	4a22      	ldr	r2, [pc, #136]	; (8004588 <UART_SetConfig+0x118>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	0119      	lsls	r1, r3, #4
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	009a      	lsls	r2, r3, #2
 8004510:	441a      	add	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fbb2 f2f3 	udiv	r2, r2, r3
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <UART_SetConfig+0x118>)
 800451e:	fba3 0302 	umull	r0, r3, r3, r2
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2064      	movs	r0, #100	; 0x64
 8004526:	fb00 f303 	mul.w	r3, r0, r3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	3332      	adds	r3, #50	; 0x32
 8004530:	4a15      	ldr	r2, [pc, #84]	; (8004588 <UART_SetConfig+0x118>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	4419      	add	r1, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009a      	lsls	r2, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	fbb2 f2f3 	udiv	r2, r2, r3
 8004554:	4b0c      	ldr	r3, [pc, #48]	; (8004588 <UART_SetConfig+0x118>)
 8004556:	fba3 0302 	umull	r0, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2064      	movs	r0, #100	; 0x64
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	3332      	adds	r3, #50	; 0x32
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <UART_SetConfig+0x118>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	f003 020f 	and.w	r2, r3, #15
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	440a      	add	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40013800 	.word	0x40013800
 8004588:	51eb851f 	.word	0x51eb851f

0800458c <__errno>:
 800458c:	4b01      	ldr	r3, [pc, #4]	; (8004594 <__errno+0x8>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000008c 	.word	0x2000008c

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	2600      	movs	r6, #0
 800459c:	4d0c      	ldr	r5, [pc, #48]	; (80045d0 <__libc_init_array+0x38>)
 800459e:	4c0d      	ldr	r4, [pc, #52]	; (80045d4 <__libc_init_array+0x3c>)
 80045a0:	1b64      	subs	r4, r4, r5
 80045a2:	10a4      	asrs	r4, r4, #2
 80045a4:	42a6      	cmp	r6, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	f000 fc90 	bl	8004ecc <_init>
 80045ac:	2600      	movs	r6, #0
 80045ae:	4d0a      	ldr	r5, [pc, #40]	; (80045d8 <__libc_init_array+0x40>)
 80045b0:	4c0a      	ldr	r4, [pc, #40]	; (80045dc <__libc_init_array+0x44>)
 80045b2:	1b64      	subs	r4, r4, r5
 80045b4:	10a4      	asrs	r4, r4, #2
 80045b6:	42a6      	cmp	r6, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c0:	4798      	blx	r3
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ca:	4798      	blx	r3
 80045cc:	3601      	adds	r6, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	080050f0 	.word	0x080050f0
 80045d4:	080050f0 	.word	0x080050f0
 80045d8:	080050f0 	.word	0x080050f0
 80045dc:	080050f4 	.word	0x080050f4

080045e0 <memset>:
 80045e0:	4603      	mov	r3, r0
 80045e2:	4402      	add	r2, r0
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d100      	bne.n	80045ea <memset+0xa>
 80045e8:	4770      	bx	lr
 80045ea:	f803 1b01 	strb.w	r1, [r3], #1
 80045ee:	e7f9      	b.n	80045e4 <memset+0x4>

080045f0 <sniprintf>:
 80045f0:	b40c      	push	{r2, r3}
 80045f2:	b530      	push	{r4, r5, lr}
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <sniprintf+0x64>)
 80045f6:	1e0c      	subs	r4, r1, #0
 80045f8:	681d      	ldr	r5, [r3, #0]
 80045fa:	b09d      	sub	sp, #116	; 0x74
 80045fc:	da08      	bge.n	8004610 <sniprintf+0x20>
 80045fe:	238b      	movs	r3, #139	; 0x8b
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	b01d      	add	sp, #116	; 0x74
 8004608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800460c:	b002      	add	sp, #8
 800460e:	4770      	bx	lr
 8004610:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004614:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004618:	bf0c      	ite	eq
 800461a:	4623      	moveq	r3, r4
 800461c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004620:	9304      	str	r3, [sp, #16]
 8004622:	9307      	str	r3, [sp, #28]
 8004624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004628:	9002      	str	r0, [sp, #8]
 800462a:	9006      	str	r0, [sp, #24]
 800462c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004630:	4628      	mov	r0, r5
 8004632:	ab21      	add	r3, sp, #132	; 0x84
 8004634:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004636:	a902      	add	r1, sp, #8
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	f000 f889 	bl	8004750 <_svfiprintf_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	bfbc      	itt	lt
 8004642:	238b      	movlt	r3, #139	; 0x8b
 8004644:	602b      	strlt	r3, [r5, #0]
 8004646:	2c00      	cmp	r4, #0
 8004648:	d0dd      	beq.n	8004606 <sniprintf+0x16>
 800464a:	2200      	movs	r2, #0
 800464c:	9b02      	ldr	r3, [sp, #8]
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e7d9      	b.n	8004606 <sniprintf+0x16>
 8004652:	bf00      	nop
 8004654:	2000008c 	.word	0x2000008c

08004658 <siprintf>:
 8004658:	b40e      	push	{r1, r2, r3}
 800465a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800465e:	b500      	push	{lr}
 8004660:	b09c      	sub	sp, #112	; 0x70
 8004662:	ab1d      	add	r3, sp, #116	; 0x74
 8004664:	9002      	str	r0, [sp, #8]
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	9107      	str	r1, [sp, #28]
 800466a:	9104      	str	r1, [sp, #16]
 800466c:	4808      	ldr	r0, [pc, #32]	; (8004690 <siprintf+0x38>)
 800466e:	4909      	ldr	r1, [pc, #36]	; (8004694 <siprintf+0x3c>)
 8004670:	f853 2b04 	ldr.w	r2, [r3], #4
 8004674:	9105      	str	r1, [sp, #20]
 8004676:	6800      	ldr	r0, [r0, #0]
 8004678:	a902      	add	r1, sp, #8
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	f000 f868 	bl	8004750 <_svfiprintf_r>
 8004680:	2200      	movs	r2, #0
 8004682:	9b02      	ldr	r3, [sp, #8]
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	b01c      	add	sp, #112	; 0x70
 8004688:	f85d eb04 	ldr.w	lr, [sp], #4
 800468c:	b003      	add	sp, #12
 800468e:	4770      	bx	lr
 8004690:	2000008c 	.word	0x2000008c
 8004694:	ffff0208 	.word	0xffff0208

08004698 <__ssputs_r>:
 8004698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469c:	688e      	ldr	r6, [r1, #8]
 800469e:	4682      	mov	sl, r0
 80046a0:	429e      	cmp	r6, r3
 80046a2:	460c      	mov	r4, r1
 80046a4:	4690      	mov	r8, r2
 80046a6:	461f      	mov	r7, r3
 80046a8:	d838      	bhi.n	800471c <__ssputs_r+0x84>
 80046aa:	898a      	ldrh	r2, [r1, #12]
 80046ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046b0:	d032      	beq.n	8004718 <__ssputs_r+0x80>
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	6909      	ldr	r1, [r1, #16]
 80046b6:	3301      	adds	r3, #1
 80046b8:	eba5 0901 	sub.w	r9, r5, r1
 80046bc:	6965      	ldr	r5, [r4, #20]
 80046be:	444b      	add	r3, r9
 80046c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046c8:	106d      	asrs	r5, r5, #1
 80046ca:	429d      	cmp	r5, r3
 80046cc:	bf38      	it	cc
 80046ce:	461d      	movcc	r5, r3
 80046d0:	0553      	lsls	r3, r2, #21
 80046d2:	d531      	bpl.n	8004738 <__ssputs_r+0xa0>
 80046d4:	4629      	mov	r1, r5
 80046d6:	f000 fb53 	bl	8004d80 <_malloc_r>
 80046da:	4606      	mov	r6, r0
 80046dc:	b950      	cbnz	r0, 80046f4 <__ssputs_r+0x5c>
 80046de:	230c      	movs	r3, #12
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	f8ca 3000 	str.w	r3, [sl]
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	464a      	mov	r2, r9
 80046f6:	6921      	ldr	r1, [r4, #16]
 80046f8:	f000 face 	bl	8004c98 <memcpy>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	6126      	str	r6, [r4, #16]
 800470a:	444e      	add	r6, r9
 800470c:	6026      	str	r6, [r4, #0]
 800470e:	463e      	mov	r6, r7
 8004710:	6165      	str	r5, [r4, #20]
 8004712:	eba5 0509 	sub.w	r5, r5, r9
 8004716:	60a5      	str	r5, [r4, #8]
 8004718:	42be      	cmp	r6, r7
 800471a:	d900      	bls.n	800471e <__ssputs_r+0x86>
 800471c:	463e      	mov	r6, r7
 800471e:	4632      	mov	r2, r6
 8004720:	4641      	mov	r1, r8
 8004722:	6820      	ldr	r0, [r4, #0]
 8004724:	f000 fac6 	bl	8004cb4 <memmove>
 8004728:	68a3      	ldr	r3, [r4, #8]
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	1b9b      	subs	r3, r3, r6
 800472e:	4432      	add	r2, r6
 8004730:	2000      	movs	r0, #0
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	6022      	str	r2, [r4, #0]
 8004736:	e7db      	b.n	80046f0 <__ssputs_r+0x58>
 8004738:	462a      	mov	r2, r5
 800473a:	f000 fb7b 	bl	8004e34 <_realloc_r>
 800473e:	4606      	mov	r6, r0
 8004740:	2800      	cmp	r0, #0
 8004742:	d1e1      	bne.n	8004708 <__ssputs_r+0x70>
 8004744:	4650      	mov	r0, sl
 8004746:	6921      	ldr	r1, [r4, #16]
 8004748:	f000 face 	bl	8004ce8 <_free_r>
 800474c:	e7c7      	b.n	80046de <__ssputs_r+0x46>
	...

08004750 <_svfiprintf_r>:
 8004750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004754:	4698      	mov	r8, r3
 8004756:	898b      	ldrh	r3, [r1, #12]
 8004758:	4607      	mov	r7, r0
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	460d      	mov	r5, r1
 800475e:	4614      	mov	r4, r2
 8004760:	b09d      	sub	sp, #116	; 0x74
 8004762:	d50e      	bpl.n	8004782 <_svfiprintf_r+0x32>
 8004764:	690b      	ldr	r3, [r1, #16]
 8004766:	b963      	cbnz	r3, 8004782 <_svfiprintf_r+0x32>
 8004768:	2140      	movs	r1, #64	; 0x40
 800476a:	f000 fb09 	bl	8004d80 <_malloc_r>
 800476e:	6028      	str	r0, [r5, #0]
 8004770:	6128      	str	r0, [r5, #16]
 8004772:	b920      	cbnz	r0, 800477e <_svfiprintf_r+0x2e>
 8004774:	230c      	movs	r3, #12
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	e0d1      	b.n	8004922 <_svfiprintf_r+0x1d2>
 800477e:	2340      	movs	r3, #64	; 0x40
 8004780:	616b      	str	r3, [r5, #20]
 8004782:	2300      	movs	r3, #0
 8004784:	9309      	str	r3, [sp, #36]	; 0x24
 8004786:	2320      	movs	r3, #32
 8004788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800478c:	2330      	movs	r3, #48	; 0x30
 800478e:	f04f 0901 	mov.w	r9, #1
 8004792:	f8cd 800c 	str.w	r8, [sp, #12]
 8004796:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800493c <_svfiprintf_r+0x1ec>
 800479a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800479e:	4623      	mov	r3, r4
 80047a0:	469a      	mov	sl, r3
 80047a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047a6:	b10a      	cbz	r2, 80047ac <_svfiprintf_r+0x5c>
 80047a8:	2a25      	cmp	r2, #37	; 0x25
 80047aa:	d1f9      	bne.n	80047a0 <_svfiprintf_r+0x50>
 80047ac:	ebba 0b04 	subs.w	fp, sl, r4
 80047b0:	d00b      	beq.n	80047ca <_svfiprintf_r+0x7a>
 80047b2:	465b      	mov	r3, fp
 80047b4:	4622      	mov	r2, r4
 80047b6:	4629      	mov	r1, r5
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7ff ff6d 	bl	8004698 <__ssputs_r>
 80047be:	3001      	adds	r0, #1
 80047c0:	f000 80aa 	beq.w	8004918 <_svfiprintf_r+0x1c8>
 80047c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c6:	445a      	add	r2, fp
 80047c8:	9209      	str	r2, [sp, #36]	; 0x24
 80047ca:	f89a 3000 	ldrb.w	r3, [sl]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80a2 	beq.w	8004918 <_svfiprintf_r+0x1c8>
 80047d4:	2300      	movs	r3, #0
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047de:	f10a 0a01 	add.w	sl, sl, #1
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	9307      	str	r3, [sp, #28]
 80047e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047ea:	931a      	str	r3, [sp, #104]	; 0x68
 80047ec:	4654      	mov	r4, sl
 80047ee:	2205      	movs	r2, #5
 80047f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f4:	4851      	ldr	r0, [pc, #324]	; (800493c <_svfiprintf_r+0x1ec>)
 80047f6:	f000 fa41 	bl	8004c7c <memchr>
 80047fa:	9a04      	ldr	r2, [sp, #16]
 80047fc:	b9d8      	cbnz	r0, 8004836 <_svfiprintf_r+0xe6>
 80047fe:	06d0      	lsls	r0, r2, #27
 8004800:	bf44      	itt	mi
 8004802:	2320      	movmi	r3, #32
 8004804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004808:	0711      	lsls	r1, r2, #28
 800480a:	bf44      	itt	mi
 800480c:	232b      	movmi	r3, #43	; 0x2b
 800480e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004812:	f89a 3000 	ldrb.w	r3, [sl]
 8004816:	2b2a      	cmp	r3, #42	; 0x2a
 8004818:	d015      	beq.n	8004846 <_svfiprintf_r+0xf6>
 800481a:	4654      	mov	r4, sl
 800481c:	2000      	movs	r0, #0
 800481e:	f04f 0c0a 	mov.w	ip, #10
 8004822:	9a07      	ldr	r2, [sp, #28]
 8004824:	4621      	mov	r1, r4
 8004826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800482a:	3b30      	subs	r3, #48	; 0x30
 800482c:	2b09      	cmp	r3, #9
 800482e:	d94e      	bls.n	80048ce <_svfiprintf_r+0x17e>
 8004830:	b1b0      	cbz	r0, 8004860 <_svfiprintf_r+0x110>
 8004832:	9207      	str	r2, [sp, #28]
 8004834:	e014      	b.n	8004860 <_svfiprintf_r+0x110>
 8004836:	eba0 0308 	sub.w	r3, r0, r8
 800483a:	fa09 f303 	lsl.w	r3, r9, r3
 800483e:	4313      	orrs	r3, r2
 8004840:	46a2      	mov	sl, r4
 8004842:	9304      	str	r3, [sp, #16]
 8004844:	e7d2      	b.n	80047ec <_svfiprintf_r+0x9c>
 8004846:	9b03      	ldr	r3, [sp, #12]
 8004848:	1d19      	adds	r1, r3, #4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	9103      	str	r1, [sp, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	bfbb      	ittet	lt
 8004852:	425b      	neglt	r3, r3
 8004854:	f042 0202 	orrlt.w	r2, r2, #2
 8004858:	9307      	strge	r3, [sp, #28]
 800485a:	9307      	strlt	r3, [sp, #28]
 800485c:	bfb8      	it	lt
 800485e:	9204      	strlt	r2, [sp, #16]
 8004860:	7823      	ldrb	r3, [r4, #0]
 8004862:	2b2e      	cmp	r3, #46	; 0x2e
 8004864:	d10c      	bne.n	8004880 <_svfiprintf_r+0x130>
 8004866:	7863      	ldrb	r3, [r4, #1]
 8004868:	2b2a      	cmp	r3, #42	; 0x2a
 800486a:	d135      	bne.n	80048d8 <_svfiprintf_r+0x188>
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	3402      	adds	r4, #2
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	9203      	str	r2, [sp, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfb8      	it	lt
 800487a:	f04f 33ff 	movlt.w	r3, #4294967295
 800487e:	9305      	str	r3, [sp, #20]
 8004880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800494c <_svfiprintf_r+0x1fc>
 8004884:	2203      	movs	r2, #3
 8004886:	4650      	mov	r0, sl
 8004888:	7821      	ldrb	r1, [r4, #0]
 800488a:	f000 f9f7 	bl	8004c7c <memchr>
 800488e:	b140      	cbz	r0, 80048a2 <_svfiprintf_r+0x152>
 8004890:	2340      	movs	r3, #64	; 0x40
 8004892:	eba0 000a 	sub.w	r0, r0, sl
 8004896:	fa03 f000 	lsl.w	r0, r3, r0
 800489a:	9b04      	ldr	r3, [sp, #16]
 800489c:	3401      	adds	r4, #1
 800489e:	4303      	orrs	r3, r0
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a6:	2206      	movs	r2, #6
 80048a8:	4825      	ldr	r0, [pc, #148]	; (8004940 <_svfiprintf_r+0x1f0>)
 80048aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ae:	f000 f9e5 	bl	8004c7c <memchr>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d038      	beq.n	8004928 <_svfiprintf_r+0x1d8>
 80048b6:	4b23      	ldr	r3, [pc, #140]	; (8004944 <_svfiprintf_r+0x1f4>)
 80048b8:	bb1b      	cbnz	r3, 8004902 <_svfiprintf_r+0x1b2>
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	3307      	adds	r3, #7
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	3308      	adds	r3, #8
 80048c4:	9303      	str	r3, [sp, #12]
 80048c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c8:	4433      	add	r3, r6
 80048ca:	9309      	str	r3, [sp, #36]	; 0x24
 80048cc:	e767      	b.n	800479e <_svfiprintf_r+0x4e>
 80048ce:	460c      	mov	r4, r1
 80048d0:	2001      	movs	r0, #1
 80048d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d6:	e7a5      	b.n	8004824 <_svfiprintf_r+0xd4>
 80048d8:	2300      	movs	r3, #0
 80048da:	f04f 0c0a 	mov.w	ip, #10
 80048de:	4619      	mov	r1, r3
 80048e0:	3401      	adds	r4, #1
 80048e2:	9305      	str	r3, [sp, #20]
 80048e4:	4620      	mov	r0, r4
 80048e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048ea:	3a30      	subs	r2, #48	; 0x30
 80048ec:	2a09      	cmp	r2, #9
 80048ee:	d903      	bls.n	80048f8 <_svfiprintf_r+0x1a8>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0c5      	beq.n	8004880 <_svfiprintf_r+0x130>
 80048f4:	9105      	str	r1, [sp, #20]
 80048f6:	e7c3      	b.n	8004880 <_svfiprintf_r+0x130>
 80048f8:	4604      	mov	r4, r0
 80048fa:	2301      	movs	r3, #1
 80048fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004900:	e7f0      	b.n	80048e4 <_svfiprintf_r+0x194>
 8004902:	ab03      	add	r3, sp, #12
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	462a      	mov	r2, r5
 8004908:	4638      	mov	r0, r7
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <_svfiprintf_r+0x1f8>)
 800490c:	a904      	add	r1, sp, #16
 800490e:	f3af 8000 	nop.w
 8004912:	1c42      	adds	r2, r0, #1
 8004914:	4606      	mov	r6, r0
 8004916:	d1d6      	bne.n	80048c6 <_svfiprintf_r+0x176>
 8004918:	89ab      	ldrh	r3, [r5, #12]
 800491a:	065b      	lsls	r3, r3, #25
 800491c:	f53f af2c 	bmi.w	8004778 <_svfiprintf_r+0x28>
 8004920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004922:	b01d      	add	sp, #116	; 0x74
 8004924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004928:	ab03      	add	r3, sp, #12
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	462a      	mov	r2, r5
 800492e:	4638      	mov	r0, r7
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_svfiprintf_r+0x1f8>)
 8004932:	a904      	add	r1, sp, #16
 8004934:	f000 f87c 	bl	8004a30 <_printf_i>
 8004938:	e7eb      	b.n	8004912 <_svfiprintf_r+0x1c2>
 800493a:	bf00      	nop
 800493c:	080050ba 	.word	0x080050ba
 8004940:	080050c4 	.word	0x080050c4
 8004944:	00000000 	.word	0x00000000
 8004948:	08004699 	.word	0x08004699
 800494c:	080050c0 	.word	0x080050c0

08004950 <_printf_common>:
 8004950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	4616      	mov	r6, r2
 8004956:	4699      	mov	r9, r3
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	4607      	mov	r7, r0
 800495e:	4293      	cmp	r3, r2
 8004960:	bfb8      	it	lt
 8004962:	4613      	movlt	r3, r2
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800496a:	460c      	mov	r4, r1
 800496c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004970:	b10a      	cbz	r2, 8004976 <_printf_common+0x26>
 8004972:	3301      	adds	r3, #1
 8004974:	6033      	str	r3, [r6, #0]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	0699      	lsls	r1, r3, #26
 800497a:	bf42      	ittt	mi
 800497c:	6833      	ldrmi	r3, [r6, #0]
 800497e:	3302      	addmi	r3, #2
 8004980:	6033      	strmi	r3, [r6, #0]
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	f015 0506 	ands.w	r5, r5, #6
 8004988:	d106      	bne.n	8004998 <_printf_common+0x48>
 800498a:	f104 0a19 	add.w	sl, r4, #25
 800498e:	68e3      	ldr	r3, [r4, #12]
 8004990:	6832      	ldr	r2, [r6, #0]
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	42ab      	cmp	r3, r5
 8004996:	dc28      	bgt.n	80049ea <_printf_common+0x9a>
 8004998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800499c:	1e13      	subs	r3, r2, #0
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	0692      	lsls	r2, r2, #26
 80049a6:	d42d      	bmi.n	8004a04 <_printf_common+0xb4>
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049b0:	47c0      	blx	r8
 80049b2:	3001      	adds	r0, #1
 80049b4:	d020      	beq.n	80049f8 <_printf_common+0xa8>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	68e5      	ldr	r5, [r4, #12]
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	2b04      	cmp	r3, #4
 80049c0:	bf18      	it	ne
 80049c2:	2500      	movne	r5, #0
 80049c4:	6832      	ldr	r2, [r6, #0]
 80049c6:	f04f 0600 	mov.w	r6, #0
 80049ca:	68a3      	ldr	r3, [r4, #8]
 80049cc:	bf08      	it	eq
 80049ce:	1aad      	subeq	r5, r5, r2
 80049d0:	6922      	ldr	r2, [r4, #16]
 80049d2:	bf08      	it	eq
 80049d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d8:	4293      	cmp	r3, r2
 80049da:	bfc4      	itt	gt
 80049dc:	1a9b      	subgt	r3, r3, r2
 80049de:	18ed      	addgt	r5, r5, r3
 80049e0:	341a      	adds	r4, #26
 80049e2:	42b5      	cmp	r5, r6
 80049e4:	d11a      	bne.n	8004a1c <_printf_common+0xcc>
 80049e6:	2000      	movs	r0, #0
 80049e8:	e008      	b.n	80049fc <_printf_common+0xac>
 80049ea:	2301      	movs	r3, #1
 80049ec:	4652      	mov	r2, sl
 80049ee:	4649      	mov	r1, r9
 80049f0:	4638      	mov	r0, r7
 80049f2:	47c0      	blx	r8
 80049f4:	3001      	adds	r0, #1
 80049f6:	d103      	bne.n	8004a00 <_printf_common+0xb0>
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295
 80049fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a00:	3501      	adds	r5, #1
 8004a02:	e7c4      	b.n	800498e <_printf_common+0x3e>
 8004a04:	2030      	movs	r0, #48	; 0x30
 8004a06:	18e1      	adds	r1, r4, r3
 8004a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a12:	4422      	add	r2, r4
 8004a14:	3302      	adds	r3, #2
 8004a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a1a:	e7c5      	b.n	80049a8 <_printf_common+0x58>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4622      	mov	r2, r4
 8004a20:	4649      	mov	r1, r9
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c0      	blx	r8
 8004a26:	3001      	adds	r0, #1
 8004a28:	d0e6      	beq.n	80049f8 <_printf_common+0xa8>
 8004a2a:	3601      	adds	r6, #1
 8004a2c:	e7d9      	b.n	80049e2 <_printf_common+0x92>
	...

08004a30 <_printf_i>:
 8004a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a34:	460c      	mov	r4, r1
 8004a36:	7e27      	ldrb	r7, [r4, #24]
 8004a38:	4691      	mov	r9, r2
 8004a3a:	2f78      	cmp	r7, #120	; 0x78
 8004a3c:	4680      	mov	r8, r0
 8004a3e:	469a      	mov	sl, r3
 8004a40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a46:	d807      	bhi.n	8004a58 <_printf_i+0x28>
 8004a48:	2f62      	cmp	r7, #98	; 0x62
 8004a4a:	d80a      	bhi.n	8004a62 <_printf_i+0x32>
 8004a4c:	2f00      	cmp	r7, #0
 8004a4e:	f000 80d9 	beq.w	8004c04 <_printf_i+0x1d4>
 8004a52:	2f58      	cmp	r7, #88	; 0x58
 8004a54:	f000 80a4 	beq.w	8004ba0 <_printf_i+0x170>
 8004a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a60:	e03a      	b.n	8004ad8 <_printf_i+0xa8>
 8004a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a66:	2b15      	cmp	r3, #21
 8004a68:	d8f6      	bhi.n	8004a58 <_printf_i+0x28>
 8004a6a:	a001      	add	r0, pc, #4	; (adr r0, 8004a70 <_printf_i+0x40>)
 8004a6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a70:	08004ac9 	.word	0x08004ac9
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004a59 	.word	0x08004a59
 8004a7c:	08004a59 	.word	0x08004a59
 8004a80:	08004a59 	.word	0x08004a59
 8004a84:	08004a59 	.word	0x08004a59
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004a59 	.word	0x08004a59
 8004a90:	08004a59 	.word	0x08004a59
 8004a94:	08004a59 	.word	0x08004a59
 8004a98:	08004a59 	.word	0x08004a59
 8004a9c:	08004beb 	.word	0x08004beb
 8004aa0:	08004b0d 	.word	0x08004b0d
 8004aa4:	08004bcd 	.word	0x08004bcd
 8004aa8:	08004a59 	.word	0x08004a59
 8004aac:	08004a59 	.word	0x08004a59
 8004ab0:	08004c0d 	.word	0x08004c0d
 8004ab4:	08004a59 	.word	0x08004a59
 8004ab8:	08004b0d 	.word	0x08004b0d
 8004abc:	08004a59 	.word	0x08004a59
 8004ac0:	08004a59 	.word	0x08004a59
 8004ac4:	08004bd5 	.word	0x08004bd5
 8004ac8:	680b      	ldr	r3, [r1, #0]
 8004aca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	600a      	str	r2, [r1, #0]
 8004ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0a4      	b.n	8004c26 <_printf_i+0x1f6>
 8004adc:	6825      	ldr	r5, [r4, #0]
 8004ade:	6808      	ldr	r0, [r1, #0]
 8004ae0:	062e      	lsls	r6, r5, #24
 8004ae2:	f100 0304 	add.w	r3, r0, #4
 8004ae6:	d50a      	bpl.n	8004afe <_printf_i+0xce>
 8004ae8:	6805      	ldr	r5, [r0, #0]
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	da03      	bge.n	8004af8 <_printf_i+0xc8>
 8004af0:	232d      	movs	r3, #45	; 0x2d
 8004af2:	426d      	negs	r5, r5
 8004af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004af8:	230a      	movs	r3, #10
 8004afa:	485e      	ldr	r0, [pc, #376]	; (8004c74 <_printf_i+0x244>)
 8004afc:	e019      	b.n	8004b32 <_printf_i+0x102>
 8004afe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b02:	6805      	ldr	r5, [r0, #0]
 8004b04:	600b      	str	r3, [r1, #0]
 8004b06:	bf18      	it	ne
 8004b08:	b22d      	sxthne	r5, r5
 8004b0a:	e7ef      	b.n	8004aec <_printf_i+0xbc>
 8004b0c:	680b      	ldr	r3, [r1, #0]
 8004b0e:	6825      	ldr	r5, [r4, #0]
 8004b10:	1d18      	adds	r0, r3, #4
 8004b12:	6008      	str	r0, [r1, #0]
 8004b14:	0628      	lsls	r0, r5, #24
 8004b16:	d501      	bpl.n	8004b1c <_printf_i+0xec>
 8004b18:	681d      	ldr	r5, [r3, #0]
 8004b1a:	e002      	b.n	8004b22 <_printf_i+0xf2>
 8004b1c:	0669      	lsls	r1, r5, #25
 8004b1e:	d5fb      	bpl.n	8004b18 <_printf_i+0xe8>
 8004b20:	881d      	ldrh	r5, [r3, #0]
 8004b22:	2f6f      	cmp	r7, #111	; 0x6f
 8004b24:	bf0c      	ite	eq
 8004b26:	2308      	moveq	r3, #8
 8004b28:	230a      	movne	r3, #10
 8004b2a:	4852      	ldr	r0, [pc, #328]	; (8004c74 <_printf_i+0x244>)
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b32:	6866      	ldr	r6, [r4, #4]
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	bfa8      	it	ge
 8004b38:	6821      	ldrge	r1, [r4, #0]
 8004b3a:	60a6      	str	r6, [r4, #8]
 8004b3c:	bfa4      	itt	ge
 8004b3e:	f021 0104 	bicge.w	r1, r1, #4
 8004b42:	6021      	strge	r1, [r4, #0]
 8004b44:	b90d      	cbnz	r5, 8004b4a <_printf_i+0x11a>
 8004b46:	2e00      	cmp	r6, #0
 8004b48:	d04d      	beq.n	8004be6 <_printf_i+0x1b6>
 8004b4a:	4616      	mov	r6, r2
 8004b4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b50:	fb03 5711 	mls	r7, r3, r1, r5
 8004b54:	5dc7      	ldrb	r7, [r0, r7]
 8004b56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b5a:	462f      	mov	r7, r5
 8004b5c:	42bb      	cmp	r3, r7
 8004b5e:	460d      	mov	r5, r1
 8004b60:	d9f4      	bls.n	8004b4c <_printf_i+0x11c>
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d10b      	bne.n	8004b7e <_printf_i+0x14e>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	07df      	lsls	r7, r3, #31
 8004b6a:	d508      	bpl.n	8004b7e <_printf_i+0x14e>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	6861      	ldr	r1, [r4, #4]
 8004b70:	4299      	cmp	r1, r3
 8004b72:	bfde      	ittt	le
 8004b74:	2330      	movle	r3, #48	; 0x30
 8004b76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b7e:	1b92      	subs	r2, r2, r6
 8004b80:	6122      	str	r2, [r4, #16]
 8004b82:	464b      	mov	r3, r9
 8004b84:	4621      	mov	r1, r4
 8004b86:	4640      	mov	r0, r8
 8004b88:	f8cd a000 	str.w	sl, [sp]
 8004b8c:	aa03      	add	r2, sp, #12
 8004b8e:	f7ff fedf 	bl	8004950 <_printf_common>
 8004b92:	3001      	adds	r0, #1
 8004b94:	d14c      	bne.n	8004c30 <_printf_i+0x200>
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	b004      	add	sp, #16
 8004b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba0:	4834      	ldr	r0, [pc, #208]	; (8004c74 <_printf_i+0x244>)
 8004ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ba6:	680e      	ldr	r6, [r1, #0]
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bae:	061f      	lsls	r7, r3, #24
 8004bb0:	600e      	str	r6, [r1, #0]
 8004bb2:	d514      	bpl.n	8004bde <_printf_i+0x1ae>
 8004bb4:	07d9      	lsls	r1, r3, #31
 8004bb6:	bf44      	itt	mi
 8004bb8:	f043 0320 	orrmi.w	r3, r3, #32
 8004bbc:	6023      	strmi	r3, [r4, #0]
 8004bbe:	b91d      	cbnz	r5, 8004bc8 <_printf_i+0x198>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	f023 0320 	bic.w	r3, r3, #32
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	2310      	movs	r3, #16
 8004bca:	e7af      	b.n	8004b2c <_printf_i+0xfc>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	f043 0320 	orr.w	r3, r3, #32
 8004bd2:	6023      	str	r3, [r4, #0]
 8004bd4:	2378      	movs	r3, #120	; 0x78
 8004bd6:	4828      	ldr	r0, [pc, #160]	; (8004c78 <_printf_i+0x248>)
 8004bd8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bdc:	e7e3      	b.n	8004ba6 <_printf_i+0x176>
 8004bde:	065e      	lsls	r6, r3, #25
 8004be0:	bf48      	it	mi
 8004be2:	b2ad      	uxthmi	r5, r5
 8004be4:	e7e6      	b.n	8004bb4 <_printf_i+0x184>
 8004be6:	4616      	mov	r6, r2
 8004be8:	e7bb      	b.n	8004b62 <_printf_i+0x132>
 8004bea:	680b      	ldr	r3, [r1, #0]
 8004bec:	6826      	ldr	r6, [r4, #0]
 8004bee:	1d1d      	adds	r5, r3, #4
 8004bf0:	6960      	ldr	r0, [r4, #20]
 8004bf2:	600d      	str	r5, [r1, #0]
 8004bf4:	0635      	lsls	r5, r6, #24
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	d501      	bpl.n	8004bfe <_printf_i+0x1ce>
 8004bfa:	6018      	str	r0, [r3, #0]
 8004bfc:	e002      	b.n	8004c04 <_printf_i+0x1d4>
 8004bfe:	0671      	lsls	r1, r6, #25
 8004c00:	d5fb      	bpl.n	8004bfa <_printf_i+0x1ca>
 8004c02:	8018      	strh	r0, [r3, #0]
 8004c04:	2300      	movs	r3, #0
 8004c06:	4616      	mov	r6, r2
 8004c08:	6123      	str	r3, [r4, #16]
 8004c0a:	e7ba      	b.n	8004b82 <_printf_i+0x152>
 8004c0c:	680b      	ldr	r3, [r1, #0]
 8004c0e:	1d1a      	adds	r2, r3, #4
 8004c10:	600a      	str	r2, [r1, #0]
 8004c12:	681e      	ldr	r6, [r3, #0]
 8004c14:	2100      	movs	r1, #0
 8004c16:	4630      	mov	r0, r6
 8004c18:	6862      	ldr	r2, [r4, #4]
 8004c1a:	f000 f82f 	bl	8004c7c <memchr>
 8004c1e:	b108      	cbz	r0, 8004c24 <_printf_i+0x1f4>
 8004c20:	1b80      	subs	r0, r0, r6
 8004c22:	6060      	str	r0, [r4, #4]
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	6123      	str	r3, [r4, #16]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2e:	e7a8      	b.n	8004b82 <_printf_i+0x152>
 8004c30:	4632      	mov	r2, r6
 8004c32:	4649      	mov	r1, r9
 8004c34:	4640      	mov	r0, r8
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	47d0      	blx	sl
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d0ab      	beq.n	8004b96 <_printf_i+0x166>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	079b      	lsls	r3, r3, #30
 8004c42:	d413      	bmi.n	8004c6c <_printf_i+0x23c>
 8004c44:	68e0      	ldr	r0, [r4, #12]
 8004c46:	9b03      	ldr	r3, [sp, #12]
 8004c48:	4298      	cmp	r0, r3
 8004c4a:	bfb8      	it	lt
 8004c4c:	4618      	movlt	r0, r3
 8004c4e:	e7a4      	b.n	8004b9a <_printf_i+0x16a>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4632      	mov	r2, r6
 8004c54:	4649      	mov	r1, r9
 8004c56:	4640      	mov	r0, r8
 8004c58:	47d0      	blx	sl
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d09b      	beq.n	8004b96 <_printf_i+0x166>
 8004c5e:	3501      	adds	r5, #1
 8004c60:	68e3      	ldr	r3, [r4, #12]
 8004c62:	9903      	ldr	r1, [sp, #12]
 8004c64:	1a5b      	subs	r3, r3, r1
 8004c66:	42ab      	cmp	r3, r5
 8004c68:	dcf2      	bgt.n	8004c50 <_printf_i+0x220>
 8004c6a:	e7eb      	b.n	8004c44 <_printf_i+0x214>
 8004c6c:	2500      	movs	r5, #0
 8004c6e:	f104 0619 	add.w	r6, r4, #25
 8004c72:	e7f5      	b.n	8004c60 <_printf_i+0x230>
 8004c74:	080050cb 	.word	0x080050cb
 8004c78:	080050dc 	.word	0x080050dc

08004c7c <memchr>:
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	b2c9      	uxtb	r1, r1
 8004c82:	4402      	add	r2, r0
 8004c84:	4293      	cmp	r3, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	d101      	bne.n	8004c8e <memchr+0x12>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e003      	b.n	8004c96 <memchr+0x1a>
 8004c8e:	7804      	ldrb	r4, [r0, #0]
 8004c90:	3301      	adds	r3, #1
 8004c92:	428c      	cmp	r4, r1
 8004c94:	d1f6      	bne.n	8004c84 <memchr+0x8>
 8004c96:	bd10      	pop	{r4, pc}

08004c98 <memcpy>:
 8004c98:	440a      	add	r2, r1
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca0:	d100      	bne.n	8004ca4 <memcpy+0xc>
 8004ca2:	4770      	bx	lr
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb0:	d1f9      	bne.n	8004ca6 <memcpy+0xe>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <memmove>:
 8004cb4:	4288      	cmp	r0, r1
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	eb01 0402 	add.w	r4, r1, r2
 8004cbc:	d902      	bls.n	8004cc4 <memmove+0x10>
 8004cbe:	4284      	cmp	r4, r0
 8004cc0:	4623      	mov	r3, r4
 8004cc2:	d807      	bhi.n	8004cd4 <memmove+0x20>
 8004cc4:	1e43      	subs	r3, r0, #1
 8004cc6:	42a1      	cmp	r1, r4
 8004cc8:	d008      	beq.n	8004cdc <memmove+0x28>
 8004cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cd2:	e7f8      	b.n	8004cc6 <memmove+0x12>
 8004cd4:	4601      	mov	r1, r0
 8004cd6:	4402      	add	r2, r0
 8004cd8:	428a      	cmp	r2, r1
 8004cda:	d100      	bne.n	8004cde <memmove+0x2a>
 8004cdc:	bd10      	pop	{r4, pc}
 8004cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce6:	e7f7      	b.n	8004cd8 <memmove+0x24>

08004ce8 <_free_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4605      	mov	r5, r0
 8004cec:	2900      	cmp	r1, #0
 8004cee:	d043      	beq.n	8004d78 <_free_r+0x90>
 8004cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf4:	1f0c      	subs	r4, r1, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfb8      	it	lt
 8004cfa:	18e4      	addlt	r4, r4, r3
 8004cfc:	f000 f8d0 	bl	8004ea0 <__malloc_lock>
 8004d00:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <_free_r+0x94>)
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	4610      	mov	r0, r2
 8004d06:	b933      	cbnz	r3, 8004d16 <_free_r+0x2e>
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	6014      	str	r4, [r2, #0]
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d12:	f000 b8cb 	b.w	8004eac <__malloc_unlock>
 8004d16:	42a3      	cmp	r3, r4
 8004d18:	d90a      	bls.n	8004d30 <_free_r+0x48>
 8004d1a:	6821      	ldr	r1, [r4, #0]
 8004d1c:	1862      	adds	r2, r4, r1
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	bf01      	itttt	eq
 8004d22:	681a      	ldreq	r2, [r3, #0]
 8004d24:	685b      	ldreq	r3, [r3, #4]
 8004d26:	1852      	addeq	r2, r2, r1
 8004d28:	6022      	streq	r2, [r4, #0]
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	6004      	str	r4, [r0, #0]
 8004d2e:	e7ed      	b.n	8004d0c <_free_r+0x24>
 8004d30:	461a      	mov	r2, r3
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	b10b      	cbz	r3, 8004d3a <_free_r+0x52>
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	d9fa      	bls.n	8004d30 <_free_r+0x48>
 8004d3a:	6811      	ldr	r1, [r2, #0]
 8004d3c:	1850      	adds	r0, r2, r1
 8004d3e:	42a0      	cmp	r0, r4
 8004d40:	d10b      	bne.n	8004d5a <_free_r+0x72>
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	4401      	add	r1, r0
 8004d46:	1850      	adds	r0, r2, r1
 8004d48:	4283      	cmp	r3, r0
 8004d4a:	6011      	str	r1, [r2, #0]
 8004d4c:	d1de      	bne.n	8004d0c <_free_r+0x24>
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4401      	add	r1, r0
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	6053      	str	r3, [r2, #4]
 8004d58:	e7d8      	b.n	8004d0c <_free_r+0x24>
 8004d5a:	d902      	bls.n	8004d62 <_free_r+0x7a>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	602b      	str	r3, [r5, #0]
 8004d60:	e7d4      	b.n	8004d0c <_free_r+0x24>
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	1821      	adds	r1, r4, r0
 8004d66:	428b      	cmp	r3, r1
 8004d68:	bf01      	itttt	eq
 8004d6a:	6819      	ldreq	r1, [r3, #0]
 8004d6c:	685b      	ldreq	r3, [r3, #4]
 8004d6e:	1809      	addeq	r1, r1, r0
 8004d70:	6021      	streq	r1, [r4, #0]
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	6054      	str	r4, [r2, #4]
 8004d76:	e7c9      	b.n	8004d0c <_free_r+0x24>
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000144 	.word	0x20000144

08004d80 <_malloc_r>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	1ccd      	adds	r5, r1, #3
 8004d84:	f025 0503 	bic.w	r5, r5, #3
 8004d88:	3508      	adds	r5, #8
 8004d8a:	2d0c      	cmp	r5, #12
 8004d8c:	bf38      	it	cc
 8004d8e:	250c      	movcc	r5, #12
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	4606      	mov	r6, r0
 8004d94:	db01      	blt.n	8004d9a <_malloc_r+0x1a>
 8004d96:	42a9      	cmp	r1, r5
 8004d98:	d903      	bls.n	8004da2 <_malloc_r+0x22>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	6033      	str	r3, [r6, #0]
 8004d9e:	2000      	movs	r0, #0
 8004da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da2:	f000 f87d 	bl	8004ea0 <__malloc_lock>
 8004da6:	4921      	ldr	r1, [pc, #132]	; (8004e2c <_malloc_r+0xac>)
 8004da8:	680a      	ldr	r2, [r1, #0]
 8004daa:	4614      	mov	r4, r2
 8004dac:	b99c      	cbnz	r4, 8004dd6 <_malloc_r+0x56>
 8004dae:	4f20      	ldr	r7, [pc, #128]	; (8004e30 <_malloc_r+0xb0>)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	b923      	cbnz	r3, 8004dbe <_malloc_r+0x3e>
 8004db4:	4621      	mov	r1, r4
 8004db6:	4630      	mov	r0, r6
 8004db8:	f000 f862 	bl	8004e80 <_sbrk_r>
 8004dbc:	6038      	str	r0, [r7, #0]
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f85d 	bl	8004e80 <_sbrk_r>
 8004dc6:	1c43      	adds	r3, r0, #1
 8004dc8:	d123      	bne.n	8004e12 <_malloc_r+0x92>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	4630      	mov	r0, r6
 8004dce:	6033      	str	r3, [r6, #0]
 8004dd0:	f000 f86c 	bl	8004eac <__malloc_unlock>
 8004dd4:	e7e3      	b.n	8004d9e <_malloc_r+0x1e>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	1b5b      	subs	r3, r3, r5
 8004dda:	d417      	bmi.n	8004e0c <_malloc_r+0x8c>
 8004ddc:	2b0b      	cmp	r3, #11
 8004dde:	d903      	bls.n	8004de8 <_malloc_r+0x68>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	441c      	add	r4, r3
 8004de4:	6025      	str	r5, [r4, #0]
 8004de6:	e004      	b.n	8004df2 <_malloc_r+0x72>
 8004de8:	6863      	ldr	r3, [r4, #4]
 8004dea:	42a2      	cmp	r2, r4
 8004dec:	bf0c      	ite	eq
 8004dee:	600b      	streq	r3, [r1, #0]
 8004df0:	6053      	strne	r3, [r2, #4]
 8004df2:	4630      	mov	r0, r6
 8004df4:	f000 f85a 	bl	8004eac <__malloc_unlock>
 8004df8:	f104 000b 	add.w	r0, r4, #11
 8004dfc:	1d23      	adds	r3, r4, #4
 8004dfe:	f020 0007 	bic.w	r0, r0, #7
 8004e02:	1ac2      	subs	r2, r0, r3
 8004e04:	d0cc      	beq.n	8004da0 <_malloc_r+0x20>
 8004e06:	1a1b      	subs	r3, r3, r0
 8004e08:	50a3      	str	r3, [r4, r2]
 8004e0a:	e7c9      	b.n	8004da0 <_malloc_r+0x20>
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	6864      	ldr	r4, [r4, #4]
 8004e10:	e7cc      	b.n	8004dac <_malloc_r+0x2c>
 8004e12:	1cc4      	adds	r4, r0, #3
 8004e14:	f024 0403 	bic.w	r4, r4, #3
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	d0e3      	beq.n	8004de4 <_malloc_r+0x64>
 8004e1c:	1a21      	subs	r1, r4, r0
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f000 f82e 	bl	8004e80 <_sbrk_r>
 8004e24:	3001      	adds	r0, #1
 8004e26:	d1dd      	bne.n	8004de4 <_malloc_r+0x64>
 8004e28:	e7cf      	b.n	8004dca <_malloc_r+0x4a>
 8004e2a:	bf00      	nop
 8004e2c:	20000144 	.word	0x20000144
 8004e30:	20000148 	.word	0x20000148

08004e34 <_realloc_r>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	4607      	mov	r7, r0
 8004e38:	4614      	mov	r4, r2
 8004e3a:	460e      	mov	r6, r1
 8004e3c:	b921      	cbnz	r1, 8004e48 <_realloc_r+0x14>
 8004e3e:	4611      	mov	r1, r2
 8004e40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e44:	f7ff bf9c 	b.w	8004d80 <_malloc_r>
 8004e48:	b922      	cbnz	r2, 8004e54 <_realloc_r+0x20>
 8004e4a:	f7ff ff4d 	bl	8004ce8 <_free_r>
 8004e4e:	4625      	mov	r5, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e54:	f000 f830 	bl	8004eb8 <_malloc_usable_size_r>
 8004e58:	42a0      	cmp	r0, r4
 8004e5a:	d20f      	bcs.n	8004e7c <_realloc_r+0x48>
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4638      	mov	r0, r7
 8004e60:	f7ff ff8e 	bl	8004d80 <_malloc_r>
 8004e64:	4605      	mov	r5, r0
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d0f2      	beq.n	8004e50 <_realloc_r+0x1c>
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	f7ff ff13 	bl	8004c98 <memcpy>
 8004e72:	4631      	mov	r1, r6
 8004e74:	4638      	mov	r0, r7
 8004e76:	f7ff ff37 	bl	8004ce8 <_free_r>
 8004e7a:	e7e9      	b.n	8004e50 <_realloc_r+0x1c>
 8004e7c:	4635      	mov	r5, r6
 8004e7e:	e7e7      	b.n	8004e50 <_realloc_r+0x1c>

08004e80 <_sbrk_r>:
 8004e80:	b538      	push	{r3, r4, r5, lr}
 8004e82:	2300      	movs	r3, #0
 8004e84:	4d05      	ldr	r5, [pc, #20]	; (8004e9c <_sbrk_r+0x1c>)
 8004e86:	4604      	mov	r4, r0
 8004e88:	4608      	mov	r0, r1
 8004e8a:	602b      	str	r3, [r5, #0]
 8004e8c:	f7fd f8da 	bl	8002044 <_sbrk>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	d102      	bne.n	8004e9a <_sbrk_r+0x1a>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	b103      	cbz	r3, 8004e9a <_sbrk_r+0x1a>
 8004e98:	6023      	str	r3, [r4, #0]
 8004e9a:	bd38      	pop	{r3, r4, r5, pc}
 8004e9c:	20000618 	.word	0x20000618

08004ea0 <__malloc_lock>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	; (8004ea8 <__malloc_lock+0x8>)
 8004ea2:	f000 b811 	b.w	8004ec8 <__retarget_lock_acquire_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	20000620 	.word	0x20000620

08004eac <__malloc_unlock>:
 8004eac:	4801      	ldr	r0, [pc, #4]	; (8004eb4 <__malloc_unlock+0x8>)
 8004eae:	f000 b80c 	b.w	8004eca <__retarget_lock_release_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	20000620 	.word	0x20000620

08004eb8 <_malloc_usable_size_r>:
 8004eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ebc:	1f18      	subs	r0, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bfbc      	itt	lt
 8004ec2:	580b      	ldrlt	r3, [r1, r0]
 8004ec4:	18c0      	addlt	r0, r0, r3
 8004ec6:	4770      	bx	lr

08004ec8 <__retarget_lock_acquire_recursive>:
 8004ec8:	4770      	bx	lr

08004eca <__retarget_lock_release_recursive>:
 8004eca:	4770      	bx	lr

08004ecc <_init>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	bf00      	nop
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr

08004ed8 <_fini>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr
