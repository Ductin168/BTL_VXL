
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b18  08004b18  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b18  08004b18  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200000cc  08004bec  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004bec  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001613f  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c33  00000000  00000000  00036234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00038e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00039e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195dd  00000000  00000000  0003adb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000143b9  00000000  00000000  00054395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc4e  00000000  00000000  0006874e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f639c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004708  00000000  00000000  000f63f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080049b8 	.word	0x080049b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	080049b8 	.word	0x080049b8

0800014c <switchAutoState>:


// ======================= CHẾ ĐỘ TỰ ĐỘNG =======================


void switchAutoState(int newState, int mainTime, int sideTime) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
    autoStatus = newState;
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <switchAutoState+0x2c>)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	6013      	str	r3, [r2, #0]
    clock_counter_main = mainTime;
 800015e:	4a07      	ldr	r2, [pc, #28]	; (800017c <switchAutoState+0x30>)
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	6013      	str	r3, [r2, #0]
    clock_counter_side = sideTime;
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <switchAutoState+0x34>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
    clearRoadLed();
 800016a:	f000 fe13 	bl	8000d94 <clearRoadLed>
}
 800016e:	bf00      	nop
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	2000004c 	.word	0x2000004c
 800017c:	20000114 	.word	0x20000114
 8000180:	20000118 	.word	0x20000118

08000184 <fsm_traffic_auto_mode>:

void fsm_traffic_auto_mode(void) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b0a0      	sub	sp, #128	; 0x80
 8000188:	af00      	add	r7, sp, #0
    switch (autoStatus) {
 800018a:	4bbd      	ldr	r3, [pc, #756]	; (8000480 <fsm_traffic_auto_mode+0x2fc>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b0a      	cmp	r3, #10
 8000190:	f200 8171 	bhi.w	8000476 <fsm_traffic_auto_mode+0x2f2>
 8000194:	a201      	add	r2, pc, #4	; (adr r2, 800019c <fsm_traffic_auto_mode+0x18>)
 8000196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019a:	bf00      	nop
 800019c:	08000477 	.word	0x08000477
 80001a0:	080001e3 	.word	0x080001e3
 80001a4:	0800028b 	.word	0x0800028b
 80001a8:	08000331 	.word	0x08000331
 80001ac:	080003d7 	.word	0x080003d7
 80001b0:	08000477 	.word	0x08000477
 80001b4:	08000477 	.word	0x08000477
 80001b8:	08000477 	.word	0x08000477
 80001bc:	08000477 	.word	0x08000477
 80001c0:	08000477 	.word	0x08000477
 80001c4:	080001c9 	.word	0x080001c9
        case OFF:
            break;
        case INIT:
            switchAutoState(RED_GREEN, timeRed, timeGreen);
 80001c8:	4bae      	ldr	r3, [pc, #696]	; (8000484 <fsm_traffic_auto_mode+0x300>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4aae      	ldr	r2, [pc, #696]	; (8000488 <fsm_traffic_auto_mode+0x304>)
 80001ce:	6812      	ldr	r2, [r2, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	2001      	movs	r0, #1
 80001d4:	f7ff ffba 	bl	800014c <switchAutoState>
            settimer1(1, 50);
 80001d8:	2132      	movs	r1, #50	; 0x32
 80001da:	2001      	movs	r0, #1
 80001dc:	f001 fb3a 	bl	8001854 <settimer1>
            break;
 80001e0:	e167      	b.n	80004b2 <fsm_traffic_auto_mode+0x32e>
        case RED_GREEN:
            turnOnRed1();
 80001e2:	f000 fd09 	bl	8000bf8 <turnOnRed1>
            turnOnGreen2();
 80001e6:	f000 fd55 	bl	8000c94 <turnOnGreen2>
            if (timerFlag[1] == 1) {
 80001ea:	4ba8      	ldr	r3, [pc, #672]	; (800048c <fsm_traffic_auto_mode+0x308>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d139      	bne.n	8000266 <fsm_traffic_auto_mode+0xe2>
                if (clock_counter_side >= 0) {
 80001f2:	4ba7      	ldr	r3, [pc, #668]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	db30      	blt.n	800025c <fsm_traffic_auto_mode+0xd8>
                	lcd_clear_display();
 80001fa:	f000 ff76 	bl	80010ea <lcd_clear_display>
                	HAL_Delay(10);
 80001fe:	200a      	movs	r0, #10
 8000200:	f001 fd52 	bl	8001ca8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "RED: %d", clock_counter_main);
 8000204:	4ba3      	ldr	r3, [pc, #652]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800020c:	4aa2      	ldr	r2, [pc, #648]	; (8000498 <fsm_traffic_auto_mode+0x314>)
 800020e:	2110      	movs	r1, #16
 8000210:	f004 f81a 	bl	8004248 <sniprintf>
                	lcd_goto_XY(1, 0);
 8000214:	2100      	movs	r1, #0
 8000216:	2001      	movs	r0, #1
 8000218:	f000 ff6e 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer);
 800021c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000220:	4618      	mov	r0, r3
 8000222:	f000 ff4d 	bl	80010c0 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "GREEN: %d", clock_counter_side);
 8000226:	4b9a      	ldr	r3, [pc, #616]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800022e:	4a9b      	ldr	r2, [pc, #620]	; (800049c <fsm_traffic_auto_mode+0x318>)
 8000230:	2110      	movs	r1, #16
 8000232:	f004 f809 	bl	8004248 <sniprintf>
                	lcd_goto_XY(2, 0);
 8000236:	2100      	movs	r1, #0
 8000238:	2002      	movs	r0, #2
 800023a:	f000 ff5d 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 800023e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000242:	4618      	mov	r0, r3
 8000244:	f000 ff3c 	bl	80010c0 <lcd_send_string>
                    clock_counter_side--;
 8000248:	4b91      	ldr	r3, [pc, #580]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a90      	ldr	r2, [pc, #576]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000250:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 8000252:	4b90      	ldr	r3, [pc, #576]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a8e      	ldr	r2, [pc, #568]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 800025a:	6013      	str	r3, [r2, #0]
                }
                settimer1(1, 1000);
 800025c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000260:	2001      	movs	r0, #1
 8000262:	f001 faf7 	bl	8001854 <settimer1>
            }
            if (clock_counter_side < 0) {
 8000266:	4b8a      	ldr	r3, [pc, #552]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	f280 8105 	bge.w	800047a <fsm_traffic_auto_mode+0x2f6>
                switchAutoState(RED_AMBER, clock_counter_main + 1, timeAmber);
 8000270:	4b88      	ldr	r3, [pc, #544]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	4a8a      	ldr	r2, [pc, #552]	; (80004a0 <fsm_traffic_auto_mode+0x31c>)
 8000278:	6812      	ldr	r2, [r2, #0]
 800027a:	4619      	mov	r1, r3
 800027c:	2002      	movs	r0, #2
 800027e:	f7ff ff65 	bl	800014c <switchAutoState>
                timerFlag[2] = 1;
 8000282:	4b82      	ldr	r3, [pc, #520]	; (800048c <fsm_traffic_auto_mode+0x308>)
 8000284:	2201      	movs	r2, #1
 8000286:	609a      	str	r2, [r3, #8]
            }
            break;
 8000288:	e0f7      	b.n	800047a <fsm_traffic_auto_mode+0x2f6>
        case RED_AMBER:
            turnOnRed1();
 800028a:	f000 fcb5 	bl	8000bf8 <turnOnRed1>
            turnOnAmber2();
 800028e:	f000 fcef 	bl	8000c70 <turnOnAmber2>
            if (timerFlag[2] == 1) {
 8000292:	4b7e      	ldr	r3, [pc, #504]	; (800048c <fsm_traffic_auto_mode+0x308>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d139      	bne.n	800030e <fsm_traffic_auto_mode+0x18a>
                if (clock_counter_side >= 0) {
 800029a:	4b7d      	ldr	r3, [pc, #500]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db35      	blt.n	800030e <fsm_traffic_auto_mode+0x18a>
                	lcd_clear_display();
 80002a2:	f000 ff22 	bl	80010ea <lcd_clear_display>
                	HAL_Delay(10);
 80002a6:	200a      	movs	r0, #10
 80002a8:	f001 fcfe 	bl	8001ca8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "RED: %d", clock_counter_main);
 80002ac:	4b79      	ldr	r3, [pc, #484]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80002b4:	4a78      	ldr	r2, [pc, #480]	; (8000498 <fsm_traffic_auto_mode+0x314>)
 80002b6:	2110      	movs	r1, #16
 80002b8:	f003 ffc6 	bl	8004248 <sniprintf>
                	lcd_goto_XY(1, 0);
 80002bc:	2100      	movs	r1, #0
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 ff1a 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer);
 80002c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fef9 	bl	80010c0 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "AMBER: %d", clock_counter_side);
 80002ce:	4b70      	ldr	r3, [pc, #448]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80002d6:	4a73      	ldr	r2, [pc, #460]	; (80004a4 <fsm_traffic_auto_mode+0x320>)
 80002d8:	2110      	movs	r1, #16
 80002da:	f003 ffb5 	bl	8004248 <sniprintf>
                	lcd_goto_XY(2, 0);
 80002de:	2100      	movs	r1, #0
 80002e0:	2002      	movs	r0, #2
 80002e2:	f000 ff09 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 80002e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fee8 	bl	80010c0 <lcd_send_string>
                    clock_counter_side--;
 80002f0:	4b67      	ldr	r3, [pc, #412]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	4a66      	ldr	r2, [pc, #408]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 80002f8:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 80002fa:	4b66      	ldr	r3, [pc, #408]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a64      	ldr	r2, [pc, #400]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000302:	6013      	str	r3, [r2, #0]
                    settimer1(2, 1000);
 8000304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000308:	2002      	movs	r0, #2
 800030a:	f001 faa3 	bl	8001854 <settimer1>
                }
            }
            if (clock_counter_side < 0) {
 800030e:	4b60      	ldr	r3, [pc, #384]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	f280 80c8 	bge.w	80004a8 <fsm_traffic_auto_mode+0x324>
                switchAutoState(GREEN_RED, timeGreen, timeRed);
 8000318:	4b5b      	ldr	r3, [pc, #364]	; (8000488 <fsm_traffic_auto_mode+0x304>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a59      	ldr	r2, [pc, #356]	; (8000484 <fsm_traffic_auto_mode+0x300>)
 800031e:	6812      	ldr	r2, [r2, #0]
 8000320:	4619      	mov	r1, r3
 8000322:	2003      	movs	r0, #3
 8000324:	f7ff ff12 	bl	800014c <switchAutoState>
                timerFlag[3] = 1;
 8000328:	4b58      	ldr	r3, [pc, #352]	; (800048c <fsm_traffic_auto_mode+0x308>)
 800032a:	2201      	movs	r2, #1
 800032c:	60da      	str	r2, [r3, #12]
            }
            break;
 800032e:	e0bb      	b.n	80004a8 <fsm_traffic_auto_mode+0x324>
        case GREEN_RED:
            turnOnGreen1();
 8000330:	f000 fc80 	bl	8000c34 <turnOnGreen1>
            turnOnRed2();
 8000334:	f000 fc90 	bl	8000c58 <turnOnRed2>
            if (timerFlag[3] == 1) {
 8000338:	4b54      	ldr	r3, [pc, #336]	; (800048c <fsm_traffic_auto_mode+0x308>)
 800033a:	68db      	ldr	r3, [r3, #12]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d139      	bne.n	80003b4 <fsm_traffic_auto_mode+0x230>
                if (clock_counter_side >= 0) {
 8000340:	4b53      	ldr	r3, [pc, #332]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	db35      	blt.n	80003b4 <fsm_traffic_auto_mode+0x230>
                	lcd_clear_display();
 8000348:	f000 fecf 	bl	80010ea <lcd_clear_display>
                	HAL_Delay(10);
 800034c:	200a      	movs	r0, #10
 800034e:	f001 fcab 	bl	8001ca8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "GREEN: %d", clock_counter_main);
 8000352:	4b50      	ldr	r3, [pc, #320]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800035a:	4a50      	ldr	r2, [pc, #320]	; (800049c <fsm_traffic_auto_mode+0x318>)
 800035c:	2110      	movs	r1, #16
 800035e:	f003 ff73 	bl	8004248 <sniprintf>
                	lcd_goto_XY(1, 0);
 8000362:	2100      	movs	r1, #0
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fec7 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer);
 800036a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800036e:	4618      	mov	r0, r3
 8000370:	f000 fea6 	bl	80010c0 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "RED: %d", clock_counter_side);
 8000374:	4b46      	ldr	r3, [pc, #280]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f107 0020 	add.w	r0, r7, #32
 800037c:	4a46      	ldr	r2, [pc, #280]	; (8000498 <fsm_traffic_auto_mode+0x314>)
 800037e:	2110      	movs	r1, #16
 8000380:	f003 ff62 	bl	8004248 <sniprintf>
                	lcd_goto_XY(2, 0);
 8000384:	2100      	movs	r1, #0
 8000386:	2002      	movs	r0, #2
 8000388:	f000 feb6 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 800038c:	f107 0320 	add.w	r3, r7, #32
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fe95 	bl	80010c0 <lcd_send_string>
                    clock_counter_side--;
 8000396:	4b3e      	ldr	r3, [pc, #248]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	4a3c      	ldr	r2, [pc, #240]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 800039e:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 80003a0:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a3b      	ldr	r2, [pc, #236]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 80003a8:	6013      	str	r3, [r2, #0]
                    settimer1(3, 1000);
 80003aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003ae:	2003      	movs	r0, #3
 80003b0:	f001 fa50 	bl	8001854 <settimer1>
                }
            }
            if (clock_counter_main < 0) {
 80003b4:	4b37      	ldr	r3, [pc, #220]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	da77      	bge.n	80004ac <fsm_traffic_auto_mode+0x328>
                switchAutoState(AMBER_RED, timeAmber, clock_counter_side + 1);
 80003bc:	4b38      	ldr	r3, [pc, #224]	; (80004a0 <fsm_traffic_auto_mode+0x31c>)
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	4b33      	ldr	r3, [pc, #204]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	461a      	mov	r2, r3
 80003c8:	2004      	movs	r0, #4
 80003ca:	f7ff febf 	bl	800014c <switchAutoState>
                timerFlag[4] = 1;
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <fsm_traffic_auto_mode+0x308>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	611a      	str	r2, [r3, #16]
            }
            break;
 80003d4:	e06a      	b.n	80004ac <fsm_traffic_auto_mode+0x328>
        case AMBER_RED:
            turnOnAmber1();
 80003d6:	f000 fc1b 	bl	8000c10 <turnOnAmber1>
            turnOnRed2();
 80003da:	f000 fc3d 	bl	8000c58 <turnOnRed2>
            if (timerFlag[4] == 1) {
 80003de:	4b2b      	ldr	r3, [pc, #172]	; (800048c <fsm_traffic_auto_mode+0x308>)
 80003e0:	691b      	ldr	r3, [r3, #16]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d137      	bne.n	8000456 <fsm_traffic_auto_mode+0x2d2>
                if (clock_counter_side >= 0) {
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	db33      	blt.n	8000456 <fsm_traffic_auto_mode+0x2d2>
                	lcd_clear_display();
 80003ee:	f000 fe7c 	bl	80010ea <lcd_clear_display>
                	HAL_Delay(10);
 80003f2:	200a      	movs	r0, #10
 80003f4:	f001 fc58 	bl	8001ca8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "AMBER: %d", clock_counter_main);
 80003f8:	4b26      	ldr	r3, [pc, #152]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f107 0010 	add.w	r0, r7, #16
 8000400:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <fsm_traffic_auto_mode+0x320>)
 8000402:	2110      	movs	r1, #16
 8000404:	f003 ff20 	bl	8004248 <sniprintf>
                	lcd_goto_XY(1, 0);
 8000408:	2100      	movs	r1, #0
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fe74 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fe53 	bl	80010c0 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "RED: %d", clock_counter_side);
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4638      	mov	r0, r7
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <fsm_traffic_auto_mode+0x314>)
 8000422:	2110      	movs	r1, #16
 8000424:	f003 ff10 	bl	8004248 <sniprintf>
                	lcd_goto_XY(2, 0);
 8000428:	2100      	movs	r1, #0
 800042a:	2002      	movs	r0, #2
 800042c:	f000 fe64 	bl	80010f8 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 8000430:	463b      	mov	r3, r7
 8000432:	4618      	mov	r0, r3
 8000434:	f000 fe44 	bl	80010c0 <lcd_send_string>
                    clock_counter_side--;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <fsm_traffic_auto_mode+0x30c>)
 8000440:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	4a12      	ldr	r2, [pc, #72]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 800044a:	6013      	str	r3, [r2, #0]
                    settimer1(4, 1000);
 800044c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000450:	2004      	movs	r0, #4
 8000452:	f001 f9ff 	bl	8001854 <settimer1>
                }
            }
            if (clock_counter_main < 0) {
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <fsm_traffic_auto_mode+0x310>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	da28      	bge.n	80004b0 <fsm_traffic_auto_mode+0x32c>
                switchAutoState(RED_GREEN, timeRed, timeGreen);
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <fsm_traffic_auto_mode+0x300>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a09      	ldr	r2, [pc, #36]	; (8000488 <fsm_traffic_auto_mode+0x304>)
 8000464:	6812      	ldr	r2, [r2, #0]
 8000466:	4619      	mov	r1, r3
 8000468:	2001      	movs	r0, #1
 800046a:	f7ff fe6f 	bl	800014c <switchAutoState>
                timerFlag[1] = 1;
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <fsm_traffic_auto_mode+0x308>)
 8000470:	2201      	movs	r2, #1
 8000472:	605a      	str	r2, [r3, #4]
            }
            break;
 8000474:	e01c      	b.n	80004b0 <fsm_traffic_auto_mode+0x32c>
        default:
            break;
 8000476:	bf00      	nop
 8000478:	e01b      	b.n	80004b2 <fsm_traffic_auto_mode+0x32e>
            break;
 800047a:	bf00      	nop
 800047c:	e019      	b.n	80004b2 <fsm_traffic_auto_mode+0x32e>
 800047e:	bf00      	nop
 8000480:	2000004c 	.word	0x2000004c
 8000484:	20000050 	.word	0x20000050
 8000488:	20000058 	.word	0x20000058
 800048c:	20000244 	.word	0x20000244
 8000490:	20000118 	.word	0x20000118
 8000494:	20000114 	.word	0x20000114
 8000498:	080049d0 	.word	0x080049d0
 800049c:	080049d8 	.word	0x080049d8
 80004a0:	20000054 	.word	0x20000054
 80004a4:	080049e4 	.word	0x080049e4
            break;
 80004a8:	bf00      	nop
 80004aa:	e002      	b.n	80004b2 <fsm_traffic_auto_mode+0x32e>
            break;
 80004ac:	bf00      	nop
 80004ae:	e000      	b.n	80004b2 <fsm_traffic_auto_mode+0x32e>
            break;
 80004b0:	bf00      	nop
    }
}
 80004b2:	bf00      	nop
 80004b4:	3780      	adds	r7, #128	; 0x80
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop

080004bc <isButtonDebounced>:

// ======================= CHẾ ĐỘ TINH CHỈNH =======================

static uint32_t lastButtonPressTime[3] = {0, 0, 0}; // Array to store last press time for each button

bool isButtonDebounced(int button) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 80004c4:	f001 fbe6 	bl	8001c94 <HAL_GetTick>
 80004c8:	60f8      	str	r0, [r7, #12]
    if (currentTime - lastButtonPressTime[button] > DEBOUNCE_DELAY) {
 80004ca:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <isButtonDebounced+0x38>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	2bc8      	cmp	r3, #200	; 0xc8
 80004d8:	d906      	bls.n	80004e8 <isButtonDebounced+0x2c>
        lastButtonPressTime[button] = currentTime;
 80004da:	4906      	ldr	r1, [pc, #24]	; (80004f4 <isButtonDebounced+0x38>)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        return true;
 80004e4:	2301      	movs	r3, #1
 80004e6:	e000      	b.n	80004ea <isButtonDebounced+0x2e>
    }
    return false;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000e8 	.word	0x200000e8

080004f8 <logNewTime>:
void logNewTime() {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    if (tuningStatus == RED_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER RED :%d#\r\n", timeRed), 500);
 80004fc:	4b1d      	ldr	r3, [pc, #116]	; (8000574 <logNewTime+0x7c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10e      	bne.n	8000522 <logNewTime+0x2a>
 8000504:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <logNewTime+0x80>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	491c      	ldr	r1, [pc, #112]	; (800057c <logNewTime+0x84>)
 800050c:	481c      	ldr	r0, [pc, #112]	; (8000580 <logNewTime+0x88>)
 800050e:	f003 fecf 	bl	80042b0 <siprintf>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800051a:	4919      	ldr	r1, [pc, #100]	; (8000580 <logNewTime+0x88>)
 800051c:	4819      	ldr	r0, [pc, #100]	; (8000584 <logNewTime+0x8c>)
 800051e:	f003 fbcf 	bl	8003cc0 <HAL_UART_Transmit>
    if (tuningStatus == AMBER_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER AMBER :%d#\r\n", timeAmber), 500);
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <logNewTime+0x7c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b02      	cmp	r3, #2
 8000528:	d10e      	bne.n	8000548 <logNewTime+0x50>
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <logNewTime+0x90>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	4916      	ldr	r1, [pc, #88]	; (800058c <logNewTime+0x94>)
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <logNewTime+0x88>)
 8000534:	f003 febc 	bl	80042b0 <siprintf>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000540:	490f      	ldr	r1, [pc, #60]	; (8000580 <logNewTime+0x88>)
 8000542:	4810      	ldr	r0, [pc, #64]	; (8000584 <logNewTime+0x8c>)
 8000544:	f003 fbbc 	bl	8003cc0 <HAL_UART_Transmit>
    if (tuningStatus == GREEN_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER GREEN :%d#\r\n", timeGreen), 500);
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <logNewTime+0x7c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b03      	cmp	r3, #3
 800054e:	d10e      	bne.n	800056e <logNewTime+0x76>
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <logNewTime+0x98>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	490f      	ldr	r1, [pc, #60]	; (8000594 <logNewTime+0x9c>)
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <logNewTime+0x88>)
 800055a:	f003 fea9 	bl	80042b0 <siprintf>
 800055e:	4603      	mov	r3, r0
 8000560:	b29a      	uxth	r2, r3
 8000562:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000566:	4906      	ldr	r1, [pc, #24]	; (8000580 <logNewTime+0x88>)
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <logNewTime+0x8c>)
 800056a:	f003 fba9 	bl	8003cc0 <HAL_UART_Transmit>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000110 	.word	0x20000110
 8000578:	20000050 	.word	0x20000050
 800057c:	080049f0 	.word	0x080049f0
 8000580:	20000170 	.word	0x20000170
 8000584:	20000128 	.word	0x20000128
 8000588:	20000054 	.word	0x20000054
 800058c:	08004a04 	.word	0x08004a04
 8000590:	20000058 	.word	0x20000058
 8000594:	08004a18 	.word	0x08004a18

08000598 <display_timerRed>:

int initialTimeRed = 5;
int initialTimeAmber = 2;
int initialTimeGreen = 3;

void display_timerRed() {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "TimeRED:%d", timeRed);
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <display_timerRed+0x2c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4638      	mov	r0, r7
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <display_timerRed+0x30>)
 80005a6:	2110      	movs	r1, #16
 80005a8:	f003 fe4e 	bl	8004248 <sniprintf>
    lcd_goto_XY(1, 0);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 fda2 	bl	80010f8 <lcd_goto_XY>
    lcd_send_string(buffer);
 80005b4:	463b      	mov	r3, r7
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fd82 	bl	80010c0 <lcd_send_string>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000050 	.word	0x20000050
 80005c8:	08004a2c 	.word	0x08004a2c

080005cc <display_timerGreen>:

void display_timerGreen() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "TimeGREEN:%d", timeGreen);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <display_timerGreen+0x2c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4638      	mov	r0, r7
 80005d8:	4a08      	ldr	r2, [pc, #32]	; (80005fc <display_timerGreen+0x30>)
 80005da:	2110      	movs	r1, #16
 80005dc:	f003 fe34 	bl	8004248 <sniprintf>
    lcd_goto_XY(1, 0);
 80005e0:	2100      	movs	r1, #0
 80005e2:	2001      	movs	r0, #1
 80005e4:	f000 fd88 	bl	80010f8 <lcd_goto_XY>
    lcd_send_string(buffer);
 80005e8:	463b      	mov	r3, r7
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fd68 	bl	80010c0 <lcd_send_string>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000058 	.word	0x20000058
 80005fc:	08004a38 	.word	0x08004a38

08000600 <display_timerAmber>:

void display_timerAmber() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "TimeAMBER:%d", timeAmber);
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <display_timerAmber+0x2c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4638      	mov	r0, r7
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <display_timerAmber+0x30>)
 800060e:	2110      	movs	r1, #16
 8000610:	f003 fe1a 	bl	8004248 <sniprintf>
    lcd_goto_XY(1, 0);
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fd6e 	bl	80010f8 <lcd_goto_XY>
    lcd_send_string(buffer);
 800061c:	463b      	mov	r3, r7
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fd4e 	bl	80010c0 <lcd_send_string>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000054 	.word	0x20000054
 8000630:	08004a48 	.word	0x08004a48

08000634 <fsm_traffic_tunning_mode>:

void fsm_traffic_tunning_mode(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    switch (tuningStatus) {
 8000638:	4bcc      	ldr	r3, [pc, #816]	; (800096c <fsm_traffic_tunning_mode+0x338>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b0a      	cmp	r3, #10
 800063e:	f200 81ec 	bhi.w	8000a1a <fsm_traffic_tunning_mode+0x3e6>
 8000642:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <fsm_traffic_tunning_mode+0x14>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	08000a1b 	.word	0x08000a1b
 800064c:	0800068d 	.word	0x0800068d
 8000650:	080008d1 	.word	0x080008d1
 8000654:	080007af 	.word	0x080007af
 8000658:	08000a1b 	.word	0x08000a1b
 800065c:	08000a1b 	.word	0x08000a1b
 8000660:	08000a1b 	.word	0x08000a1b
 8000664:	08000a1b 	.word	0x08000a1b
 8000668:	08000a1b 	.word	0x08000a1b
 800066c:	08000a1b 	.word	0x08000a1b
 8000670:	08000675 	.word	0x08000675
        case OFF:
            // do nothing
            break;
        case INIT:
            tuningStatus = RED_ADJ;
 8000674:	4bbd      	ldr	r3, [pc, #756]	; (800096c <fsm_traffic_tunning_mode+0x338>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
            clearRoadLed();
 800067a:	f000 fb8b 	bl	8000d94 <clearRoadLed>
            logNewTime();
 800067e:	f7ff ff3b 	bl	80004f8 <logNewTime>
            settimer1(5, 5);
 8000682:	2105      	movs	r1, #5
 8000684:	2005      	movs	r0, #5
 8000686:	f001 f8e5 	bl	8001854 <settimer1>
            break;
 800068a:	e1cd      	b.n	8000a28 <fsm_traffic_tunning_mode+0x3f4>
        case RED_ADJ:
            blinkyRed();
 800068c:	f000 fb14 	bl	8000cb8 <blinkyRed>
            if (isButtonShortPressed(2) && isButtonDebounced(2)) {
 8000690:	2002      	movs	r0, #2
 8000692:	f000 fb85 	bl	8000da0 <isButtonShortPressed>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01e      	beq.n	80006da <fsm_traffic_tunning_mode+0xa6>
 800069c:	2002      	movs	r0, #2
 800069e:	f7ff ff0d 	bl	80004bc <isButtonDebounced>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d018      	beq.n	80006da <fsm_traffic_tunning_mode+0xa6>
            	lcd_clear_display();
 80006a8:	f000 fd1f 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f001 fafb 	bl	8001ca8 <HAL_Delay>
                timeRed = (timeRed + 1) % 100;
 80006b2:	4baf      	ldr	r3, [pc, #700]	; (8000970 <fsm_traffic_tunning_mode+0x33c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	4bae      	ldr	r3, [pc, #696]	; (8000974 <fsm_traffic_tunning_mode+0x340>)
 80006ba:	fb83 1302 	smull	r1, r3, r3, r2
 80006be:	1159      	asrs	r1, r3, #5
 80006c0:	17d3      	asrs	r3, r2, #31
 80006c2:	1acb      	subs	r3, r1, r3
 80006c4:	2164      	movs	r1, #100	; 0x64
 80006c6:	fb01 f303 	mul.w	r3, r1, r3
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4aa8      	ldr	r2, [pc, #672]	; (8000970 <fsm_traffic_tunning_mode+0x33c>)
 80006ce:	6013      	str	r3, [r2, #0]
                logNewTime();
 80006d0:	f7ff ff12 	bl	80004f8 <logNewTime>
                display_timerRed();
 80006d4:	f7ff ff60 	bl	8000598 <display_timerRed>
 80006d8:	e068      	b.n	80007ac <fsm_traffic_tunning_mode+0x178>
            } else if (isButtonLongPressed(2) && isButtonDebounced(2)) {
 80006da:	2002      	movs	r0, #2
 80006dc:	f000 fb7a 	bl	8000dd4 <isButtonLongPressed>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d01f      	beq.n	8000726 <fsm_traffic_tunning_mode+0xf2>
 80006e6:	2002      	movs	r0, #2
 80006e8:	f7ff fee8 	bl	80004bc <isButtonDebounced>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d019      	beq.n	8000726 <fsm_traffic_tunning_mode+0xf2>
            	lcd_clear_display();
 80006f2:	f000 fcfa 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 80006f6:	200a      	movs	r0, #10
 80006f8:	f001 fad6 	bl	8001ca8 <HAL_Delay>
                timeRed = (timeRed - 1 + 100) % 100;
 80006fc:	4b9c      	ldr	r3, [pc, #624]	; (8000970 <fsm_traffic_tunning_mode+0x33c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000704:	4b9b      	ldr	r3, [pc, #620]	; (8000974 <fsm_traffic_tunning_mode+0x340>)
 8000706:	fb83 1302 	smull	r1, r3, r3, r2
 800070a:	1159      	asrs	r1, r3, #5
 800070c:	17d3      	asrs	r3, r2, #31
 800070e:	1acb      	subs	r3, r1, r3
 8000710:	2164      	movs	r1, #100	; 0x64
 8000712:	fb01 f303 	mul.w	r3, r1, r3
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	4a95      	ldr	r2, [pc, #596]	; (8000970 <fsm_traffic_tunning_mode+0x33c>)
 800071a:	6013      	str	r3, [r2, #0]
                logNewTime();
 800071c:	f7ff feec 	bl	80004f8 <logNewTime>
                display_timerRed();
 8000720:	f7ff ff3a 	bl	8000598 <display_timerRed>
 8000724:	e042      	b.n	80007ac <fsm_traffic_tunning_mode+0x178>
            } else if (isButtonShortPressed(1) && isButtonDebounced(1)) {
 8000726:	2001      	movs	r0, #1
 8000728:	f000 fb3a 	bl	8000da0 <isButtonShortPressed>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d013      	beq.n	800075a <fsm_traffic_tunning_mode+0x126>
 8000732:	2001      	movs	r0, #1
 8000734:	f7ff fec2 	bl	80004bc <isButtonDebounced>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00d      	beq.n	800075a <fsm_traffic_tunning_mode+0x126>
                tuningStatus = GREEN_ADJ;
 800073e:	4b8b      	ldr	r3, [pc, #556]	; (800096c <fsm_traffic_tunning_mode+0x338>)
 8000740:	2203      	movs	r2, #3
 8000742:	601a      	str	r2, [r3, #0]
                clearRoadLed();
 8000744:	f000 fb26 	bl	8000d94 <clearRoadLed>
                logNewTime();
 8000748:	f7ff fed6 	bl	80004f8 <logNewTime>
                settimer1(6, 5);
 800074c:	2105      	movs	r1, #5
 800074e:	2006      	movs	r0, #6
 8000750:	f001 f880 	bl	8001854 <settimer1>
                display_timerGreen();
 8000754:	f7ff ff3a 	bl	80005cc <display_timerGreen>
 8000758:	e028      	b.n	80007ac <fsm_traffic_tunning_mode+0x178>
            } else if (isButtonShortPressed(0) && isButtonDebounced(0)) {
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fb20 	bl	8000da0 <isButtonShortPressed>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	f000 815b 	beq.w	8000a1e <fsm_traffic_tunning_mode+0x3ea>
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff fea7 	bl	80004bc <isButtonDebounced>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8154 	beq.w	8000a1e <fsm_traffic_tunning_mode+0x3ea>
                // Reset all lights to initial times when button 1 is pressed
                timeRed = initialTimeRed;
 8000776:	4b80      	ldr	r3, [pc, #512]	; (8000978 <fsm_traffic_tunning_mode+0x344>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a7d      	ldr	r2, [pc, #500]	; (8000970 <fsm_traffic_tunning_mode+0x33c>)
 800077c:	6013      	str	r3, [r2, #0]
                timeAmber = initialTimeAmber;
 800077e:	4b7f      	ldr	r3, [pc, #508]	; (800097c <fsm_traffic_tunning_mode+0x348>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a7f      	ldr	r2, [pc, #508]	; (8000980 <fsm_traffic_tunning_mode+0x34c>)
 8000784:	6013      	str	r3, [r2, #0]
                timeGreen = initialTimeGreen;
 8000786:	4b7f      	ldr	r3, [pc, #508]	; (8000984 <fsm_traffic_tunning_mode+0x350>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a7f      	ldr	r2, [pc, #508]	; (8000988 <fsm_traffic_tunning_mode+0x354>)
 800078c:	6013      	str	r3, [r2, #0]
                logNewTime();  // Send new time information
 800078e:	f7ff feb3 	bl	80004f8 <logNewTime>
            	lcd_clear_display();
 8000792:	f000 fcaa 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 8000796:	200a      	movs	r0, #10
 8000798:	f001 fa86 	bl	8001ca8 <HAL_Delay>
                display_timerRed();
 800079c:	f7ff fefc 	bl	8000598 <display_timerRed>
                tuningStatus = RED_ADJ;  // Keep state GREEN_ADJ
 80007a0:	4b72      	ldr	r3, [pc, #456]	; (800096c <fsm_traffic_tunning_mode+0x338>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	601a      	str	r2, [r3, #0]
                clearRoadLed();  // Turn off all lights
 80007a6:	f000 faf5 	bl	8000d94 <clearRoadLed>
            }
            break;
 80007aa:	e138      	b.n	8000a1e <fsm_traffic_tunning_mode+0x3ea>
 80007ac:	e137      	b.n	8000a1e <fsm_traffic_tunning_mode+0x3ea>
        case GREEN_ADJ:
            blinkyGreen();
 80007ae:	f000 fac9 	bl	8000d44 <blinkyGreen>
            if (isButtonShortPressed(2) && isButtonDebounced(2)) {
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 faf4 	bl	8000da0 <isButtonShortPressed>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d01e      	beq.n	80007fc <fsm_traffic_tunning_mode+0x1c8>
 80007be:	2002      	movs	r0, #2
 80007c0:	f7ff fe7c 	bl	80004bc <isButtonDebounced>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d018      	beq.n	80007fc <fsm_traffic_tunning_mode+0x1c8>
            	lcd_clear_display();
 80007ca:	f000 fc8e 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f001 fa6a 	bl	8001ca8 <HAL_Delay>
                timeGreen = (timeGreen + 1) % 100;
 80007d4:	4b6c      	ldr	r3, [pc, #432]	; (8000988 <fsm_traffic_tunning_mode+0x354>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	4b66      	ldr	r3, [pc, #408]	; (8000974 <fsm_traffic_tunning_mode+0x340>)
 80007dc:	fb83 1302 	smull	r1, r3, r3, r2
 80007e0:	1159      	asrs	r1, r3, #5
 80007e2:	17d3      	asrs	r3, r2, #31
 80007e4:	1acb      	subs	r3, r1, r3
 80007e6:	2164      	movs	r1, #100	; 0x64
 80007e8:	fb01 f303 	mul.w	r3, r1, r3
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	4a66      	ldr	r2, [pc, #408]	; (8000988 <fsm_traffic_tunning_mode+0x354>)
 80007f0:	6013      	str	r3, [r2, #0]
                logNewTime();
 80007f2:	f7ff fe81 	bl	80004f8 <logNewTime>
                display_timerGreen();
 80007f6:	f7ff fee9 	bl	80005cc <display_timerGreen>
 80007fa:	e068      	b.n	80008ce <fsm_traffic_tunning_mode+0x29a>
            } else if (isButtonLongPressed(2) && isButtonDebounced(2)) {
 80007fc:	2002      	movs	r0, #2
 80007fe:	f000 fae9 	bl	8000dd4 <isButtonLongPressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d01f      	beq.n	8000848 <fsm_traffic_tunning_mode+0x214>
 8000808:	2002      	movs	r0, #2
 800080a:	f7ff fe57 	bl	80004bc <isButtonDebounced>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d019      	beq.n	8000848 <fsm_traffic_tunning_mode+0x214>
            	lcd_clear_display();
 8000814:	f000 fc69 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 8000818:	200a      	movs	r0, #10
 800081a:	f001 fa45 	bl	8001ca8 <HAL_Delay>
                timeGreen = (timeGreen - 1 + 100) % 100;
 800081e:	4b5a      	ldr	r3, [pc, #360]	; (8000988 <fsm_traffic_tunning_mode+0x354>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000826:	4b53      	ldr	r3, [pc, #332]	; (8000974 <fsm_traffic_tunning_mode+0x340>)
 8000828:	fb83 1302 	smull	r1, r3, r3, r2
 800082c:	1159      	asrs	r1, r3, #5
 800082e:	17d3      	asrs	r3, r2, #31
 8000830:	1acb      	subs	r3, r1, r3
 8000832:	2164      	movs	r1, #100	; 0x64
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	4a53      	ldr	r2, [pc, #332]	; (8000988 <fsm_traffic_tunning_mode+0x354>)
 800083c:	6013      	str	r3, [r2, #0]
                logNewTime();
 800083e:	f7ff fe5b 	bl	80004f8 <logNewTime>
                display_timerGreen();
 8000842:	f7ff fec3 	bl	80005cc <display_timerGreen>
 8000846:	e042      	b.n	80008ce <fsm_traffic_tunning_mode+0x29a>
            } else if (isButtonShortPressed(1) && isButtonDebounced(1)) {
 8000848:	2001      	movs	r0, #1
 800084a:	f000 faa9 	bl	8000da0 <isButtonShortPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d013      	beq.n	800087c <fsm_traffic_tunning_mode+0x248>
 8000854:	2001      	movs	r0, #1
 8000856:	f7ff fe31 	bl	80004bc <isButtonDebounced>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00d      	beq.n	800087c <fsm_traffic_tunning_mode+0x248>
                tuningStatus = AMBER_ADJ;
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <fsm_traffic_tunning_mode+0x338>)
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
                clearRoadLed();
 8000866:	f000 fa95 	bl	8000d94 <clearRoadLed>
                logNewTime();
 800086a:	f7ff fe45 	bl	80004f8 <logNewTime>
                settimer1(7, 5);
 800086e:	2105      	movs	r1, #5
 8000870:	2007      	movs	r0, #7
 8000872:	f000 ffef 	bl	8001854 <settimer1>
                display_timerAmber();
 8000876:	f7ff fec3 	bl	8000600 <display_timerAmber>
 800087a:	e028      	b.n	80008ce <fsm_traffic_tunning_mode+0x29a>
            } else if (isButtonShortPressed(0) && isButtonDebounced(0)) {
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fa8f 	bl	8000da0 <isButtonShortPressed>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	f000 80cc 	beq.w	8000a22 <fsm_traffic_tunning_mode+0x3ee>
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff fe16 	bl	80004bc <isButtonDebounced>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 80c5 	beq.w	8000a22 <fsm_traffic_tunning_mode+0x3ee>
                // Reset all lights to initial times when button 1 is pressed
                timeRed = initialTimeRed;
 8000898:	4b37      	ldr	r3, [pc, #220]	; (8000978 <fsm_traffic_tunning_mode+0x344>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a34      	ldr	r2, [pc, #208]	; (8000970 <fsm_traffic_tunning_mode+0x33c>)
 800089e:	6013      	str	r3, [r2, #0]
                timeAmber = initialTimeAmber;
 80008a0:	4b36      	ldr	r3, [pc, #216]	; (800097c <fsm_traffic_tunning_mode+0x348>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a36      	ldr	r2, [pc, #216]	; (8000980 <fsm_traffic_tunning_mode+0x34c>)
 80008a6:	6013      	str	r3, [r2, #0]
                timeGreen = initialTimeGreen;
 80008a8:	4b36      	ldr	r3, [pc, #216]	; (8000984 <fsm_traffic_tunning_mode+0x350>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a36      	ldr	r2, [pc, #216]	; (8000988 <fsm_traffic_tunning_mode+0x354>)
 80008ae:	6013      	str	r3, [r2, #0]
                logNewTime();  // Send new time information
 80008b0:	f7ff fe22 	bl	80004f8 <logNewTime>
            	lcd_clear_display();
 80008b4:	f000 fc19 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 80008b8:	200a      	movs	r0, #10
 80008ba:	f001 f9f5 	bl	8001ca8 <HAL_Delay>
                display_timerGreen();
 80008be:	f7ff fe85 	bl	80005cc <display_timerGreen>
                tuningStatus = GREEN_ADJ;  // Keep state GREEN_ADJ
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <fsm_traffic_tunning_mode+0x338>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	601a      	str	r2, [r3, #0]
                clearRoadLed();  // Turn off all lights
 80008c8:	f000 fa64 	bl	8000d94 <clearRoadLed>
            }
            break;
 80008cc:	e0a9      	b.n	8000a22 <fsm_traffic_tunning_mode+0x3ee>
 80008ce:	e0a8      	b.n	8000a22 <fsm_traffic_tunning_mode+0x3ee>
        case AMBER_ADJ:
            blinkyAmber();
 80008d0:	f000 fa10 	bl	8000cf4 <blinkyAmber>
            if (isButtonShortPressed(2) && isButtonDebounced(2)) {
 80008d4:	2002      	movs	r0, #2
 80008d6:	f000 fa63 	bl	8000da0 <isButtonShortPressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d01e      	beq.n	800091e <fsm_traffic_tunning_mode+0x2ea>
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fdeb 	bl	80004bc <isButtonDebounced>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d018      	beq.n	800091e <fsm_traffic_tunning_mode+0x2ea>
            	lcd_clear_display();
 80008ec:	f000 fbfd 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 80008f0:	200a      	movs	r0, #10
 80008f2:	f001 f9d9 	bl	8001ca8 <HAL_Delay>
                timeAmber = (timeAmber + 1) % 100;
 80008f6:	4b22      	ldr	r3, [pc, #136]	; (8000980 <fsm_traffic_tunning_mode+0x34c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <fsm_traffic_tunning_mode+0x340>)
 80008fe:	fb83 1302 	smull	r1, r3, r3, r2
 8000902:	1159      	asrs	r1, r3, #5
 8000904:	17d3      	asrs	r3, r2, #31
 8000906:	1acb      	subs	r3, r1, r3
 8000908:	2164      	movs	r1, #100	; 0x64
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <fsm_traffic_tunning_mode+0x34c>)
 8000912:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000914:	f7ff fdf0 	bl	80004f8 <logNewTime>
                display_timerAmber();
 8000918:	f7ff fe72 	bl	8000600 <display_timerAmber>
 800091c:	e07c      	b.n	8000a18 <fsm_traffic_tunning_mode+0x3e4>
            } else if (isButtonLongPressed(2) && isButtonDebounced(2)) {
 800091e:	2002      	movs	r0, #2
 8000920:	f000 fa58 	bl	8000dd4 <isButtonLongPressed>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d030      	beq.n	800098c <fsm_traffic_tunning_mode+0x358>
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fdc6 	bl	80004bc <isButtonDebounced>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d02a      	beq.n	800098c <fsm_traffic_tunning_mode+0x358>
            	lcd_clear_display();
 8000936:	f000 fbd8 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 800093a:	200a      	movs	r0, #10
 800093c:	f001 f9b4 	bl	8001ca8 <HAL_Delay>
                timeAmber = (timeAmber - 1 + 100) % 100;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <fsm_traffic_tunning_mode+0x34c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <fsm_traffic_tunning_mode+0x340>)
 800094a:	fb83 1302 	smull	r1, r3, r3, r2
 800094e:	1159      	asrs	r1, r3, #5
 8000950:	17d3      	asrs	r3, r2, #31
 8000952:	1acb      	subs	r3, r1, r3
 8000954:	2164      	movs	r1, #100	; 0x64
 8000956:	fb01 f303 	mul.w	r3, r1, r3
 800095a:	1ad3      	subs	r3, r2, r3
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <fsm_traffic_tunning_mode+0x34c>)
 800095e:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000960:	f7ff fdca 	bl	80004f8 <logNewTime>
                display_timerAmber();
 8000964:	f7ff fe4c 	bl	8000600 <display_timerAmber>
 8000968:	e056      	b.n	8000a18 <fsm_traffic_tunning_mode+0x3e4>
 800096a:	bf00      	nop
 800096c:	20000110 	.word	0x20000110
 8000970:	20000050 	.word	0x20000050
 8000974:	51eb851f 	.word	0x51eb851f
 8000978:	20000000 	.word	0x20000000
 800097c:	20000004 	.word	0x20000004
 8000980:	20000054 	.word	0x20000054
 8000984:	20000008 	.word	0x20000008
 8000988:	20000058 	.word	0x20000058
            } else if (isButtonShortPressed(1) && isButtonDebounced(1)) {
 800098c:	2001      	movs	r0, #1
 800098e:	f000 fa07 	bl	8000da0 <isButtonShortPressed>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d018      	beq.n	80009ca <fsm_traffic_tunning_mode+0x396>
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fd8f 	bl	80004bc <isButtonDebounced>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d012      	beq.n	80009ca <fsm_traffic_tunning_mode+0x396>
                tuningStatus = RED_ADJ;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <fsm_traffic_tunning_mode+0x3f8>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	601a      	str	r2, [r3, #0]
                clearRoadLed();
 80009aa:	f000 f9f3 	bl	8000d94 <clearRoadLed>
                logNewTime();
 80009ae:	f7ff fda3 	bl	80004f8 <logNewTime>
                settimer1(5, 5);
 80009b2:	2105      	movs	r1, #5
 80009b4:	2005      	movs	r0, #5
 80009b6:	f000 ff4d 	bl	8001854 <settimer1>
                lcd_clear_display();
 80009ba:	f000 fb96 	bl	80010ea <lcd_clear_display>
                HAL_Delay(50);
 80009be:	2032      	movs	r0, #50	; 0x32
 80009c0:	f001 f972 	bl	8001ca8 <HAL_Delay>
                display_timerRed();
 80009c4:	f7ff fde8 	bl	8000598 <display_timerRed>
 80009c8:	e026      	b.n	8000a18 <fsm_traffic_tunning_mode+0x3e4>
            } else if (isButtonShortPressed(0) && isButtonDebounced(0)) {
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f9e8 	bl	8000da0 <isButtonShortPressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d027      	beq.n	8000a26 <fsm_traffic_tunning_mode+0x3f2>
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fd70 	bl	80004bc <isButtonDebounced>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d021      	beq.n	8000a26 <fsm_traffic_tunning_mode+0x3f2>
                // Reset all lights to initial times when button 1 is pressed
                timeRed = initialTimeRed;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <fsm_traffic_tunning_mode+0x3fc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <fsm_traffic_tunning_mode+0x400>)
 80009e8:	6013      	str	r3, [r2, #0]
                timeAmber = initialTimeAmber;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <fsm_traffic_tunning_mode+0x404>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <fsm_traffic_tunning_mode+0x408>)
 80009f0:	6013      	str	r3, [r2, #0]
                timeGreen = initialTimeGreen;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <fsm_traffic_tunning_mode+0x40c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <fsm_traffic_tunning_mode+0x410>)
 80009f8:	6013      	str	r3, [r2, #0]
                logNewTime();  // Send new time information
 80009fa:	f7ff fd7d 	bl	80004f8 <logNewTime>
            	lcd_clear_display();
 80009fe:	f000 fb74 	bl	80010ea <lcd_clear_display>
            	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f001 f950 	bl	8001ca8 <HAL_Delay>
                display_timerAmber();
 8000a08:	f7ff fdfa 	bl	8000600 <display_timerAmber>
                tuningStatus = AMBER_ADJ;  // Keep state GREEN_ADJ
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <fsm_traffic_tunning_mode+0x3f8>)
 8000a0e:	2202      	movs	r2, #2
 8000a10:	601a      	str	r2, [r3, #0]
                clearRoadLed();  // Turn off all lights
 8000a12:	f000 f9bf 	bl	8000d94 <clearRoadLed>
            }
            break;
 8000a16:	e006      	b.n	8000a26 <fsm_traffic_tunning_mode+0x3f2>
 8000a18:	e005      	b.n	8000a26 <fsm_traffic_tunning_mode+0x3f2>
        default:
            break;
 8000a1a:	bf00      	nop
 8000a1c:	e004      	b.n	8000a28 <fsm_traffic_tunning_mode+0x3f4>
            break;
 8000a1e:	bf00      	nop
 8000a20:	e002      	b.n	8000a28 <fsm_traffic_tunning_mode+0x3f4>
            break;
 8000a22:	bf00      	nop
 8000a24:	e000      	b.n	8000a28 <fsm_traffic_tunning_mode+0x3f4>
            break;
 8000a26:	bf00      	nop
    }
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000110 	.word	0x20000110
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000050 	.word	0x20000050
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000054 	.word	0x20000054
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000058 	.word	0x20000058

08000a48 <fsm_switch_mode>:

// ======================= CHUYỂN ĐỔI CHẾ ĐỘ =======================
void fsm_switch_mode(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    if (isButtonLongPressed(1)) {
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f000 f9c1 	bl	8000dd4 <isButtonLongPressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d037      	beq.n	8000ac8 <fsm_switch_mode+0x80>
        if (trafficMode != TUNING_MODE) {
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <fsm_switch_mode+0x84>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b03      	cmp	r3, #3
 8000a5e:	d01f      	beq.n	8000aa0 <fsm_switch_mode+0x58>
            lcd_clear_display();
 8000a60:	f000 fb43 	bl	80010ea <lcd_clear_display>
            HAL_Delay(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f001 f91f 	bl	8001ca8 <HAL_Delay>
            display_timerRed();
 8000a6a:	f7ff fd95 	bl	8000598 <display_timerRed>
            trafficMode = TUNING_MODE;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <fsm_switch_mode+0x84>)
 8000a70:	2203      	movs	r2, #3
 8000a72:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO TUNING MODE#\r\n"), 500);
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <fsm_switch_mode+0x88>)
 8000a76:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <fsm_switch_mode+0x8c>)
 8000a78:	f003 fc1a 	bl	80042b0 <siprintf>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a84:	4913      	ldr	r1, [pc, #76]	; (8000ad4 <fsm_switch_mode+0x8c>)
 8000a86:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <fsm_switch_mode+0x90>)
 8000a88:	f003 f91a 	bl	8003cc0 <HAL_UART_Transmit>
            // TODO: prepare for next mode
            tuningStatus = INIT;
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <fsm_switch_mode+0x94>)
 8000a8e:	220a      	movs	r2, #10
 8000a90:	601a      	str	r2, [r3, #0]
            autoStatus = OFF;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <fsm_switch_mode+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
            manualStatus = OFF;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <fsm_switch_mode+0x9c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
            HAL_Delay(10);
            trafficMode = INIT;
            HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"), 500);
        }
    }
}
 8000a9e:	e013      	b.n	8000ac8 <fsm_switch_mode+0x80>
            lcd_clear_display();
 8000aa0:	f000 fb23 	bl	80010ea <lcd_clear_display>
            HAL_Delay(10);
 8000aa4:	200a      	movs	r0, #10
 8000aa6:	f001 f8ff 	bl	8001ca8 <HAL_Delay>
            trafficMode = INIT;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <fsm_switch_mode+0x84>)
 8000aac:	220a      	movs	r2, #10
 8000aae:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"), 500);
 8000ab0:	490d      	ldr	r1, [pc, #52]	; (8000ae8 <fsm_switch_mode+0xa0>)
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <fsm_switch_mode+0x8c>)
 8000ab4:	f003 fbfc 	bl	80042b0 <siprintf>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ac0:	4904      	ldr	r1, [pc, #16]	; (8000ad4 <fsm_switch_mode+0x8c>)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <fsm_switch_mode+0x90>)
 8000ac4:	f003 f8fc 	bl	8003cc0 <HAL_UART_Transmit>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000048 	.word	0x20000048
 8000ad0:	08004a58 	.word	0x08004a58
 8000ad4:	20000170 	.word	0x20000170
 8000ad8:	20000128 	.word	0x20000128
 8000adc:	20000110 	.word	0x20000110
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	2000010c 	.word	0x2000010c
 8000ae8:	08004a74 	.word	0x08004a74

08000aec <fsm_traffic>:

// ======================= VÒNG LẶP CHÍNH =======================
void fsm_traffic(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    switch (trafficMode) {
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <fsm_traffic+0xb4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b0a      	cmp	r3, #10
 8000af6:	d006      	beq.n	8000b06 <fsm_traffic+0x1a>
 8000af8:	2b0a      	cmp	r3, #10
 8000afa:	dc4e      	bgt.n	8000b9a <fsm_traffic+0xae>
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d046      	beq.n	8000b8e <fsm_traffic+0xa2>
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d047      	beq.n	8000b94 <fsm_traffic+0xa8>
            break;
        case TUNING_MODE:
            fsm_traffic_tunning_mode();
            break;
        default:
            break;
 8000b04:	e049      	b.n	8000b9a <fsm_traffic+0xae>
            if (timeRed != (timeAmber + timeGreen)) {
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <fsm_traffic+0xb8>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <fsm_traffic+0xbc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	441a      	add	r2, r3
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <fsm_traffic+0xc0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d02b      	beq.n	8000b70 <fsm_traffic+0x84>
                trafficMode = ERROR_MODE;
 8000b18:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <fsm_traffic+0xb4>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER ERROR#\r\n"), 500);
 8000b1e:	4924      	ldr	r1, [pc, #144]	; (8000bb0 <fsm_traffic+0xc4>)
 8000b20:	4824      	ldr	r0, [pc, #144]	; (8000bb4 <fsm_traffic+0xc8>)
 8000b22:	f003 fbc5 	bl	80042b0 <siprintf>
 8000b26:	4603      	mov	r3, r0
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b2e:	4921      	ldr	r1, [pc, #132]	; (8000bb4 <fsm_traffic+0xc8>)
 8000b30:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <fsm_traffic+0xcc>)
 8000b32:	f003 f8c5 	bl	8003cc0 <HAL_UART_Transmit>
                lcd_clear_display();
 8000b36:	f000 fad8 	bl	80010ea <lcd_clear_display>
                HAL_Delay(10);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f001 f8b4 	bl	8001ca8 <HAL_Delay>
                lcd_goto_XY(1, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2001      	movs	r0, #1
 8000b44:	f000 fad8 	bl	80010f8 <lcd_goto_XY>
                lcd_send_string("ERROR, TIME IS");
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <fsm_traffic+0xd0>)
 8000b4a:	f000 fab9 	bl	80010c0 <lcd_send_string>
                lcd_goto_XY(2, 0);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2002      	movs	r0, #2
 8000b52:	f000 fad1 	bl	80010f8 <lcd_goto_XY>
                lcd_send_string("NOT EQUAL");
 8000b56:	481a      	ldr	r0, [pc, #104]	; (8000bc0 <fsm_traffic+0xd4>)
 8000b58:	f000 fab2 	bl	80010c0 <lcd_send_string>
                autoStatus = OFF;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <fsm_traffic+0xd8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
                manualStatus = OFF;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <fsm_traffic+0xdc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
                tuningStatus = OFF;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <fsm_traffic+0xe0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e00b      	b.n	8000b88 <fsm_traffic+0x9c>
                trafficMode = AUTO_MODE;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <fsm_traffic+0xb4>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
                autoStatus = INIT;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <fsm_traffic+0xd8>)
 8000b78:	220a      	movs	r2, #10
 8000b7a:	601a      	str	r2, [r3, #0]
                manualStatus = OFF;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <fsm_traffic+0xdc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
                tuningStatus = OFF;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <fsm_traffic+0xe0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
            turnOffAllLED();
 8000b88:	f000 f822 	bl	8000bd0 <turnOffAllLED>
            break;
 8000b8c:	e006      	b.n	8000b9c <fsm_traffic+0xb0>
            fsm_traffic_auto_mode();
 8000b8e:	f7ff faf9 	bl	8000184 <fsm_traffic_auto_mode>
            break;
 8000b92:	e003      	b.n	8000b9c <fsm_traffic+0xb0>
            fsm_traffic_tunning_mode();
 8000b94:	f7ff fd4e 	bl	8000634 <fsm_traffic_tunning_mode>
            break;
 8000b98:	e000      	b.n	8000b9c <fsm_traffic+0xb0>
            break;
 8000b9a:	bf00      	nop
    }
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000048 	.word	0x20000048
 8000ba4:	20000054 	.word	0x20000054
 8000ba8:	20000058 	.word	0x20000058
 8000bac:	20000050 	.word	0x20000050
 8000bb0:	08004a8c 	.word	0x08004a8c
 8000bb4:	20000170 	.word	0x20000170
 8000bb8:	20000128 	.word	0x20000128
 8000bbc:	08004a9c 	.word	0x08004a9c
 8000bc0:	08004aac 	.word	0x08004aac
 8000bc4:	2000004c 	.word	0x2000004c
 8000bc8:	2000010c 	.word	0x2000010c
 8000bcc:	20000110 	.word	0x20000110

08000bd0 <turnOffAllLED>:
 *      Author: Dell
 */

#include "Traffic_Light_FSM.h"

void turnOffAllLED(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED1_B_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <turnOffAllLED+0x20>)
 8000bdc:	f001 fb31 	bl	8002242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <turnOffAllLED+0x24>)
 8000be8:	f001 fb2b 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	40010800 	.word	0x40010800

08000bf8 <turnOnRed1>:

// Turn on RED LED for specified way
void turnOnRed1() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED1_B_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000c02:	4802      	ldr	r0, [pc, #8]	; (8000c0c <turnOnRed1+0x14>)
 8000c04:	f001 fb1d 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <turnOnAmber1>:

// Turn on AMBER LED for specified way
void turnOnAmber1() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, GPIO_PIN_RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2110      	movs	r1, #16
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <turnOnAmber1+0x20>)
 8000c1a:	f001 fb12 	bl	8002242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <turnOnAmber1+0x20>)
 8000c26:	f001 fb0c 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <turnOnGreen1>:

// Turn on GREEN LED for specified way
void turnOnGreen1() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <turnOnGreen1+0x20>)
 8000c40:	f001 faff 	bl	8002242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, GPIO_PIN_SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2110      	movs	r1, #16
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <turnOnGreen1+0x20>)
 8000c4a:	f001 fafa 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010c00 	.word	0x40010c00

08000c58 <turnOnRed2>:
void turnOnRed2() {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin|LED2_B_Pin, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c62:	4802      	ldr	r0, [pc, #8]	; (8000c6c <turnOnRed2+0x14>)
 8000c64:	f001 faed 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40010800 	.word	0x40010800

08000c70 <turnOnAmber2>:

// Turn on AMBER LED for specified way
void turnOnAmber2() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <turnOnAmber2+0x20>)
 8000c7c:	f001 fae1 	bl	8002242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c86:	4802      	ldr	r0, [pc, #8]	; (8000c90 <turnOnAmber2+0x20>)
 8000c88:	f001 fadb 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010800 	.word	0x40010800

08000c94 <turnOnGreen2>:

// Turn on GREEN LED for specified way
void turnOnGreen2() {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <turnOnGreen2+0x20>)
 8000ca0:	f001 facf 	bl	8002242 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000caa:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <turnOnGreen2+0x20>)
 8000cac:	f001 fac9 	bl	8002242 <HAL_GPIO_WritePin>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010800 	.word	0x40010800

08000cb8 <blinkyRed>:
// Blink RED LEDs
void blinkyRed(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    if (timerFlag[5] == 1) {
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <blinkyRed+0x30>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d10e      	bne.n	8000ce2 <blinkyRed+0x2a>
        HAL_GPIO_TogglePin(GPIOA,LED2_B_Pin|LED2_A_Pin);
 8000cc4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000cc8:	4808      	ldr	r0, [pc, #32]	; (8000cec <blinkyRed+0x34>)
 8000cca:	f001 fad2 	bl	8002272 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_A_Pin | LED1_B_Pin);
 8000cce:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <blinkyRed+0x38>)
 8000cd4:	f001 facd 	bl	8002272 <HAL_GPIO_TogglePin>
        settimer1(5, 500);
 8000cd8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000cdc:	2005      	movs	r0, #5
 8000cde:	f000 fdb9 	bl	8001854 <settimer1>
    }
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000244 	.word	0x20000244
 8000cec:	40010800 	.word	0x40010800
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <blinkyAmber>:

// Blink AMBER LEDs
void blinkyAmber(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
    if (timerFlag[7] == 1) {
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <blinkyAmber+0x44>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d119      	bne.n	8000d34 <blinkyAmber+0x40>
        HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2110      	movs	r1, #16
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <blinkyAmber+0x48>)
 8000d06:	f001 fa9c 	bl	8002242 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_B_Pin);
 8000d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <blinkyAmber+0x48>)
 8000d10:	f001 faaf 	bl	8002272 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <blinkyAmber+0x4c>)
 8000d1c:	f001 fa91 	bl	8002242 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, LED2_B_Pin);
 8000d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d24:	4806      	ldr	r0, [pc, #24]	; (8000d40 <blinkyAmber+0x4c>)
 8000d26:	f001 faa4 	bl	8002272 <HAL_GPIO_TogglePin>
        settimer1(7, 500);
 8000d2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f000 fd90 	bl	8001854 <settimer1>
    }
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000244 	.word	0x20000244
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40010800 	.word	0x40010800

08000d44 <blinkyGreen>:

// Blink GREEN LEDs
void blinkyGreen(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    if (timerFlag[6] == 1) {
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <blinkyGreen+0x44>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d119      	bne.n	8000d84 <blinkyGreen+0x40>
        HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <blinkyGreen+0x48>)
 8000d58:	f001 fa73 	bl	8002242 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_A_Pin);
 8000d5c:	2110      	movs	r1, #16
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <blinkyGreen+0x48>)
 8000d60:	f001 fa87 	bl	8002272 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <blinkyGreen+0x4c>)
 8000d6c:	f001 fa69 	bl	8002242 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, LED2_A_Pin);
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <blinkyGreen+0x4c>)
 8000d76:	f001 fa7c 	bl	8002272 <HAL_GPIO_TogglePin>
        settimer1(6, 500);
 8000d7a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d7e:	2006      	movs	r0, #6
 8000d80:	f000 fd68 	bl	8001854 <settimer1>
    }
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000244 	.word	0x20000244
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40010800 	.word	0x40010800

08000d94 <clearRoadLed>:

// Clear all road LEDs
void clearRoadLed(void) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    turnOffAllLED();
 8000d98:	f7ff ff1a 	bl	8000bd0 <turnOffAllLED>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <isButtonShortPressed>:
int TimeOutForKeyPress[NUM_BUTTONS] = {1000};
int button_pressed[NUM_BUTTONS] = {0};
int button_long_pressed[NUM_BUTTONS] = {0};
int button_flag[NUM_BUTTONS] = {0};

int isButtonShortPressed(int button_index){
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    if(button_flag[button_index] == 1){
 8000da8:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <isButtonShortPressed+0x30>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d106      	bne.n	8000dc2 <isButtonShortPressed+0x22>
        button_flag[button_index] = 0;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <isButtonShortPressed+0x30>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2100      	movs	r1, #0
 8000dba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <isButtonShortPressed+0x24>
    }
    return 0;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000100 	.word	0x20000100

08000dd4 <isButtonLongPressed>:

int isButtonLongPressed(int button_index){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    if(button_long_pressed[button_index] == 1){
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <isButtonLongPressed+0x30>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d106      	bne.n	8000df6 <isButtonLongPressed+0x22>
        button_long_pressed[button_index] = 0;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <isButtonLongPressed+0x30>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2100      	movs	r1, #0
 8000dee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <isButtonLongPressed+0x24>
    }
    return 0;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000f4 	.word	0x200000f4

08000e08 <subKeyProcess>:

void subKeyProcess(int button_index) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    switch (button_index) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d008      	beq.n	8000e28 <subKeyProcess+0x20>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	dc08      	bgt.n	8000e2e <subKeyProcess+0x26>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <subKeyProcess+0x24>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b01      	cmp	r3, #1
        case 0:
            break;
        case 1:
            break;
 8000e26:	e002      	b.n	8000e2e <subKeyProcess+0x26>
        case 2:
            break;
 8000e28:	bf00      	nop
 8000e2a:	e000      	b.n	8000e2e <subKeyProcess+0x26>
            break;
 8000e2c:	bf00      	nop
    }
    button_flag[button_index] = 1;
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <subKeyProcess+0x3c>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2101      	movs	r1, #1
 8000e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000100 	.word	0x20000100

08000e48 <getKeyInput>:

void getKeyInput() {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
    KeyReg2[0] = KeyReg1[0];
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <getKeyInput+0x138>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a4c      	ldr	r2, [pc, #304]	; (8000f84 <getKeyInput+0x13c>)
 8000e54:	6013      	str	r3, [r2, #0]
    KeyReg1[0] = KeyReg0[0];
 8000e56:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <getKeyInput+0x140>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <getKeyInput+0x138>)
 8000e5c:	6013      	str	r3, [r2, #0]
    KeyReg2[1] = KeyReg1[1];
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <getKeyInput+0x138>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <getKeyInput+0x13c>)
 8000e64:	6053      	str	r3, [r2, #4]
    KeyReg1[1] = KeyReg0[1];
 8000e66:	4b48      	ldr	r3, [pc, #288]	; (8000f88 <getKeyInput+0x140>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a45      	ldr	r2, [pc, #276]	; (8000f80 <getKeyInput+0x138>)
 8000e6c:	6053      	str	r3, [r2, #4]
    KeyReg2[2] = KeyReg1[2];
 8000e6e:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <getKeyInput+0x138>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	4a44      	ldr	r2, [pc, #272]	; (8000f84 <getKeyInput+0x13c>)
 8000e74:	6093      	str	r3, [r2, #8]
    KeyReg1[2] = KeyReg0[2];
 8000e76:	4b44      	ldr	r3, [pc, #272]	; (8000f88 <getKeyInput+0x140>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	4a41      	ldr	r2, [pc, #260]	; (8000f80 <getKeyInput+0x138>)
 8000e7c:	6093      	str	r3, [r2, #8]

    KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000e7e:	2140      	movs	r1, #64	; 0x40
 8000e80:	4842      	ldr	r0, [pc, #264]	; (8000f8c <getKeyInput+0x144>)
 8000e82:	f001 f9c7 	bl	8002214 <HAL_GPIO_ReadPin>
 8000e86:	4603      	mov	r3, r0
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <getKeyInput+0x140>)
 8000e8c:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000e8e:	2180      	movs	r1, #128	; 0x80
 8000e90:	483f      	ldr	r0, [pc, #252]	; (8000f90 <getKeyInput+0x148>)
 8000e92:	f001 f9bf 	bl	8002214 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <getKeyInput+0x140>)
 8000e9c:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	483a      	ldr	r0, [pc, #232]	; (8000f8c <getKeyInput+0x144>)
 8000ea2:	f001 f9b7 	bl	8002214 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <getKeyInput+0x140>)
 8000eac:	609a      	str	r2, [r3, #8]

    for (int i = 0; i < NUM_BUTTONS; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e05d      	b.n	8000f70 <getKeyInput+0x128>
        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <getKeyInput+0x138>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ebc:	4932      	ldr	r1, [pc, #200]	; (8000f88 <getKeyInput+0x140>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d150      	bne.n	8000f6a <getKeyInput+0x122>
 8000ec8:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <getKeyInput+0x138>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ed0:	492c      	ldr	r1, [pc, #176]	; (8000f84 <getKeyInput+0x13c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d146      	bne.n	8000f6a <getKeyInput+0x122>
            if (KeyReg2[i] != KeyReg3[i]) {
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <getKeyInput+0x13c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ee4:	492b      	ldr	r1, [pc, #172]	; (8000f94 <getKeyInput+0x14c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d017      	beq.n	8000f20 <getKeyInput+0xd8>
                KeyReg3[i] = KeyReg2[i];
 8000ef0:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <getKeyInput+0x13c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ef8:	4926      	ldr	r1, [pc, #152]	; (8000f94 <getKeyInput+0x14c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg3[i] == PRESSED_STATE) {
 8000f00:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <getKeyInput+0x14c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d12e      	bne.n	8000f6a <getKeyInput+0x122>
                    TimeOutForKeyPress[i] = 1000;
 8000f0c:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <getKeyInput+0x150>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    subKeyProcess(i);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff75 	bl	8000e08 <subKeyProcess>
 8000f1e:	e024      	b.n	8000f6a <getKeyInput+0x122>
                }
            } else {
                TimeOutForKeyPress[i]--;
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <getKeyInput+0x150>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	1e5a      	subs	r2, r3, #1
 8000f2a:	491b      	ldr	r1, [pc, #108]	; (8000f98 <getKeyInput+0x150>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimeOutForKeyPress[i] == 0) {
 8000f32:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <getKeyInput+0x150>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d115      	bne.n	8000f6a <getKeyInput+0x122>
                    TimeOutForKeyPress[i] = 1000;
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <getKeyInput+0x150>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (KeyReg3[i] == PRESSED_STATE) {
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <getKeyInput+0x14c>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d109      	bne.n	8000f6a <getKeyInput+0x122>
                        button_long_pressed[i] = 1;
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <getKeyInput+0x154>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        button_flag[i] = 0; // Ensure short press is not set
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <getKeyInput+0x158>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2100      	movs	r1, #0
 8000f66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	dd9e      	ble.n	8000eb4 <getKeyInput+0x6c>
                    }
                }
            }
        }
    }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000018 	.word	0x20000018
 8000f84:	20000024 	.word	0x20000024
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	40010c00 	.word	0x40010c00
 8000f90:	40011000 	.word	0x40011000
 8000f94:	20000030 	.word	0x20000030
 8000f98:	2000003c 	.word	0x2000003c
 8000f9c:	200000f4 	.word	0x200000f4
 8000fa0:	20000100 	.word	0x20000100

08000fa4 <lcd_send_cmd>:
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f023 030f 	bic.w	r3, r3, #15
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	73bb      	strb	r3, [r7, #14]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	f043 030c 	orr.w	r3, r3, #12
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	723b      	strb	r3, [r7, #8]
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	727b      	strb	r3, [r7, #9]
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	f043 030c 	orr.w	r3, r3, #12
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	72bb      	strb	r3, [r7, #10]
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	72fb      	strb	r3, [r7, #11]
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2304      	movs	r3, #4
 8000fee:	2142      	movs	r1, #66	; 0x42
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <lcd_send_cmd+0x5c>)
 8000ff2:	f001 fabd 	bl	8002570 <HAL_I2C_Master_Transmit>
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200001a4 	.word	0x200001a4

08001004 <lcd_send_data>:
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f023 030f 	bic.w	r3, r3, #15
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	73bb      	strb	r3, [r7, #14]
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f043 030d 	orr.w	r3, r3, #13
 8001022:	b2db      	uxtb	r3, r3
 8001024:	723b      	strb	r3, [r7, #8]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	f043 0309 	orr.w	r3, r3, #9
 800102c:	b2db      	uxtb	r3, r3
 800102e:	727b      	strb	r3, [r7, #9]
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	f043 030d 	orr.w	r3, r3, #13
 8001036:	b2db      	uxtb	r3, r3
 8001038:	72bb      	strb	r3, [r7, #10]
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	f043 0309 	orr.w	r3, r3, #9
 8001040:	b2db      	uxtb	r3, r3
 8001042:	72fb      	strb	r3, [r7, #11]
 8001044:	f107 0208 	add.w	r2, r7, #8
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2304      	movs	r3, #4
 800104e:	2142      	movs	r1, #66	; 0x42
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <lcd_send_data+0x5c>)
 8001052:	f001 fa8d 	bl	8002570 <HAL_I2C_Master_Transmit>
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001a4 	.word	0x200001a4

08001064 <lcd_init>:
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
 8001068:	2033      	movs	r0, #51	; 0x33
 800106a:	f7ff ff9b 	bl	8000fa4 <lcd_send_cmd>
 800106e:	2032      	movs	r0, #50	; 0x32
 8001070:	f7ff ff98 	bl	8000fa4 <lcd_send_cmd>
 8001074:	2032      	movs	r0, #50	; 0x32
 8001076:	f000 fe17 	bl	8001ca8 <HAL_Delay>
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f7ff ff92 	bl	8000fa4 <lcd_send_cmd>
 8001080:	2032      	movs	r0, #50	; 0x32
 8001082:	f000 fe11 	bl	8001ca8 <HAL_Delay>
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff ff8c 	bl	8000fa4 <lcd_send_cmd>
 800108c:	2032      	movs	r0, #50	; 0x32
 800108e:	f000 fe0b 	bl	8001ca8 <HAL_Delay>
 8001092:	2006      	movs	r0, #6
 8001094:	f7ff ff86 	bl	8000fa4 <lcd_send_cmd>
 8001098:	2032      	movs	r0, #50	; 0x32
 800109a:	f000 fe05 	bl	8001ca8 <HAL_Delay>
 800109e:	200c      	movs	r0, #12
 80010a0:	f7ff ff80 	bl	8000fa4 <lcd_send_cmd>
 80010a4:	2032      	movs	r0, #50	; 0x32
 80010a6:	f000 fdff 	bl	8001ca8 <HAL_Delay>
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff ff7a 	bl	8000fa4 <lcd_send_cmd>
 80010b0:	2032      	movs	r0, #50	; 0x32
 80010b2:	f000 fdf9 	bl	8001ca8 <HAL_Delay>
 80010b6:	2080      	movs	r0, #128	; 0x80
 80010b8:	f7ff ff74 	bl	8000fa4 <lcd_send_cmd>
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_send_string>:
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	e006      	b.n	80010d8 <lcd_send_string+0x18>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff96 	bl	8001004 <lcd_send_data>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f4      	bne.n	80010ca <lcd_send_string+0xa>
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_clear_display>:
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff58 	bl	8000fa4 <lcd_send_cmd>
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_goto_XY>:
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d108      	bne.n	800111a <lcd_goto_XY+0x22>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	4413      	add	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	337f      	adds	r3, #127	; 0x7f
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e008      	b.n	800112c <lcd_goto_XY+0x34>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	3340      	adds	r3, #64	; 0x40
 8001120:	b2db      	uxtb	r3, r3
 8001122:	b25b      	sxtb	r3, r3
 8001124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001128:	b25b      	sxtb	r3, r3
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff38 	bl	8000fa4 <lcd_send_cmd>
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fd50 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f838 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 f91c 	bl	8001384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800114c:	f000 f8f0 	bl	8001330 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001150:	f000 f874 	bl	800123c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001154:	f000 f8a0 	bl	8001298 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001158:	4814      	ldr	r0, [pc, #80]	; (80011ac <main+0x70>)
 800115a:	f002 f9bf 	bl	80034dc <HAL_TIM_Base_Start_IT>
  lcd_init();
 800115e:	f7ff ff81 	bl	8001064 <lcd_init>
  lcd_clear_display();
 8001162:	f7ff ffc2 	bl	80010ea <lcd_clear_display>
  HAL_Delay(50);
 8001166:	2032      	movs	r0, #50	; 0x32
 8001168:	f000 fd9e 	bl	8001ca8 <HAL_Delay>

  SCH_Init();
 800116c:	f000 f9ea 	bl	8001544 <SCH_Init>
  SCH_Add_Task(fsm_traffic, 50, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	2132      	movs	r1, #50	; 0x32
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <main+0x74>)
 8001176:	f000 f9ff 	bl	8001578 <SCH_Add_Task>
//  SCH_Add_Task(clock_counter_traffic_update, 0, 1);
  SCH_Add_Task(fsm_switch_mode, 50, 1);
 800117a:	2201      	movs	r2, #1
 800117c:	2132      	movs	r1, #50	; 0x32
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <main+0x78>)
 8001180:	f000 f9fa 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_auto_mode(), 50, 1);
 8001184:	f7fe fffe 	bl	8000184 <fsm_traffic_auto_mode>
 8001188:	4603      	mov	r3, r0
 800118a:	2201      	movs	r2, #1
 800118c:	2132      	movs	r1, #50	; 0x32
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f9f2 	bl	8001578 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_tunning_mode(), 50, 1);
 8001194:	f7ff fa4e 	bl	8000634 <fsm_traffic_tunning_mode>
 8001198:	4603      	mov	r3, r0
 800119a:	2201      	movs	r2, #1
 800119c:	2132      	movs	r1, #50	; 0x32
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 f9ea 	bl	8001578 <SCH_Add_Task>
  {
//fsm_traffic_auto_mode();
//fsm_traffic_tunning_mode();
//fsm_switch_mode();
//fsm_traffic();
	  SCH_Dispatch_Tasks();
 80011a4:	f000 fb28 	bl	80017f8 <SCH_Dispatch_Tasks>
 80011a8:	e7fc      	b.n	80011a4 <main+0x68>
 80011aa:	bf00      	nop
 80011ac:	200001f8 	.word	0x200001f8
 80011b0:	08000aed 	.word	0x08000aed
 80011b4:	08000a49 	.word	0x08000a49

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2228      	movs	r2, #40	; 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ff80 	bl	80040cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	2302      	movs	r3, #2
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011ee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fd11 	bl	8002c20 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001204:	f000 f96f 	bl	80014e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2102      	movs	r1, #2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 ff7c 	bl	8003120 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800122e:	f000 f95a 	bl	80014e6 <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3740      	adds	r7, #64	; 0x40
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <MX_I2C1_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_I2C1_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_I2C1_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_I2C1_Init+0x50>)
 800127a:	f001 f835 	bl	80022e8 <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001284:	f000 f92f 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001a4 	.word	0x200001a4
 8001290:	40005400 	.word	0x40005400
 8001294:	000186a0 	.word	0x000186a0

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <MX_TIM2_Init+0x94>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_TIM2_Init+0x94>)
 80012be:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <MX_TIM2_Init+0x94>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_TIM2_Init+0x94>)
 80012cc:	2209      	movs	r2, #9
 80012ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_TIM2_Init+0x94>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <MX_TIM2_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012dc:	4813      	ldr	r0, [pc, #76]	; (800132c <MX_TIM2_Init+0x94>)
 80012de:	f002 f8ad 	bl	800343c <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012e8:	f000 f8fd 	bl	80014e6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <MX_TIM2_Init+0x94>)
 80012fa:	f002 fa31 	bl	8003760 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001304:	f000 f8ef 	bl	80014e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001310:	463b      	mov	r3, r7
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_TIM2_Init+0x94>)
 8001316:	f002 fc13 	bl	8003b40 <HAL_TIMEx_MasterConfigSynchronization>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001320:	f000 f8e1 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200001f8 	.word	0x200001f8

08001330 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_USART2_UART_Init+0x4c>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_USART2_UART_Init+0x50>)
 8001338:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <MX_USART2_UART_Init+0x4c>)
 800133c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001340:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_USART2_UART_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_USART2_UART_Init+0x4c>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USART2_UART_Init+0x4c>)
 8001368:	f002 fc5a 	bl	8003c20 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001372:	f000 f8b8 	bl	80014e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000128 	.word	0x20000128
 8001380:	40004400 	.word	0x40004400

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <MX_GPIO_Init+0x12c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a44      	ldr	r2, [pc, #272]	; (80014b0 <MX_GPIO_Init+0x12c>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a3e      	ldr	r2, [pc, #248]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013b6:	f043 0320 	orr.w	r3, r3, #32
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b3c      	ldr	r3, [pc, #240]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0320 	and.w	r3, r3, #32
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a38      	ldr	r2, [pc, #224]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <MX_GPIO_Init+0x12c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 80013f8:	2200      	movs	r2, #0
 80013fa:	f240 31f2 	movw	r1, #1010	; 0x3f2
 80013fe:	482d      	ldr	r0, [pc, #180]	; (80014b4 <MX_GPIO_Init+0x130>)
 8001400:	f000 ff1f 	bl	8002242 <HAL_GPIO_WritePin>
                          |RED_LED2_Pin|LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_B_Pin|LED1_A_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800140a:	482b      	ldr	r0, [pc, #172]	; (80014b8 <MX_GPIO_Init+0x134>)
 800140c:	f000 ff19 	bl	8002242 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <MX_GPIO_Init+0x138>)
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0310 	add.w	r3, r7, #16
 8001422:	4619      	mov	r1, r3
 8001424:	4826      	ldr	r0, [pc, #152]	; (80014c0 <MX_GPIO_Init+0x13c>)
 8001426:	f000 fd71 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED1_Pin AMBER_LED1_Pin LD2_Pin GREEN_LED1_Pin
                           RED_LED2_Pin LED2_A_Pin LED2_B_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 800142a:	f240 33f2 	movw	r3, #1010	; 0x3f2
 800142e:	613b      	str	r3, [r7, #16]
                          |RED_LED2_Pin|LED2_A_Pin|LED2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <MX_GPIO_Init+0x130>)
 8001444:	f000 fd62 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_B_Pin LED1_A_Pin */
  GPIO_InitStruct.Pin = LED1_B_Pin|LED1_A_Pin;
 8001448:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2302      	movs	r3, #2
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4619      	mov	r1, r3
 8001460:	4815      	ldr	r0, [pc, #84]	; (80014b8 <MX_GPIO_Init+0x134>)
 8001462:	f000 fd53 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146e:	2301      	movs	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4619      	mov	r1, r3
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <MX_GPIO_Init+0x13c>)
 800147a:	f000 fd47 	bl	8001f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON1_Pin;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001486:	2301      	movs	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <MX_GPIO_Init+0x134>)
 8001492:	f000 fd3b 	bl	8001f0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2028      	movs	r0, #40	; 0x28
 800149c:	f000 fcff 	bl	8001e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a0:	2028      	movs	r0, #40	; 0x28
 80014a2:	f000 fd18 	bl	8001ed6 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010800 	.word	0x40010800
 80014b8:	40010c00 	.word	0x40010c00
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40011000 	.word	0x40011000

080014c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d101      	bne.n	80014da <HAL_TIM_PeriodElapsedCallback+0x16>
    timerRun(); // G�?i hàm cập nhật bộ đếm th�?i gian của bạn
 80014d6:	f000 f9d5 	bl	8001884 <timerRun>
  }
  getKeyInput();
 80014da:	f7ff fcb5 	bl	8000e48 <getKeyInput>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ea:	b672      	cpsid	i
}
 80014ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ee:	e7fe      	b.n	80014ee <Error_Handler+0x8>

080014f0 <Add_Node>:
};

struct container* container;


struct sTask* Add_Node(struct sTask** curr, void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
    struct sTask *temp = (struct sTask*)malloc(sizeof(struct sTask));
 80014fe:	2010      	movs	r0, #16
 8001500:	f002 fddc 	bl	80040bc <malloc>
 8001504:	4603      	mov	r3, r0
 8001506:	617b      	str	r3, [r7, #20]
    temp -> pTask = pFunction;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	601a      	str	r2, [r3, #0]
    temp -> Delay = DELAY;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]
    temp -> Period = PERIOD;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	609a      	str	r2, [r3, #8]
    if (curr == NULL || *curr == NULL) {
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <Add_Node+0x38>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <Add_Node+0x40>
        temp -> next = temp;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	e004      	b.n	800153a <Add_Node+0x4a>
    }
    else {
        temp -> next = (*curr) -> next;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	60da      	str	r2, [r3, #12]
    }
    return temp;
 800153a:	697b      	ldr	r3, [r7, #20]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <SCH_Init>:

void SCH_Init(void) {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    container = (struct container*)malloc(sizeof(struct container));
 8001548:	200c      	movs	r0, #12
 800154a:	f002 fdb7 	bl	80040bc <malloc>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SCH_Init+0x30>)
 8001554:	601a      	str	r2, [r3, #0]
	container -> tail = NULL;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <SCH_Init+0x30>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
	container -> numSlot = 0;
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SCH_Init+0x30>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
	container -> emptySlot = 0;
 8001566:	4b03      	ldr	r3, [pc, #12]	; (8001574 <SCH_Init+0x30>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000240 	.word	0x20000240

08001578 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	// container empty
	if (container -> tail == NULL) {
 8001584:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <SCH_Add_Task+0x36>
		container -> tail = Add_Node(NULL, pFunction, DELAY, PERIOD);
 800158e:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001590:	681c      	ldr	r4, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff ffa9 	bl	80014f0 <Add_Node>
 800159e:	4603      	mov	r3, r0
 80015a0:	6023      	str	r3, [r4, #0]
		(container -> numSlot)++;
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <SCH_Add_Task+0x1c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	3201      	adds	r2, #1
 80015aa:	605a      	str	r2, [r3, #4]
			}
			temp = temp -> next;
		}
	}

}
 80015ac:	e0c4      	b.n	8001738 <SCH_Add_Task+0x1c0>
		struct sTask* temp = container -> tail;
 80015ae:	4b64      	ldr	r3, [pc, #400]	; (8001740 <SCH_Add_Task+0x1c8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	617b      	str	r3, [r7, #20]
		uint32_t sumDelay = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t newDelay = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < container -> numSlot; i++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	623b      	str	r3, [r7, #32]
 80015c2:	e0b1      	b.n	8001728 <SCH_Add_Task+0x1b0>
			sumDelay = sumDelay + temp -> next -> Delay;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	4413      	add	r3, r2
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
			if (sumDelay > DELAY) {
 80015d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d965      	bls.n	80016a4 <SCH_Add_Task+0x12c>
				newDelay = DELAY - (sumDelay - temp -> next -> Delay);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4413      	add	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
				temp -> next -> Delay = sumDelay - DELAY;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	1a8a      	subs	r2, r1, r2
 80015f2:	605a      	str	r2, [r3, #4]
				if (container -> emptySlot == 0) {
 80015f4:	4b52      	ldr	r3, [pc, #328]	; (8001740 <SCH_Add_Task+0x1c8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <SCH_Add_Task+0xa6>
					temp -> next = Add_Node(&temp, pFunction, newDelay, PERIOD);
 80015fe:	697c      	ldr	r4, [r7, #20]
 8001600:	f107 0014 	add.w	r0, r7, #20
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	f7ff ff71 	bl	80014f0 <Add_Node>
 800160e:	4603      	mov	r3, r0
 8001610:	60e3      	str	r3, [r4, #12]
					(container -> numSlot)++;
 8001612:	4b4b      	ldr	r3, [pc, #300]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	3201      	adds	r2, #1
 800161a:	605a      	str	r2, [r3, #4]
                break;
 800161c:	e08c      	b.n	8001738 <SCH_Add_Task+0x1c0>
					container -> tail -> pTask = pFunction;
 800161e:	4b48      	ldr	r3, [pc, #288]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	601a      	str	r2, [r3, #0]
					container -> tail -> Delay = newDelay;
 8001628:	4b45      	ldr	r3, [pc, #276]	; (8001740 <SCH_Add_Task+0x1c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	605a      	str	r2, [r3, #4]
					container -> tail -> Period = PERIOD;
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	609a      	str	r2, [r3, #8]
					struct sTask *newTail = temp -> next;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 8001642:	e002      	b.n	800164a <SCH_Add_Task+0xd2>
						newTail = newTail -> next;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d1f5      	bne.n	8001644 <SCH_Add_Task+0xcc>
					if (temp == container -> tail) container -> tail = newTail;
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <SCH_Add_Task+0x1c8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	d104      	bne.n	800166e <SCH_Add_Task+0xf6>
 8001664:	4b36      	ldr	r3, [pc, #216]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e014      	b.n	8001698 <SCH_Add_Task+0x120>
						newTail -> next = container -> tail -> next;
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	60da      	str	r2, [r3, #12]
						container -> tail -> next = temp -> next;
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <SCH_Add_Task+0x1c8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68d2      	ldr	r2, [r2, #12]
 8001684:	60da      	str	r2, [r3, #12]
						temp -> next = container -> tail;
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	60da      	str	r2, [r3, #12]
						container -> tail = newTail;
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	601a      	str	r2, [r3, #0]
                    (container -> emptySlot)--;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <SCH_Add_Task+0x1c8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	3a01      	subs	r2, #1
 80016a0:	609a      	str	r2, [r3, #8]
                break;
 80016a2:	e049      	b.n	8001738 <SCH_Add_Task+0x1c0>
                if (temp -> next -> pTask == 0x0000) {
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d113      	bne.n	80016d6 <SCH_Add_Task+0x15e>
					temp -> next -> pTask = pFunction;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]
					temp -> next -> Delay = DELAY - sumDelay;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	68b9      	ldr	r1, [r7, #8]
 80016bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016be:	1a8a      	subs	r2, r1, r2
 80016c0:	605a      	str	r2, [r3, #4]
					temp -> next -> Period = PERIOD;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]
                    (container -> emptySlot)--;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <SCH_Add_Task+0x1c8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	3a01      	subs	r2, #1
 80016d2:	609a      	str	r2, [r3, #8]
					break;
 80016d4:	e030      	b.n	8001738 <SCH_Add_Task+0x1c0>
					if (temp -> next == container -> tail) {
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <SCH_Add_Task+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d11b      	bne.n	800171c <SCH_Add_Task+0x1a4>
						container -> tail -> next = Add_Node(&(container -> tail), pFunction, DELAY - sumDelay, PERIOD);
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <SCH_Add_Task+0x1c8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	1ad2      	subs	r2, r2, r3
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <SCH_Add_Task+0x1c8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681c      	ldr	r4, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68f9      	ldr	r1, [r7, #12]
 80016fa:	f7ff fef9 	bl	80014f0 <Add_Node>
 80016fe:	4603      	mov	r3, r0
 8001700:	60e3      	str	r3, [r4, #12]
						container -> tail = container -> tail -> next;
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <SCH_Add_Task+0x1c8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d2      	ldr	r2, [r2, #12]
 800170e:	601a      	str	r2, [r3, #0]
						(container -> numSlot)++;
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <SCH_Add_Task+0x1c8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	3201      	adds	r2, #1
 8001718:	605a      	str	r2, [r3, #4]
						break;
 800171a:	e00d      	b.n	8001738 <SCH_Add_Task+0x1c0>
			temp = temp -> next;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < container -> numSlot; i++) {
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	3301      	adds	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SCH_Add_Task+0x1c8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	6a3a      	ldr	r2, [r7, #32]
 8001730:	429a      	cmp	r2, r3
 8001732:	f6ff af47 	blt.w	80015c4 <SCH_Add_Task+0x4c>
}
 8001736:	e7ff      	b.n	8001738 <SCH_Add_Task+0x1c0>
 8001738:	bf00      	nop
 800173a:	372c      	adds	r7, #44	; 0x2c
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	20000240 	.word	0x20000240

08001744 <SCH_Delete_Task>:

void SCH_Delete_Task(struct sTask** preDel) {
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    struct sTask* del = (*preDel) -> next;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	60fb      	str	r3, [r7, #12]
    if (del != container -> tail) del -> next -> Delay += del -> Delay;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <SCH_Delete_Task+0xb0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d008      	beq.n	8001772 <SCH_Delete_Task+0x2e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	440a      	add	r2, r1
 8001770:	605a      	str	r2, [r3, #4]
	del -> pTask = 0x0000;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
	del -> Delay = 0;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	605a      	str	r2, [r3, #4]
	del -> Period = 0;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
	if (*preDel == container -> tail)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <SCH_Delete_Task+0xb0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d107      	bne.n	80017a2 <SCH_Delete_Task+0x5e>
		container -> tail = container -> tail -> next;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <SCH_Delete_Task+0xb0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <SCH_Delete_Task+0xb0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68d2      	ldr	r2, [r2, #12]
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e01e      	b.n	80017e0 <SCH_Delete_Task+0x9c>
	else {
		if (del -> next -> pTask != 0 && del != container -> tail) {
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <SCH_Delete_Task+0x9c>
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <SCH_Delete_Task+0xb0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d013      	beq.n	80017e0 <SCH_Delete_Task+0x9c>
			(*preDel) -> next = del -> next;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	68d2      	ldr	r2, [r2, #12]
 80017c0:	60da      	str	r2, [r3, #12]
			del -> next = container -> tail -> next;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <SCH_Delete_Task+0xb0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	60da      	str	r2, [r3, #12]
			container -> tail -> next = del;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <SCH_Delete_Task+0xb0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	60da      	str	r2, [r3, #12]
			container -> tail = del;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SCH_Delete_Task+0xb0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	601a      	str	r2, [r3, #0]
		}
	}
	(container -> emptySlot)++;
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SCH_Delete_Task+0xb0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	3201      	adds	r2, #1
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000240 	.word	0x20000240

080017f8 <SCH_Dispatch_Tasks>:
			(container -> tail -> next -> Delay)--;
	}
}


void SCH_Dispatch_Tasks(void) {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
	while (container -> tail -> next -> Delay <= 0) {
 80017fe:	e01b      	b.n	8001838 <SCH_Dispatch_Tasks+0x40>
		(*(container -> tail -> next -> pTask))();
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <SCH_Dispatch_Tasks+0x58>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4798      	blx	r3
		struct sTask temp = *(container -> tail -> next);
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <SCH_Dispatch_Tasks+0x58>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	463c      	mov	r4, r7
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task(&(container -> tail));
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <SCH_Dispatch_Tasks+0x58>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff8f 	bl	8001744 <SCH_Delete_Task>
		if (temp.Period != 0) {
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fea0 	bl	8001578 <SCH_Add_Task>
	while (container -> tail -> next -> Delay <= 0) {
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SCH_Dispatch_Tasks+0x58>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0dc      	beq.n	8001800 <SCH_Dispatch_Tasks+0x8>
		}
	}
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}
 8001850:	20000240 	.word	0x20000240

08001854 <settimer1>:
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	4907      	ldr	r1, [pc, #28]	; (800187c <settimer1+0x28>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <settimer1+0x2c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2100      	movs	r1, #0
 800186e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000244 	.word	0x20000244

08001884 <timerRun>:
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	2300      	movs	r3, #0
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	e01c      	b.n	80018ca <timerRun+0x46>
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <timerRun+0x58>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	2b00      	cmp	r3, #0
 800189a:	dd08      	ble.n	80018ae <timerRun+0x2a>
 800189c:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <timerRun+0x58>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	490d      	ldr	r1, [pc, #52]	; (80018dc <timerRun+0x58>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <timerRun+0x58>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	dc04      	bgt.n	80018c4 <timerRun+0x40>
 80018ba:	4a09      	ldr	r2, [pc, #36]	; (80018e0 <timerRun+0x5c>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2101      	movs	r1, #1
 80018c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3301      	adds	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b09      	cmp	r3, #9
 80018ce:	dddf      	ble.n	8001890 <timerRun+0xc>
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	2000026c 	.word	0x2000026c
 80018e0:	20000244 	.word	0x20000244

080018e4 <HAL_MspInit>:
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_MspInit+0x5c>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_MspInit+0x5c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_MspInit+0x5c>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <HAL_MspInit+0x5c>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_MspInit+0x5c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <HAL_MspInit+0x5c>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_MspInit+0x60>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_MspInit+0x60>)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6053      	str	r3, [r2, #4]
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	40010000 	.word	0x40010000

08001948 <HAL_I2C_MspInit>:
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_I2C_MspInit+0x90>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d132      	bne.n	80019ce <HAL_I2C_MspInit+0x86>
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_I2C_MspInit+0x94>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_I2C_MspInit+0x94>)
 800196e:	f043 0308 	orr.w	r3, r3, #8
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_I2C_MspInit+0x94>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	2312      	movs	r3, #18
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	2303      	movs	r3, #3
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <HAL_I2C_MspInit+0x98>)
 8001996:	f000 fab9 	bl	8001f0c <HAL_GPIO_Init>
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_I2C_MspInit+0x9c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	4a0c      	ldr	r2, [pc, #48]	; (80019e4 <HAL_I2C_MspInit+0x9c>)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	6053      	str	r3, [r2, #4]
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_I2C_MspInit+0x94>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_I2C_MspInit+0x94>)
 80019bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c0:	61d3      	str	r3, [r2, #28]
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_I2C_MspInit+0x94>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40005400 	.word	0x40005400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010c00 	.word	0x40010c00
 80019e4:	40010000 	.word	0x40010000

080019e8 <HAL_TIM_Base_MspInit>:
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f8:	d113      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x3a>
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_TIM_Base_MspInit+0x44>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_TIM_Base_MspInit+0x44>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_TIM_Base_MspInit+0x44>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	201c      	movs	r0, #28
 8001a18:	f000 fa41 	bl	8001e9e <HAL_NVIC_SetPriority>
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f000 fa5a 	bl	8001ed6 <HAL_NVIC_EnableIRQ>
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_UART_MspInit>:
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <HAL_UART_MspInit+0x70>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d123      	bne.n	8001a98 <HAL_UART_MspInit+0x68>
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0x74>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	4a13      	ldr	r2, [pc, #76]	; (8001aa4 <HAL_UART_MspInit+0x74>)
 8001a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5a:	61d3      	str	r3, [r2, #28]
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_UART_MspInit+0x74>)
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_UART_MspInit+0x74>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_UART_MspInit+0x74>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_UART_MspInit+0x74>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	230c      	movs	r3, #12
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	2302      	movs	r3, #2
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0x78>)
 8001a94:	f000 fa3a 	bl	8001f0c <HAL_GPIO_Init>
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <NMI_Handler>:
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	f000 f8bd 	bl	8001c70 <HAL_IncTick>
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <TIM2_IRQHandler>:
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f001 fd3d 	bl	8003580 <HAL_TIM_IRQHandler>
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200001f8 	.word	0x200001f8

08001b10 <EXTI15_10_IRQHandler>:
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b18:	f000 fbc4 	bl	80022a4 <HAL_GPIO_EXTI_IRQHandler>
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_sbrk>:
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
 8001b50:	f002 fa8a 	bl	8004068 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20005000 	.word	0x20005000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	2000011c 	.word	0x2000011c
 8001b88:	200002a8 	.word	0x200002a8

08001b8c <SystemInit>:
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <Reset_Handler>:
 8001b98:	f7ff fff8 	bl	8001b8c <SystemInit>
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <LoopFillZerobss+0xe>)
 8001b9e:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x16>)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:
 8001ba6:	58d4      	ldr	r4, [r2, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:
 8001bac:	18c4      	adds	r4, r0, r3
 8001bae:	428c      	cmp	r4, r1
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <LoopFillZerobss+0x1a>)
 8001bb4:	4c09      	ldr	r4, [pc, #36]	; (8001bdc <LoopFillZerobss+0x1e>)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>
 8001bc2:	f002 fa57 	bl	8004074 <__libc_init_array>
 8001bc6:	f7ff fab9 	bl	800113c <main>
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	200000cc 	.word	0x200000cc
 8001bd4:	08004b20 	.word	0x08004b20
 8001bd8:	200000cc 	.word	0x200000cc
 8001bdc:	200002a8 	.word	0x200002a8

08001be0 <ADC1_2_IRQHandler>:
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x28>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x28>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f947 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>
 8001c00:	f7ff fe70 	bl	80018e4 <HAL_MspInit>
 8001c04:	2300      	movs	r3, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_InitTick>:
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f95f 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f927 	bl	8001e9e <HAL_NVIC_SetPriority>
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000005c 	.word	0x2000005c
 8001c68:	20000064 	.word	0x20000064
 8001c6c:	20000060 	.word	0x20000060

08001c70 <HAL_IncTick>:
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x20>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_IncTick+0x20>)
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000064 	.word	0x20000064
 8001c90:	20000294 	.word	0x20000294

08001c94 <HAL_GetTick>:
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_GetTick+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000294 	.word	0x20000294

08001ca8 <HAL_Delay>:
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d005      	beq.n	8001cce <HAL_Delay+0x26>
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_Delay+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	bf00      	nop
 8001cd0:	f7ff ffe0 	bl	8001c94 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8f7      	bhi.n	8001cd0 <HAL_Delay+0x28>
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000064 	.word	0x20000064

08001cf0 <__NVIC_SetPriorityGrouping>:
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <__NVIC_EnableIRQ+0x34>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Config>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f7ff ff90 	bl	8001d8c <__NVIC_SetPriority>
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff2d 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	f7ff ff42 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff90 	bl	8001de0 <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5f 	bl	8001d8c <__NVIC_SetPriority>
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_EnableIRQ>:
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff35 	bl	8001d54 <__NVIC_EnableIRQ>
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ffa2 	bl	8001e44 <SysTick_Config>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_GPIO_Init>:
 8001f0c:	b480      	push	{r7}
 8001f0e:	b08b      	sub	sp, #44	; 0x2c
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	623b      	str	r3, [r7, #32]
 8001f1e:	e169      	b.n	80021f4 <HAL_GPIO_Init+0x2e8>
 8001f20:	2201      	movs	r2, #1
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 8158 	bne.w	80021ee <HAL_GPIO_Init+0x2e2>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4a9a      	ldr	r2, [pc, #616]	; (80021ac <HAL_GPIO_Init+0x2a0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d05e      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f48:	4a98      	ldr	r2, [pc, #608]	; (80021ac <HAL_GPIO_Init+0x2a0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d875      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f4e:	4a98      	ldr	r2, [pc, #608]	; (80021b0 <HAL_GPIO_Init+0x2a4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d058      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f54:	4a96      	ldr	r2, [pc, #600]	; (80021b0 <HAL_GPIO_Init+0x2a4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d86f      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f5a:	4a96      	ldr	r2, [pc, #600]	; (80021b4 <HAL_GPIO_Init+0x2a8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d052      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f60:	4a94      	ldr	r2, [pc, #592]	; (80021b4 <HAL_GPIO_Init+0x2a8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d869      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f66:	4a94      	ldr	r2, [pc, #592]	; (80021b8 <HAL_GPIO_Init+0x2ac>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04c      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f6c:	4a92      	ldr	r2, [pc, #584]	; (80021b8 <HAL_GPIO_Init+0x2ac>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d863      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f72:	4a92      	ldr	r2, [pc, #584]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d046      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001f78:	4a90      	ldr	r2, [pc, #576]	; (80021bc <HAL_GPIO_Init+0x2b0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d85d      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d82a      	bhi.n	8001fd8 <HAL_GPIO_Init+0xcc>
 8001f82:	2b12      	cmp	r3, #18
 8001f84:	d859      	bhi.n	800203a <HAL_GPIO_Init+0x12e>
 8001f86:	a201      	add	r2, pc, #4	; (adr r2, 8001f8c <HAL_GPIO_Init+0x80>)
 8001f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8c:	08002007 	.word	0x08002007
 8001f90:	08001fe1 	.word	0x08001fe1
 8001f94:	08001ff3 	.word	0x08001ff3
 8001f98:	08002035 	.word	0x08002035
 8001f9c:	0800203b 	.word	0x0800203b
 8001fa0:	0800203b 	.word	0x0800203b
 8001fa4:	0800203b 	.word	0x0800203b
 8001fa8:	0800203b 	.word	0x0800203b
 8001fac:	0800203b 	.word	0x0800203b
 8001fb0:	0800203b 	.word	0x0800203b
 8001fb4:	0800203b 	.word	0x0800203b
 8001fb8:	0800203b 	.word	0x0800203b
 8001fbc:	0800203b 	.word	0x0800203b
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	0800203b 	.word	0x0800203b
 8001fc8:	0800203b 	.word	0x0800203b
 8001fcc:	0800203b 	.word	0x0800203b
 8001fd0:	08001fe9 	.word	0x08001fe9
 8001fd4:	08001ffd 	.word	0x08001ffd
 8001fd8:	4a79      	ldr	r2, [pc, #484]	; (80021c0 <HAL_GPIO_Init+0x2b4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0xfa>
 8001fde:	e02c      	b.n	800203a <HAL_GPIO_Init+0x12e>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	623b      	str	r3, [r7, #32]
 8001fe6:	e029      	b.n	800203c <HAL_GPIO_Init+0x130>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	3304      	adds	r3, #4
 8001fee:	623b      	str	r3, [r7, #32]
 8001ff0:	e024      	b.n	800203c <HAL_GPIO_Init+0x130>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	e01f      	b.n	800203c <HAL_GPIO_Init+0x130>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	330c      	adds	r3, #12
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	e01a      	b.n	800203c <HAL_GPIO_Init+0x130>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_GPIO_Init+0x108>
 800200e:	2304      	movs	r3, #4
 8002010:	623b      	str	r3, [r7, #32]
 8002012:	e013      	b.n	800203c <HAL_GPIO_Init+0x130>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_GPIO_Init+0x11c>
 800201c:	2308      	movs	r3, #8
 800201e:	623b      	str	r3, [r7, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	e009      	b.n	800203c <HAL_GPIO_Init+0x130>
 8002028:	2308      	movs	r3, #8
 800202a:	623b      	str	r3, [r7, #32]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	615a      	str	r2, [r3, #20]
 8002032:	e003      	b.n	800203c <HAL_GPIO_Init+0x130>
 8002034:	2300      	movs	r3, #0
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	e000      	b.n	800203c <HAL_GPIO_Init+0x130>
 800203a:	bf00      	nop
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2bff      	cmp	r3, #255	; 0xff
 8002040:	d801      	bhi.n	8002046 <HAL_GPIO_Init+0x13a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	e001      	b.n	800204a <HAL_GPIO_Init+0x13e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3304      	adds	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d802      	bhi.n	8002058 <HAL_GPIO_Init+0x14c>
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	e002      	b.n	800205e <HAL_GPIO_Init+0x152>
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	3b08      	subs	r3, #8
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	210f      	movs	r1, #15
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	6a39      	ldr	r1, [r7, #32]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	431a      	orrs	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80b1 	beq.w	80021ee <HAL_GPIO_Init+0x2e2>
 800208c:	4b4d      	ldr	r3, [pc, #308]	; (80021c4 <HAL_GPIO_Init+0x2b8>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a4c      	ldr	r2, [pc, #304]	; (80021c4 <HAL_GPIO_Init+0x2b8>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_GPIO_Init+0x2b8>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	4a48      	ldr	r2, [pc, #288]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <HAL_GPIO_Init+0x2c0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <HAL_GPIO_Init+0x1ec>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3f      	ldr	r2, [pc, #252]	; (80021d0 <HAL_GPIO_Init+0x2c4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00d      	beq.n	80020f4 <HAL_GPIO_Init+0x1e8>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <HAL_GPIO_Init+0x2c8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d007      	beq.n	80020f0 <HAL_GPIO_Init+0x1e4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3d      	ldr	r2, [pc, #244]	; (80021d8 <HAL_GPIO_Init+0x2cc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d101      	bne.n	80020ec <HAL_GPIO_Init+0x1e0>
 80020e8:	2303      	movs	r3, #3
 80020ea:	e006      	b.n	80020fa <HAL_GPIO_Init+0x1ee>
 80020ec:	2304      	movs	r3, #4
 80020ee:	e004      	b.n	80020fa <HAL_GPIO_Init+0x1ee>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e002      	b.n	80020fa <HAL_GPIO_Init+0x1ee>
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_GPIO_Init+0x1ee>
 80020f8:	2300      	movs	r3, #0
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	f002 0203 	and.w	r2, r2, #3
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	4093      	lsls	r3, r2
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	492f      	ldr	r1, [pc, #188]	; (80021c8 <HAL_GPIO_Init+0x2bc>)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x226>
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	492c      	ldr	r1, [pc, #176]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x234>
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	4928      	ldr	r1, [pc, #160]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800213c:	4013      	ands	r3, r2
 800213e:	608b      	str	r3, [r1, #8]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x24e>
 800214c:	4b23      	ldr	r3, [pc, #140]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	4922      	ldr	r1, [pc, #136]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	60cb      	str	r3, [r1, #12]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x25c>
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	491e      	ldr	r1, [pc, #120]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002164:	4013      	ands	r3, r2
 8002166:	60cb      	str	r3, [r1, #12]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <HAL_GPIO_Init+0x276>
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4918      	ldr	r1, [pc, #96]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x284>
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	43db      	mvns	r3, r3
 800218a:	4914      	ldr	r1, [pc, #80]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800218c:	4013      	ands	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d021      	beq.n	80021e0 <HAL_GPIO_Init+0x2d4>
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	490e      	ldr	r1, [pc, #56]	; (80021dc <HAL_GPIO_Init+0x2d0>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
 80021a8:	e021      	b.n	80021ee <HAL_GPIO_Init+0x2e2>
 80021aa:	bf00      	nop
 80021ac:	10320000 	.word	0x10320000
 80021b0:	10310000 	.word	0x10310000
 80021b4:	10220000 	.word	0x10220000
 80021b8:	10210000 	.word	0x10210000
 80021bc:	10120000 	.word	0x10120000
 80021c0:	10110000 	.word	0x10110000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40010800 	.word	0x40010800
 80021d0:	40010c00 	.word	0x40010c00
 80021d4:	40011000 	.word	0x40011000
 80021d8:	40011400 	.word	0x40011400
 80021dc:	40010400 	.word	0x40010400
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <HAL_GPIO_Init+0x304>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	4909      	ldr	r1, [pc, #36]	; (8002210 <HAL_GPIO_Init+0x304>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	600b      	str	r3, [r1, #0]
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	3301      	adds	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f47f ae8e 	bne.w	8001f20 <HAL_GPIO_Init+0x14>
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	372c      	adds	r7, #44	; 0x2c
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	40010400 	.word	0x40010400

08002214 <HAL_GPIO_ReadPin>:
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_GPIO_ReadPin+0x1e>
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e001      	b.n	8002236 <HAL_GPIO_ReadPin+0x22>
 8002232:	2300      	movs	r3, #0
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <HAL_GPIO_WritePin>:
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	807b      	strh	r3, [r7, #2]
 800224e:	4613      	mov	r3, r2
 8002250:	707b      	strb	r3, [r7, #1]
 8002252:	787b      	ldrb	r3, [r7, #1]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_WritePin+0x1e>
 8002258:	887a      	ldrh	r2, [r7, #2]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	e003      	b.n	8002268 <HAL_GPIO_WritePin+0x26>
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	041a      	lsls	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_GPIO_TogglePin>:
 8002272:	b480      	push	{r7}
 8002274:	b085      	sub	sp, #20
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	807b      	strh	r3, [r7, #2]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	887a      	ldrh	r2, [r7, #2]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	041a      	lsls	r2, r3, #16
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43d9      	mvns	r1, r3
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	400b      	ands	r3, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_EXTI_IRQHandler>:
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	80fb      	strh	r3, [r7, #6]
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	6153      	str	r3, [r2, #20]
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f806 	bl	80022d4 <HAL_GPIO_EXTI_Callback>
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_EXTI_Callback>:
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_I2C_Init>:
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Init+0x12>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e12b      	b.n	8002552 <HAL_I2C_Init+0x26a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_I2C_Init+0x2c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fb1a 	bl	8001948 <HAL_I2C_MspInit>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f001 f830 	bl	80033b0 <HAL_RCC_GetPCLK1Freq>
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a81      	ldr	r2, [pc, #516]	; (800255c <HAL_I2C_Init+0x274>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d807      	bhi.n	800236c <HAL_I2C_Init+0x84>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a80      	ldr	r2, [pc, #512]	; (8002560 <HAL_I2C_Init+0x278>)
 8002360:	4293      	cmp	r3, r2
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e006      	b.n	800237a <HAL_I2C_Init+0x92>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a7d      	ldr	r2, [pc, #500]	; (8002564 <HAL_I2C_Init+0x27c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Init+0x9a>
 800237e:	2301      	movs	r3, #1
 8002380:	e0e7      	b.n	8002552 <HAL_I2C_Init+0x26a>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a78      	ldr	r2, [pc, #480]	; (8002568 <HAL_I2C_Init+0x280>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0c9b      	lsrs	r3, r3, #18
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a6a      	ldr	r2, [pc, #424]	; (800255c <HAL_I2C_Init+0x274>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d802      	bhi.n	80023bc <HAL_I2C_Init+0xd4>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3301      	adds	r3, #1
 80023ba:	e009      	b.n	80023d0 <HAL_I2C_Init+0xe8>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_I2C_Init+0x284>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	3301      	adds	r3, #1
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6213      	str	r3, [r2, #32]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	495c      	ldr	r1, [pc, #368]	; (800255c <HAL_I2C_Init+0x274>)
 80023ec:	428b      	cmp	r3, r1
 80023ee:	d819      	bhi.n	8002424 <HAL_I2C_Init+0x13c>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e59      	subs	r1, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002404:	400b      	ands	r3, r1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_I2C_Init+0x138>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e59      	subs	r1, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fbb1 f3f3 	udiv	r3, r1, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241e:	e051      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 8002420:	2304      	movs	r3, #4
 8002422:	e04f      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d111      	bne.n	8002450 <HAL_I2C_Init+0x168>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e012      	b.n	8002476 <HAL_I2C_Init+0x18e>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	0099      	lsls	r1, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	fbb0 f3f3 	udiv	r3, r0, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x196>
 800247a:	2301      	movs	r3, #1
 800247c:	e022      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10e      	bne.n	80024a4 <HAL_I2C_Init+0x1bc>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e58      	subs	r0, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	440b      	add	r3, r1
 8002494:	fbb0 f3f3 	udiv	r3, r0, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a2:	e00f      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e58      	subs	r0, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	0099      	lsls	r1, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	6809      	ldr	r1, [r1, #0]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61cb      	str	r3, [r1, #28]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6911      	ldr	r1, [r2, #16]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68d2      	ldr	r2, [r2, #12]
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	430b      	orrs	r3, r1
 8002506:	6093      	str	r3, [r2, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	2300      	movs	r3, #0
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	000186a0 	.word	0x000186a0
 8002560:	001e847f 	.word	0x001e847f
 8002564:	003d08ff 	.word	0x003d08ff
 8002568:	431bde83 	.word	0x431bde83
 800256c:	10624dd3 	.word	0x10624dd3

08002570 <HAL_I2C_Master_Transmit>:
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
 8002580:	4613      	mov	r3, r2
 8002582:	813b      	strh	r3, [r7, #8]
 8002584:	f7ff fb86 	bl	8001c94 <HAL_GetTick>
 8002588:	6178      	str	r0, [r7, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	f040 80e0 	bne.w	8002758 <HAL_I2C_Master_Transmit+0x1e8>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2319      	movs	r3, #25
 800259e:	2201      	movs	r2, #1
 80025a0:	4970      	ldr	r1, [pc, #448]	; (8002764 <HAL_I2C_Master_Transmit+0x1f4>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f964 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x42>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0d3      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2C_Master_Transmit+0x50>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0cc      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d007      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x76>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2221      	movs	r2, #33	; 0x21
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2210      	movs	r2, #16
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	893a      	ldrh	r2, [r7, #8]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <HAL_I2C_Master_Transmit+0x1f8>)
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f89c 	bl	800276c <I2C_MasterRequestWrite>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Master_Transmit+0xce>
 800263a:	2301      	movs	r3, #1
 800263c:	e08d      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	e066      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1b4>
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa22 	bl	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x112>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <HAL_I2C_Master_Transmit+0x10e>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	611a      	str	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_I2C_Master_Transmit+0x188>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d017      	beq.n	80026f8 <HAL_I2C_Master_Transmit+0x188>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	6a39      	ldr	r1, [r7, #32]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fa19 	bl	8002b34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <HAL_I2C_Master_Transmit+0x1b4>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b04      	cmp	r3, #4
 800270e:	d107      	bne.n	8002720 <HAL_I2C_Master_Transmit+0x1b0>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	2301      	movs	r3, #1
 8002722:	e01a      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d194      	bne.n	8002656 <HAL_I2C_Master_Transmit+0xe6>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 8002758:	2302      	movs	r3, #2
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000

0800276c <I2C_MasterRequestWrite>:
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d006      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d003      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002794:	d108      	bne.n	80027a8 <I2C_MasterRequestWrite+0x3c>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00b      	b.n	80027c0 <I2C_MasterRequestWrite+0x54>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d107      	bne.n	80027c0 <I2C_MasterRequestWrite+0x54>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f84f 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_MasterRequestWrite+0x88>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_MasterRequestWrite+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
 80027f0:	2303      	movs	r3, #3
 80027f2:	e035      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0xa4>
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	e01b      	b.n	8002848 <I2C_MasterRequestWrite+0xdc>
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <I2C_MasterRequestWrite+0xfc>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f898 	bl	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_MasterRequestWrite+0xd2>
 800283a:	2301      	movs	r3, #1
 800283c:	e010      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <I2C_MasterRequestWrite+0x100>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f888 	bl	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestWrite+0xf2>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
 800285e:	2300      	movs	r3, #0
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_WaitOnFlagUntilTimeout>:
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	e048      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d044      	beq.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
 800288a:	f7ff fa03 	bl	8001c94 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d139      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0c1b      	lsrs	r3, r3, #16
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10d      	bne.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	43da      	mvns	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	e00c      	b.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d116      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002910:	2301      	movs	r3, #1
 8002912:	e023      	b.n	800295c <I2C_WaitOnFlagUntilTimeout+0xec>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10d      	bne.n	800293a <I2C_WaitOnFlagUntilTimeout+0xca>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	43da      	mvns	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	e00c      	b.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d093      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
 800295a:	2300      	movs	r3, #0
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
 8002972:	e071      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d123      	bne.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800299c:	615a      	str	r2, [r3, #20]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029c8:	2301      	movs	r3, #1
 80029ca:	e067      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d041      	beq.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80029d4:	f7ff f95e 	bl	8001c94 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d136      	bne.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10c      	bne.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e00b      	b.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a54:	2301      	movs	r3, #1
 8002a56:	e021      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10c      	bne.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e00b      	b.n	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f af6d 	bne.w	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	e034      	b.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f886 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e034      	b.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d028      	beq.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002aca:	f7ff f8e3 	bl	8001c94 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d11d      	bne.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d016      	beq.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e007      	b.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b80      	cmp	r3, #128	; 0x80
 8002b28:	d1c3      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnBTFFlagUntilTimeout>:
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	e034      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f83e 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e034      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d028      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002b5a:	f7ff f89b 	bl	8001c94 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11d      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d016      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d1c3      	bne.n	8002b42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_IsAcknowledgeFailed>:
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d11b      	bne.n	8002c14 <I2C_IsAcknowledgeFailed+0x50>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <I2C_IsAcknowledgeFailed+0x52>
 8002c14:	2300      	movs	r3, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_RCC_OscConfig>:
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e26c      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8087 	beq.w	8002d4e <HAL_RCC_OscConfig+0x12e>
 8002c40:	4b92      	ldr	r3, [pc, #584]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46>
 8002c4c:	4b8f      	ldr	r3, [pc, #572]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d112      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
 8002c58:	4b8c      	ldr	r3, [pc, #560]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
 8002c66:	4b89      	ldr	r3, [pc, #548]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x12c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d168      	bne.n	8002d4c <HAL_RCC_OscConfig+0x12c>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e246      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x76>
 8002c88:	4b80      	ldr	r3, [pc, #512]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7f      	ldr	r2, [pc, #508]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e02e      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b78      	ldr	r3, [pc, #480]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a77      	ldr	r2, [pc, #476]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0xbc>
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a71      	ldr	r2, [pc, #452]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a67      	ldr	r2, [pc, #412]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0x104>
 8002cfc:	f7fe ffca 	bl	8001c94 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xf6>
 8002d04:	f7fe ffc6 	bl	8001c94 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xf6>
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1fa      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe4>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
 8002d24:	f7fe ffb6 	bl	8001c94 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x11e>
 8002d2c:	f7fe ffb2 	bl	8001c94 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x11e>
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1e6      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002d3e:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x10c>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
 8002d4c:	bf00      	nop
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x202>
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x15e>
 8002d66:	4b49      	ldr	r3, [pc, #292]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
 8002d72:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1ba      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002d96:	4b3d      	ldr	r3, [pc, #244]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4939      	ldr	r1, [pc, #228]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1d6>
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	f7fe ff6b 	bl	8001c94 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
 8002dc2:	f7fe ff67 	bl	8001c94 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e19b      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1a2>
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4927      	ldr	r1, [pc, #156]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
 8002df6:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f7fe ff4a 	bl	8001c94 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
 8002e04:	f7fe ff46 	bl	8001c94 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e17a      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002e16:	4b1d      	ldr	r3, [pc, #116]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1e4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x284>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <HAL_RCC_OscConfig+0x24a>
 8002e36:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f7fe ff2a 	bl	8001c94 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x236>
 8002e44:	f7fe ff26 	bl	8001c94 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x236>
 8002e52:	2303      	movs	r3, #3
 8002e54:	e15a      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x224>
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 facc 	bl	8003400 <RCC_Delay>
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x284>
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f7fe ff10 	bl	8001c94 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]
 8002e76:	e00f      	b.n	8002e98 <HAL_RCC_OscConfig+0x278>
 8002e78:	f7fe ff0c 	bl	8001c94 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d908      	bls.n	8002e98 <HAL_RCC_OscConfig+0x278>
 8002e86:	2303      	movs	r3, #3
 8002e88:	e140      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	42420000 	.word	0x42420000
 8002e94:	42420480 	.word	0x42420480
 8002e98:	4b9e      	ldr	r3, [pc, #632]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e9      	bne.n	8002e78 <HAL_RCC_OscConfig+0x258>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a6 	beq.w	8002ffe <HAL_RCC_OscConfig+0x3de>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
 8002eb6:	4b97      	ldr	r3, [pc, #604]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x2be>
 8002ec2:	4b94      	ldr	r3, [pc, #592]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4a93      	ldr	r2, [pc, #588]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	61d3      	str	r3, [r2, #28]
 8002ece:	4b91      	ldr	r3, [pc, #580]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
 8002ede:	4b8e      	ldr	r3, [pc, #568]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
 8002eea:	4b8b      	ldr	r3, [pc, #556]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a8a      	ldr	r2, [pc, #552]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	f7fe fecd 	bl	8001c94 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
 8002efe:	f7fe fec9 	bl	8001c94 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0fd      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002f10:	4b81      	ldr	r3, [pc, #516]	; (8003118 <HAL_RCC_OscConfig+0x4f8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2de>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x312>
 8002f24:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a7a      	ldr	r2, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f3a:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a75      	ldr	r2, [pc, #468]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b73      	ldr	r3, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a72      	ldr	r2, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x356>
 8002f5c:	4b6d      	ldr	r3, [pc, #436]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a6c      	ldr	r2, [pc, #432]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	4b6a      	ldr	r3, [pc, #424]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a69      	ldr	r2, [pc, #420]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f76:	4b67      	ldr	r3, [pc, #412]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a66      	ldr	r2, [pc, #408]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b64      	ldr	r3, [pc, #400]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a63      	ldr	r2, [pc, #396]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
 8002f96:	f7fe fe7d 	bl	8001c94 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x394>
 8002f9e:	f7fe fe79 	bl	8001c94 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x394>
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0ab      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002fb4:	4b57      	ldr	r3, [pc, #348]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x37e>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x3cc>
 8002fc2:	f7fe fe67 	bl	8001c94 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
 8002fca:	f7fe fe63 	bl	8001c94 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e095      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x3aa>
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3de>
 8002ff2:	4b48      	ldr	r3, [pc, #288]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a47      	ldr	r2, [pc, #284]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8081 	beq.w	800310a <HAL_RCC_OscConfig+0x4ea>
 8003008:	4b42      	ldr	r3, [pc, #264]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d061      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4b8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d146      	bne.n	80030aa <HAL_RCC_OscConfig+0x48a>
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_OscConfig+0x4fc>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f7fe fe37 	bl	8001c94 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x41c>
 800302a:	f7fe fe33 	bl	8001c94 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x41c>
 8003038:	2303      	movs	r3, #3
 800303a:	e067      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 800303c:	4b35      	ldr	r3, [pc, #212]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x40a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	492d      	ldr	r1, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a19      	ldr	r1, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	430b      	orrs	r3, r1
 8003076:	4927      	ldr	r1, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x4fc>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f7fe fe07 	bl	8001c94 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x47c>
 800308a:	f7fe fe03 	bl	8001c94 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x47c>
 8003098:	2303      	movs	r3, #3
 800309a:	e037      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x46a>
 80030a8:	e02f      	b.n	800310a <HAL_RCC_OscConfig+0x4ea>
 80030aa:	4b1c      	ldr	r3, [pc, #112]	; (800311c <HAL_RCC_OscConfig+0x4fc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f7fe fdf0 	bl	8001c94 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4aa>
 80030b8:	f7fe fdec 	bl	8001c94 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4aa>
 80030c6:	2303      	movs	r3, #3
 80030c8:	e020      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x498>
 80030d6:	e018      	b.n	800310a <HAL_RCC_OscConfig+0x4ea>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x4c4>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e013      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x4e6>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <HAL_RCC_OscConfig+0x4ea>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_RCC_OscConfig+0x4ec>
 800310a:	2300      	movs	r3, #0
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	42420060 	.word	0x42420060

08003120 <HAL_RCC_ClockConfig>:
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_ClockConfig+0x14>
 8003130:	2301      	movs	r3, #1
 8003132:	e0d0      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 8003134:	4b6a      	ldr	r3, [pc, #424]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d910      	bls.n	8003164 <HAL_RCC_ClockConfig+0x44>
 8003142:	4b67      	ldr	r3, [pc, #412]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 0207 	bic.w	r2, r3, #7
 800314a:	4965      	ldr	r1, [pc, #404]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
 8003152:	4b63      	ldr	r3, [pc, #396]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d001      	beq.n	8003164 <HAL_RCC_ClockConfig+0x44>
 8003160:	2301      	movs	r3, #1
 8003162:	e0b8      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x92>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x68>
 800317c:	4b59      	ldr	r3, [pc, #356]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003186:	6053      	str	r3, [r2, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x80>
 8003194:	4b53      	ldr	r3, [pc, #332]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a52      	ldr	r2, [pc, #328]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800319e:	6053      	str	r3, [r2, #4]
 80031a0:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	494d      	ldr	r1, [pc, #308]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d040      	beq.n	8003240 <HAL_RCC_ClockConfig+0x120>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xb6>
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d115      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07f      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xce>
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e073      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 80031ee:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_ClockConfig+0xde>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06b      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 80031fe:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f023 0203 	bic.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4936      	ldr	r1, [pc, #216]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
 8003210:	f7fe fd40 	bl	8001c94 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	e00a      	b.n	800322e <HAL_RCC_ClockConfig+0x10e>
 8003218:	f7fe fd3c 	bl	8001c94 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_ClockConfig+0x10e>
 800322a:	2303      	movs	r3, #3
 800322c:	e053      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 020c 	and.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	429a      	cmp	r2, r3
 800323e:	d1eb      	bne.n	8003218 <HAL_RCC_ClockConfig+0xf8>
 8003240:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d210      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x150>
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 0207 	bic.w	r2, r3, #7
 8003256:	4922      	ldr	r1, [pc, #136]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d001      	beq.n	8003270 <HAL_RCC_ClockConfig+0x150>
 800326c:	2301      	movs	r3, #1
 800326e:	e032      	b.n	80032d6 <HAL_RCC_ClockConfig+0x1b6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x16e>
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	4916      	ldr	r1, [pc, #88]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x18e>
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	490e      	ldr	r1, [pc, #56]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
 80032ae:	f000 f821 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032b2:	4602      	mov	r2, r0
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	490a      	ldr	r1, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	5ccb      	ldrb	r3, [r1, r3]
 80032c2:	fa22 f303 	lsr.w	r3, r2, r3
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <HAL_RCC_ClockConfig+0x1cc>)
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1d0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fc9e 	bl	8001c10 <HAL_InitTick>
 80032d4:	2300      	movs	r3, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40022000 	.word	0x40022000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	08004ab8 	.word	0x08004ab8
 80032ec:	2000005c 	.word	0x2000005c
 80032f0:	20000060 	.word	0x20000060

080032f4 <HAL_RCC_GetSysClockFreq>:
 80032f4:	b480      	push	{r7}
 80032f6:	b087      	sub	sp, #28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <HAL_RCC_GetSysClockFreq+0x94>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b04      	cmp	r3, #4
 800331c:	d002      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x30>
 800331e:	2b08      	cmp	r3, #8
 8003320:	d003      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0x36>
 8003322:	e027      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x80>
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_GetSysClockFreq+0x98>)
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e027      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x86>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	4a17      	ldr	r2, [pc, #92]	; (8003390 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003334:	5cd3      	ldrb	r3, [r2, r3]
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x70>
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_GetSysClockFreq+0x94>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0c5b      	lsrs	r3, r3, #17
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	4a11      	ldr	r2, [pc, #68]	; (8003394 <HAL_RCC_GetSysClockFreq+0xa0>)
 800334e:	5cd3      	ldrb	r3, [r2, r3]
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <HAL_RCC_GetSysClockFreq+0x98>)
 8003356:	fb02 f203 	mul.w	r2, r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	e004      	b.n	800336e <HAL_RCC_GetSysClockFreq+0x7a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	e002      	b.n	800337a <HAL_RCC_GetSysClockFreq+0x86>
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetSysClockFreq+0x98>)
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	bf00      	nop
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4618      	mov	r0, r3
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	007a1200 	.word	0x007a1200
 8003390:	08004ad0 	.word	0x08004ad0
 8003394:	08004ae0 	.word	0x08004ae0
 8003398:	003d0900 	.word	0x003d0900

0800339c <HAL_RCC_GetHCLKFreq>:
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4b02      	ldr	r3, [pc, #8]	; (80033ac <HAL_RCC_GetHCLKFreq+0x10>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	2000005c 	.word	0x2000005c

080033b0 <HAL_RCC_GetPCLK1Freq>:
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	f7ff fff2 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4903      	ldr	r1, [pc, #12]	; (80033d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08004ac8 	.word	0x08004ac8

080033d8 <HAL_RCC_GetPCLK2Freq>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
 80033dc:	f7ff ffde 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0adb      	lsrs	r3, r3, #11
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4903      	ldr	r1, [pc, #12]	; (80033fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08004ac8 	.word	0x08004ac8

08003400 <RCC_Delay>:
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <RCC_Delay+0x34>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <RCC_Delay+0x38>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0a5b      	lsrs	r3, r3, #9
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	fb02 f303 	mul.w	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	bf00      	nop
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1e5a      	subs	r2, r3, #1
 8003422:	60fa      	str	r2, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <RCC_Delay+0x1c>
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	2000005c 	.word	0x2000005c
 8003438:	10624dd3 	.word	0x10624dd3

0800343c <HAL_TIM_Base_Init>:
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_TIM_Base_Init+0x12>
 800344a:	2301      	movs	r3, #1
 800344c:	e041      	b.n	80034d2 <HAL_TIM_Base_Init+0x96>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_TIM_Base_Init+0x2c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe fac0 	bl	80019e8 <HAL_TIM_Base_MspInit>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f000 fa5c 	bl	8003938 <TIM_Base_SetConfig>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034d0:	2300      	movs	r3, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_TIM_Base_Start_IT>:
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d001      	beq.n	80034f4 <HAL_TIM_Base_Start_IT+0x18>
 80034f0:	2301      	movs	r3, #1
 80034f2:	e03a      	b.n	800356a <HAL_TIM_Base_Start_IT+0x8e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a18      	ldr	r2, [pc, #96]	; (8003574 <HAL_TIM_Base_Start_IT+0x98>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x58>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x58>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIM_Base_Start_IT+0x9c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x58>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_TIM_Base_Start_IT+0xa0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start_IT+0x7c>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0x8c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start_IT+0x8c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800

08003580 <HAL_TIM_IRQHandler>:
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d020      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x64>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <HAL_TIM_IRQHandler+0x64>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0202 	mvn.w	r2, #2
 80035b4:	611a      	str	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	771a      	strb	r2, [r3, #28]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_TIM_IRQHandler+0x52>
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f998 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 80035d0:	e005      	b.n	80035de <HAL_TIM_IRQHandler+0x5e>
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f98b 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 f99a 	bl	8003912 <HAL_TIM_PWM_PulseFinishedCallback>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	771a      	strb	r2, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d020      	beq.n	8003630 <HAL_TIM_IRQHandler+0xb0>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01b      	beq.n	8003630 <HAL_TIM_IRQHandler+0xb0>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0204 	mvn.w	r2, #4
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	771a      	strb	r2, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x9e>
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f972 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0xaa>
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f965 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f974 	bl	8003912 <HAL_TIM_PWM_PulseFinishedCallback>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d020      	beq.n	800367c <HAL_TIM_IRQHandler+0xfc>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01b      	beq.n	800367c <HAL_TIM_IRQHandler+0xfc>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0208 	mvn.w	r2, #8
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2204      	movs	r2, #4
 8003652:	771a      	strb	r2, [r3, #28]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_TIM_IRQHandler+0xea>
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f94c 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 8003668:	e005      	b.n	8003676 <HAL_TIM_IRQHandler+0xf6>
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f93f 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f94e 	bl	8003912 <HAL_TIM_PWM_PulseFinishedCallback>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	771a      	strb	r2, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x148>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01b      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x148>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0210 	mvn.w	r2, #16
 8003698:	611a      	str	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2208      	movs	r2, #8
 800369e:	771a      	strb	r2, [r3, #28]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0x136>
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f926 	bl	8003900 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0x142>
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f919 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f928 	bl	8003912 <HAL_TIM_PWM_PulseFinishedCallback>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00c      	beq.n	80036ec <HAL_TIM_IRQHandler+0x16c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <HAL_TIM_IRQHandler+0x16c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0201 	mvn.w	r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd feec 	bl	80014c4 <HAL_TIM_PeriodElapsedCallback>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <HAL_TIM_IRQHandler+0x190>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_TIM_IRQHandler+0x190>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003708:	611a      	str	r2, [r3, #16]
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fa7f 	bl	8003c0e <HAL_TIMEx_BreakCallback>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00c      	beq.n	8003734 <HAL_TIM_IRQHandler+0x1b4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_TIM_IRQHandler+0x1b4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800372c:	611a      	str	r2, [r3, #16]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8f8 	bl	8003924 <HAL_TIM_TriggerCallback>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_TIM_IRQHandler+0x1d8>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_TIM_IRQHandler+0x1d8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0220 	mvn.w	r2, #32
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa52 	bl	8003bfc <HAL_TIMEx_CommutCallback>
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_ConfigClockSource>:
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIM_ConfigClockSource+0x1c>
 8003778:	2302      	movs	r3, #2
 800377a:	e0b4      	b.n	80038e6 <HAL_TIM_ConfigClockSource+0x186>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b4:	d03e      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0xd4>
 80037b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ba:	f200 8087 	bhi.w	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	f000 8086 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x172>
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ca:	d87f      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b70      	cmp	r3, #112	; 0x70
 80037ce:	d01a      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0xa6>
 80037d0:	2b70      	cmp	r3, #112	; 0x70
 80037d2:	d87b      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b60      	cmp	r3, #96	; 0x60
 80037d6:	d050      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x11a>
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d877      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b50      	cmp	r3, #80	; 0x50
 80037de:	d03c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0xfa>
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d873      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d058      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x13a>
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d86f      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b30      	cmp	r3, #48	; 0x30
 80037ee:	d064      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d86b      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d060      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d867      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d05c      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 8003800:	2b10      	cmp	r3, #16
 8003802:	d05a      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 8003804:	e062      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6899      	ldr	r1, [r3, #8]
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f000 f974 	bl	8003b02 <TIM_ETR_SetConfig>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	e04f      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f000 f95d 	bl	8003b02 <TIM_ETR_SetConfig>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e03c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	f000 f8d4 	bl	8003a14 <TIM_TI1_ConfigInputStage>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2150      	movs	r1, #80	; 0x50
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f92b 	bl	8003ace <TIM_ITRx_SetConfig>
 8003878:	e02c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f000 f8f2 	bl	8003a70 <TIM_TI2_ConfigInputStage>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2160      	movs	r1, #96	; 0x60
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f91b 	bl	8003ace <TIM_ITRx_SetConfig>
 8003898:	e01c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 f8b4 	bl	8003a14 <TIM_TI1_ConfigInputStage>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2140      	movs	r1, #64	; 0x40
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f90b 	bl	8003ace <TIM_ITRx_SetConfig>
 80038b8:	e00c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f000 f902 	bl	8003ace <TIM_ITRx_SetConfig>
 80038ca:	e003      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
 80038d0:	e000      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
 80038d2:	bf00      	nop
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_OC_DelayElapsedCallback>:
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_IC_CaptureCallback>:
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_TriggerCallback>:
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr
	...

08003938 <TIM_Base_SetConfig>:
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2f      	ldr	r2, [pc, #188]	; (8003a08 <TIM_Base_SetConfig+0xd0>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00b      	beq.n	8003968 <TIM_Base_SetConfig+0x30>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0x30>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0x30>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <TIM_Base_SetConfig+0xd8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <TIM_Base_SetConfig+0x42>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <TIM_Base_SetConfig+0xd0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0x62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0x62>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <TIM_Base_SetConfig+0xd4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a1e      	ldr	r2, [pc, #120]	; (8003a10 <TIM_Base_SetConfig+0xd8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0x74>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <TIM_Base_SetConfig+0xd0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <TIM_Base_SetConfig+0xa8>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	615a      	str	r2, [r3, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <TIM_Base_SetConfig+0xc6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800

08003a14 <TIM_TI1_ConfigInputStage>:
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f023 0201 	bic.w	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	621a      	str	r2, [r3, #32]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f023 030a 	bic.w	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	619a      	str	r2, [r3, #24]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	621a      	str	r2, [r3, #32]
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <TIM_TI2_ConfigInputStage>:
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f023 0210 	bic.w	r2, r3, #16
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	621a      	str	r2, [r3, #32]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	031b      	lsls	r3, r3, #12
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	619a      	str	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	621a      	str	r2, [r3, #32]
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <TIM_ITRx_SetConfig>:
 8003ace:	b480      	push	{r7}
 8003ad0:	b085      	sub	sp, #20
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f043 0307 	orr.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <TIM_ETR_SetConfig>:
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	603b      	str	r3, [r7, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_MasterConfigSynchronization>:
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e046      	b.n	8003be6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d00e      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d009      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003be4:	2300      	movs	r3, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800

08003bfc <HAL_TIMEx_CommutCallback>:
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <HAL_TIMEx_BreakCallback>:
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_Init>:
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e042      	b.n	8003cb8 <HAL_UART_Init+0x98>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_UART_Init+0x2c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fd fef2 	bl	8001a30 <HAL_UART_MspInit>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f971 	bl	8003f4c <UART_SetConfig>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c78:	611a      	str	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c88:	615a      	str	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Transmit>:
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d175      	bne.n	8003dcc <HAL_UART_Transmit+0x10c>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_UART_Transmit+0x2c>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_UART_Transmit+0x30>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e06e      	b.n	8003dce <HAL_UART_Transmit+0x10e>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2221      	movs	r2, #33	; 0x21
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cfe:	f7fd ffc9 	bl	8001c94 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	849a      	strh	r2, [r3, #36]	; 0x24
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	84da      	strh	r2, [r3, #38]	; 0x26
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d108      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e003      	b.n	8003d34 <HAL_UART_Transmit+0x74>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	e02e      	b.n	8003d94 <HAL_UART_Transmit+0xd4>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f848 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_UART_Transmit+0x98>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d54:	2303      	movs	r3, #3
 8003d56:	e03a      	b.n	8003dce <HAL_UART_Transmit+0x10e>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_UART_Transmit+0xb6>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3302      	adds	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e007      	b.n	8003d86 <HAL_UART_Transmit+0xc6>
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1cb      	bne.n	8003d36 <HAL_UART_Transmit+0x76>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f814 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_UART_Transmit+0x100>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e006      	b.n	8003dce <HAL_UART_Transmit+0x10e>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_UART_Transmit+0x10e>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_WaitOnFlagUntilTimeout>:
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	71fb      	strb	r3, [r7, #7]
 8003de6:	e03b      	b.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d037      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003df0:	f7fd ff50 	bl	8001c94 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	6a3a      	ldr	r2, [r7, #32]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x34>
 8003e06:	2303      	movs	r3, #3
 8003e08:	e03a      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xaa>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d023      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b80      	cmp	r3, #128	; 0x80
 8003e1c:	d020      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d01d      	beq.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d116      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f81d 	bl	8003e88 <UART_EndRxTransfer>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2208      	movs	r2, #8
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e00f      	b.n	8003e80 <UART_WaitOnFlagUntilTimeout+0xaa>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d0b4      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x12>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UART_EndRxTransfer>:
 8003e88:	b480      	push	{r7}
 8003e8a:	b095      	sub	sp, #84	; 0x54
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	330c      	adds	r3, #12
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
 8003e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9a:	e853 3f00 	ldrex	r3, [r3]
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003eb0:	643a      	str	r2, [r7, #64]	; 0x40
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb8:	e841 2300 	strex	r3, r2, [r1]
 8003ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1e5      	bne.n	8003e90 <UART_EndRxTransfer+0x8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_EndRxTransfer+0x3c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d119      	bne.n	8003f34 <UART_EndRxTransfer+0xac>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f023 0310 	bic.w	r3, r3, #16
 8003f16:	647b      	str	r3, [r7, #68]	; 0x44
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f20:	61ba      	str	r2, [r7, #24]
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_EndRxTransfer+0x78>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
 8003f42:	bf00      	nop
 8003f44:	3754      	adds	r7, #84	; 0x54
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <UART_SetConfig>:
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	611a      	str	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f86:	f023 030c 	bic.w	r3, r3, #12
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	68b9      	ldr	r1, [r7, #8]
 8003f90:	430b      	orrs	r3, r1
 8003f92:	60d3      	str	r3, [r2, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	615a      	str	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <UART_SetConfig+0x114>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d103      	bne.n	8003fbc <UART_SetConfig+0x70>
 8003fb4:	f7ff fa10 	bl	80033d8 <HAL_RCC_GetPCLK2Freq>
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	e002      	b.n	8003fc2 <UART_SetConfig+0x76>
 8003fbc:	f7ff f9f8 	bl	80033b0 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	4a22      	ldr	r2, [pc, #136]	; (8004064 <UART_SetConfig+0x118>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	0119      	lsls	r1, r3, #4
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009a      	lsls	r2, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <UART_SetConfig+0x118>)
 8003ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2064      	movs	r0, #100	; 0x64
 8004002:	fb00 f303 	mul.w	r3, r0, r3
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	3332      	adds	r3, #50	; 0x32
 800400c:	4a15      	ldr	r2, [pc, #84]	; (8004064 <UART_SetConfig+0x118>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004018:	4419      	add	r1, r3
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009a      	lsls	r2, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004030:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <UART_SetConfig+0x118>)
 8004032:	fba3 0302 	umull	r0, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2064      	movs	r0, #100	; 0x64
 800403a:	fb00 f303 	mul.w	r3, r0, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	3332      	adds	r3, #50	; 0x32
 8004044:	4a07      	ldr	r2, [pc, #28]	; (8004064 <UART_SetConfig+0x118>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	f003 020f 	and.w	r2, r3, #15
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	440a      	add	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40013800 	.word	0x40013800
 8004064:	51eb851f 	.word	0x51eb851f

08004068 <__errno>:
 8004068:	4b01      	ldr	r3, [pc, #4]	; (8004070 <__errno+0x8>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000068 	.word	0x20000068

08004074 <__libc_init_array>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	2600      	movs	r6, #0
 8004078:	4d0c      	ldr	r5, [pc, #48]	; (80040ac <__libc_init_array+0x38>)
 800407a:	4c0d      	ldr	r4, [pc, #52]	; (80040b0 <__libc_init_array+0x3c>)
 800407c:	1b64      	subs	r4, r4, r5
 800407e:	10a4      	asrs	r4, r4, #2
 8004080:	42a6      	cmp	r6, r4
 8004082:	d109      	bne.n	8004098 <__libc_init_array+0x24>
 8004084:	f000 fc98 	bl	80049b8 <_init>
 8004088:	2600      	movs	r6, #0
 800408a:	4d0a      	ldr	r5, [pc, #40]	; (80040b4 <__libc_init_array+0x40>)
 800408c:	4c0a      	ldr	r4, [pc, #40]	; (80040b8 <__libc_init_array+0x44>)
 800408e:	1b64      	subs	r4, r4, r5
 8004090:	10a4      	asrs	r4, r4, #2
 8004092:	42a6      	cmp	r6, r4
 8004094:	d105      	bne.n	80040a2 <__libc_init_array+0x2e>
 8004096:	bd70      	pop	{r4, r5, r6, pc}
 8004098:	f855 3b04 	ldr.w	r3, [r5], #4
 800409c:	4798      	blx	r3
 800409e:	3601      	adds	r6, #1
 80040a0:	e7ee      	b.n	8004080 <__libc_init_array+0xc>
 80040a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a6:	4798      	blx	r3
 80040a8:	3601      	adds	r6, #1
 80040aa:	e7f2      	b.n	8004092 <__libc_init_array+0x1e>
 80040ac:	08004b18 	.word	0x08004b18
 80040b0:	08004b18 	.word	0x08004b18
 80040b4:	08004b18 	.word	0x08004b18
 80040b8:	08004b1c 	.word	0x08004b1c

080040bc <malloc>:
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <malloc+0xc>)
 80040be:	4601      	mov	r1, r0
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	f000 b857 	b.w	8004174 <_malloc_r>
 80040c6:	bf00      	nop
 80040c8:	20000068 	.word	0x20000068

080040cc <memset>:
 80040cc:	4603      	mov	r3, r0
 80040ce:	4402      	add	r2, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <_free_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	4605      	mov	r5, r0
 80040e0:	2900      	cmp	r1, #0
 80040e2:	d043      	beq.n	800416c <_free_r+0x90>
 80040e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e8:	1f0c      	subs	r4, r1, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bfb8      	it	lt
 80040ee:	18e4      	addlt	r4, r4, r3
 80040f0:	f000 f8fe 	bl	80042f0 <__malloc_lock>
 80040f4:	4a1e      	ldr	r2, [pc, #120]	; (8004170 <_free_r+0x94>)
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	4610      	mov	r0, r2
 80040fa:	b933      	cbnz	r3, 800410a <_free_r+0x2e>
 80040fc:	6063      	str	r3, [r4, #4]
 80040fe:	6014      	str	r4, [r2, #0]
 8004100:	4628      	mov	r0, r5
 8004102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004106:	f000 b8f9 	b.w	80042fc <__malloc_unlock>
 800410a:	42a3      	cmp	r3, r4
 800410c:	d90a      	bls.n	8004124 <_free_r+0x48>
 800410e:	6821      	ldr	r1, [r4, #0]
 8004110:	1862      	adds	r2, r4, r1
 8004112:	4293      	cmp	r3, r2
 8004114:	bf01      	itttt	eq
 8004116:	681a      	ldreq	r2, [r3, #0]
 8004118:	685b      	ldreq	r3, [r3, #4]
 800411a:	1852      	addeq	r2, r2, r1
 800411c:	6022      	streq	r2, [r4, #0]
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6004      	str	r4, [r0, #0]
 8004122:	e7ed      	b.n	8004100 <_free_r+0x24>
 8004124:	461a      	mov	r2, r3
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	b10b      	cbz	r3, 800412e <_free_r+0x52>
 800412a:	42a3      	cmp	r3, r4
 800412c:	d9fa      	bls.n	8004124 <_free_r+0x48>
 800412e:	6811      	ldr	r1, [r2, #0]
 8004130:	1850      	adds	r0, r2, r1
 8004132:	42a0      	cmp	r0, r4
 8004134:	d10b      	bne.n	800414e <_free_r+0x72>
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	4401      	add	r1, r0
 800413a:	1850      	adds	r0, r2, r1
 800413c:	4283      	cmp	r3, r0
 800413e:	6011      	str	r1, [r2, #0]
 8004140:	d1de      	bne.n	8004100 <_free_r+0x24>
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4401      	add	r1, r0
 8004148:	6011      	str	r1, [r2, #0]
 800414a:	6053      	str	r3, [r2, #4]
 800414c:	e7d8      	b.n	8004100 <_free_r+0x24>
 800414e:	d902      	bls.n	8004156 <_free_r+0x7a>
 8004150:	230c      	movs	r3, #12
 8004152:	602b      	str	r3, [r5, #0]
 8004154:	e7d4      	b.n	8004100 <_free_r+0x24>
 8004156:	6820      	ldr	r0, [r4, #0]
 8004158:	1821      	adds	r1, r4, r0
 800415a:	428b      	cmp	r3, r1
 800415c:	bf01      	itttt	eq
 800415e:	6819      	ldreq	r1, [r3, #0]
 8004160:	685b      	ldreq	r3, [r3, #4]
 8004162:	1809      	addeq	r1, r1, r0
 8004164:	6021      	streq	r1, [r4, #0]
 8004166:	6063      	str	r3, [r4, #4]
 8004168:	6054      	str	r4, [r2, #4]
 800416a:	e7c9      	b.n	8004100 <_free_r+0x24>
 800416c:	bd38      	pop	{r3, r4, r5, pc}
 800416e:	bf00      	nop
 8004170:	20000120 	.word	0x20000120

08004174 <_malloc_r>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	1ccd      	adds	r5, r1, #3
 8004178:	f025 0503 	bic.w	r5, r5, #3
 800417c:	3508      	adds	r5, #8
 800417e:	2d0c      	cmp	r5, #12
 8004180:	bf38      	it	cc
 8004182:	250c      	movcc	r5, #12
 8004184:	2d00      	cmp	r5, #0
 8004186:	4606      	mov	r6, r0
 8004188:	db01      	blt.n	800418e <_malloc_r+0x1a>
 800418a:	42a9      	cmp	r1, r5
 800418c:	d903      	bls.n	8004196 <_malloc_r+0x22>
 800418e:	230c      	movs	r3, #12
 8004190:	6033      	str	r3, [r6, #0]
 8004192:	2000      	movs	r0, #0
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004196:	f000 f8ab 	bl	80042f0 <__malloc_lock>
 800419a:	4921      	ldr	r1, [pc, #132]	; (8004220 <_malloc_r+0xac>)
 800419c:	680a      	ldr	r2, [r1, #0]
 800419e:	4614      	mov	r4, r2
 80041a0:	b99c      	cbnz	r4, 80041ca <_malloc_r+0x56>
 80041a2:	4f20      	ldr	r7, [pc, #128]	; (8004224 <_malloc_r+0xb0>)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b923      	cbnz	r3, 80041b2 <_malloc_r+0x3e>
 80041a8:	4621      	mov	r1, r4
 80041aa:	4630      	mov	r0, r6
 80041ac:	f000 f83c 	bl	8004228 <_sbrk_r>
 80041b0:	6038      	str	r0, [r7, #0]
 80041b2:	4629      	mov	r1, r5
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f837 	bl	8004228 <_sbrk_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d123      	bne.n	8004206 <_malloc_r+0x92>
 80041be:	230c      	movs	r3, #12
 80041c0:	4630      	mov	r0, r6
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	f000 f89a 	bl	80042fc <__malloc_unlock>
 80041c8:	e7e3      	b.n	8004192 <_malloc_r+0x1e>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	1b5b      	subs	r3, r3, r5
 80041ce:	d417      	bmi.n	8004200 <_malloc_r+0x8c>
 80041d0:	2b0b      	cmp	r3, #11
 80041d2:	d903      	bls.n	80041dc <_malloc_r+0x68>
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	441c      	add	r4, r3
 80041d8:	6025      	str	r5, [r4, #0]
 80041da:	e004      	b.n	80041e6 <_malloc_r+0x72>
 80041dc:	6863      	ldr	r3, [r4, #4]
 80041de:	42a2      	cmp	r2, r4
 80041e0:	bf0c      	ite	eq
 80041e2:	600b      	streq	r3, [r1, #0]
 80041e4:	6053      	strne	r3, [r2, #4]
 80041e6:	4630      	mov	r0, r6
 80041e8:	f000 f888 	bl	80042fc <__malloc_unlock>
 80041ec:	f104 000b 	add.w	r0, r4, #11
 80041f0:	1d23      	adds	r3, r4, #4
 80041f2:	f020 0007 	bic.w	r0, r0, #7
 80041f6:	1ac2      	subs	r2, r0, r3
 80041f8:	d0cc      	beq.n	8004194 <_malloc_r+0x20>
 80041fa:	1a1b      	subs	r3, r3, r0
 80041fc:	50a3      	str	r3, [r4, r2]
 80041fe:	e7c9      	b.n	8004194 <_malloc_r+0x20>
 8004200:	4622      	mov	r2, r4
 8004202:	6864      	ldr	r4, [r4, #4]
 8004204:	e7cc      	b.n	80041a0 <_malloc_r+0x2c>
 8004206:	1cc4      	adds	r4, r0, #3
 8004208:	f024 0403 	bic.w	r4, r4, #3
 800420c:	42a0      	cmp	r0, r4
 800420e:	d0e3      	beq.n	80041d8 <_malloc_r+0x64>
 8004210:	1a21      	subs	r1, r4, r0
 8004212:	4630      	mov	r0, r6
 8004214:	f000 f808 	bl	8004228 <_sbrk_r>
 8004218:	3001      	adds	r0, #1
 800421a:	d1dd      	bne.n	80041d8 <_malloc_r+0x64>
 800421c:	e7cf      	b.n	80041be <_malloc_r+0x4a>
 800421e:	bf00      	nop
 8004220:	20000120 	.word	0x20000120
 8004224:	20000124 	.word	0x20000124

08004228 <_sbrk_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	2300      	movs	r3, #0
 800422c:	4d05      	ldr	r5, [pc, #20]	; (8004244 <_sbrk_r+0x1c>)
 800422e:	4604      	mov	r4, r0
 8004230:	4608      	mov	r0, r1
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	f7fd fc74 	bl	8001b20 <_sbrk>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_sbrk_r+0x1a>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_sbrk_r+0x1a>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	20000298 	.word	0x20000298

08004248 <sniprintf>:
 8004248:	b40c      	push	{r2, r3}
 800424a:	b530      	push	{r4, r5, lr}
 800424c:	4b17      	ldr	r3, [pc, #92]	; (80042ac <sniprintf+0x64>)
 800424e:	1e0c      	subs	r4, r1, #0
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	b09d      	sub	sp, #116	; 0x74
 8004254:	da08      	bge.n	8004268 <sniprintf+0x20>
 8004256:	238b      	movs	r3, #139	; 0x8b
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	602b      	str	r3, [r5, #0]
 800425e:	b01d      	add	sp, #116	; 0x74
 8004260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004264:	b002      	add	sp, #8
 8004266:	4770      	bx	lr
 8004268:	f44f 7302 	mov.w	r3, #520	; 0x208
 800426c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004270:	bf0c      	ite	eq
 8004272:	4623      	moveq	r3, r4
 8004274:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	9307      	str	r3, [sp, #28]
 800427c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004280:	9002      	str	r0, [sp, #8]
 8004282:	9006      	str	r0, [sp, #24]
 8004284:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004288:	4628      	mov	r0, r5
 800428a:	ab21      	add	r3, sp, #132	; 0x84
 800428c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800428e:	a902      	add	r1, sp, #8
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	f000 f895 	bl	80043c0 <_svfiprintf_r>
 8004296:	1c43      	adds	r3, r0, #1
 8004298:	bfbc      	itt	lt
 800429a:	238b      	movlt	r3, #139	; 0x8b
 800429c:	602b      	strlt	r3, [r5, #0]
 800429e:	2c00      	cmp	r4, #0
 80042a0:	d0dd      	beq.n	800425e <sniprintf+0x16>
 80042a2:	2200      	movs	r2, #0
 80042a4:	9b02      	ldr	r3, [sp, #8]
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e7d9      	b.n	800425e <sniprintf+0x16>
 80042aa:	bf00      	nop
 80042ac:	20000068 	.word	0x20000068

080042b0 <siprintf>:
 80042b0:	b40e      	push	{r1, r2, r3}
 80042b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	ab1d      	add	r3, sp, #116	; 0x74
 80042bc:	9002      	str	r0, [sp, #8]
 80042be:	9006      	str	r0, [sp, #24]
 80042c0:	9107      	str	r1, [sp, #28]
 80042c2:	9104      	str	r1, [sp, #16]
 80042c4:	4808      	ldr	r0, [pc, #32]	; (80042e8 <siprintf+0x38>)
 80042c6:	4909      	ldr	r1, [pc, #36]	; (80042ec <siprintf+0x3c>)
 80042c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80042cc:	9105      	str	r1, [sp, #20]
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	a902      	add	r1, sp, #8
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	f000 f874 	bl	80043c0 <_svfiprintf_r>
 80042d8:	2200      	movs	r2, #0
 80042da:	9b02      	ldr	r3, [sp, #8]
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	b01c      	add	sp, #112	; 0x70
 80042e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e4:	b003      	add	sp, #12
 80042e6:	4770      	bx	lr
 80042e8:	20000068 	.word	0x20000068
 80042ec:	ffff0208 	.word	0xffff0208

080042f0 <__malloc_lock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__malloc_lock+0x8>)
 80042f2:	f000 bafb 	b.w	80048ec <__retarget_lock_acquire_recursive>
 80042f6:	bf00      	nop
 80042f8:	200002a0 	.word	0x200002a0

080042fc <__malloc_unlock>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__malloc_unlock+0x8>)
 80042fe:	f000 baf6 	b.w	80048ee <__retarget_lock_release_recursive>
 8004302:	bf00      	nop
 8004304:	200002a0 	.word	0x200002a0

08004308 <__ssputs_r>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	688e      	ldr	r6, [r1, #8]
 800430e:	4682      	mov	sl, r0
 8004310:	429e      	cmp	r6, r3
 8004312:	460c      	mov	r4, r1
 8004314:	4690      	mov	r8, r2
 8004316:	461f      	mov	r7, r3
 8004318:	d838      	bhi.n	800438c <__ssputs_r+0x84>
 800431a:	898a      	ldrh	r2, [r1, #12]
 800431c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004320:	d032      	beq.n	8004388 <__ssputs_r+0x80>
 8004322:	6825      	ldr	r5, [r4, #0]
 8004324:	6909      	ldr	r1, [r1, #16]
 8004326:	3301      	adds	r3, #1
 8004328:	eba5 0901 	sub.w	r9, r5, r1
 800432c:	6965      	ldr	r5, [r4, #20]
 800432e:	444b      	add	r3, r9
 8004330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004338:	106d      	asrs	r5, r5, #1
 800433a:	429d      	cmp	r5, r3
 800433c:	bf38      	it	cc
 800433e:	461d      	movcc	r5, r3
 8004340:	0553      	lsls	r3, r2, #21
 8004342:	d531      	bpl.n	80043a8 <__ssputs_r+0xa0>
 8004344:	4629      	mov	r1, r5
 8004346:	f7ff ff15 	bl	8004174 <_malloc_r>
 800434a:	4606      	mov	r6, r0
 800434c:	b950      	cbnz	r0, 8004364 <__ssputs_r+0x5c>
 800434e:	230c      	movs	r3, #12
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	f8ca 3000 	str.w	r3, [sl]
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004364:	464a      	mov	r2, r9
 8004366:	6921      	ldr	r1, [r4, #16]
 8004368:	f000 fad0 	bl	800490c <memcpy>
 800436c:	89a3      	ldrh	r3, [r4, #12]
 800436e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	6126      	str	r6, [r4, #16]
 800437a:	444e      	add	r6, r9
 800437c:	6026      	str	r6, [r4, #0]
 800437e:	463e      	mov	r6, r7
 8004380:	6165      	str	r5, [r4, #20]
 8004382:	eba5 0509 	sub.w	r5, r5, r9
 8004386:	60a5      	str	r5, [r4, #8]
 8004388:	42be      	cmp	r6, r7
 800438a:	d900      	bls.n	800438e <__ssputs_r+0x86>
 800438c:	463e      	mov	r6, r7
 800438e:	4632      	mov	r2, r6
 8004390:	4641      	mov	r1, r8
 8004392:	6820      	ldr	r0, [r4, #0]
 8004394:	f000 fac8 	bl	8004928 <memmove>
 8004398:	68a3      	ldr	r3, [r4, #8]
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	1b9b      	subs	r3, r3, r6
 800439e:	4432      	add	r2, r6
 80043a0:	2000      	movs	r0, #0
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	e7db      	b.n	8004360 <__ssputs_r+0x58>
 80043a8:	462a      	mov	r2, r5
 80043aa:	f000 fad7 	bl	800495c <_realloc_r>
 80043ae:	4606      	mov	r6, r0
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d1e1      	bne.n	8004378 <__ssputs_r+0x70>
 80043b4:	4650      	mov	r0, sl
 80043b6:	6921      	ldr	r1, [r4, #16]
 80043b8:	f7ff fe90 	bl	80040dc <_free_r>
 80043bc:	e7c7      	b.n	800434e <__ssputs_r+0x46>
	...

080043c0 <_svfiprintf_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	4698      	mov	r8, r3
 80043c6:	898b      	ldrh	r3, [r1, #12]
 80043c8:	4607      	mov	r7, r0
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	460d      	mov	r5, r1
 80043ce:	4614      	mov	r4, r2
 80043d0:	b09d      	sub	sp, #116	; 0x74
 80043d2:	d50e      	bpl.n	80043f2 <_svfiprintf_r+0x32>
 80043d4:	690b      	ldr	r3, [r1, #16]
 80043d6:	b963      	cbnz	r3, 80043f2 <_svfiprintf_r+0x32>
 80043d8:	2140      	movs	r1, #64	; 0x40
 80043da:	f7ff fecb 	bl	8004174 <_malloc_r>
 80043de:	6028      	str	r0, [r5, #0]
 80043e0:	6128      	str	r0, [r5, #16]
 80043e2:	b920      	cbnz	r0, 80043ee <_svfiprintf_r+0x2e>
 80043e4:	230c      	movs	r3, #12
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	e0d1      	b.n	8004592 <_svfiprintf_r+0x1d2>
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	616b      	str	r3, [r5, #20]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9309      	str	r3, [sp, #36]	; 0x24
 80043f6:	2320      	movs	r3, #32
 80043f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043fc:	2330      	movs	r3, #48	; 0x30
 80043fe:	f04f 0901 	mov.w	r9, #1
 8004402:	f8cd 800c 	str.w	r8, [sp, #12]
 8004406:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80045ac <_svfiprintf_r+0x1ec>
 800440a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800440e:	4623      	mov	r3, r4
 8004410:	469a      	mov	sl, r3
 8004412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004416:	b10a      	cbz	r2, 800441c <_svfiprintf_r+0x5c>
 8004418:	2a25      	cmp	r2, #37	; 0x25
 800441a:	d1f9      	bne.n	8004410 <_svfiprintf_r+0x50>
 800441c:	ebba 0b04 	subs.w	fp, sl, r4
 8004420:	d00b      	beq.n	800443a <_svfiprintf_r+0x7a>
 8004422:	465b      	mov	r3, fp
 8004424:	4622      	mov	r2, r4
 8004426:	4629      	mov	r1, r5
 8004428:	4638      	mov	r0, r7
 800442a:	f7ff ff6d 	bl	8004308 <__ssputs_r>
 800442e:	3001      	adds	r0, #1
 8004430:	f000 80aa 	beq.w	8004588 <_svfiprintf_r+0x1c8>
 8004434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004436:	445a      	add	r2, fp
 8004438:	9209      	str	r2, [sp, #36]	; 0x24
 800443a:	f89a 3000 	ldrb.w	r3, [sl]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80a2 	beq.w	8004588 <_svfiprintf_r+0x1c8>
 8004444:	2300      	movs	r3, #0
 8004446:	f04f 32ff 	mov.w	r2, #4294967295
 800444a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800444e:	f10a 0a01 	add.w	sl, sl, #1
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	9307      	str	r3, [sp, #28]
 8004456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800445a:	931a      	str	r3, [sp, #104]	; 0x68
 800445c:	4654      	mov	r4, sl
 800445e:	2205      	movs	r2, #5
 8004460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004464:	4851      	ldr	r0, [pc, #324]	; (80045ac <_svfiprintf_r+0x1ec>)
 8004466:	f000 fa43 	bl	80048f0 <memchr>
 800446a:	9a04      	ldr	r2, [sp, #16]
 800446c:	b9d8      	cbnz	r0, 80044a6 <_svfiprintf_r+0xe6>
 800446e:	06d0      	lsls	r0, r2, #27
 8004470:	bf44      	itt	mi
 8004472:	2320      	movmi	r3, #32
 8004474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004478:	0711      	lsls	r1, r2, #28
 800447a:	bf44      	itt	mi
 800447c:	232b      	movmi	r3, #43	; 0x2b
 800447e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004482:	f89a 3000 	ldrb.w	r3, [sl]
 8004486:	2b2a      	cmp	r3, #42	; 0x2a
 8004488:	d015      	beq.n	80044b6 <_svfiprintf_r+0xf6>
 800448a:	4654      	mov	r4, sl
 800448c:	2000      	movs	r0, #0
 800448e:	f04f 0c0a 	mov.w	ip, #10
 8004492:	9a07      	ldr	r2, [sp, #28]
 8004494:	4621      	mov	r1, r4
 8004496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800449a:	3b30      	subs	r3, #48	; 0x30
 800449c:	2b09      	cmp	r3, #9
 800449e:	d94e      	bls.n	800453e <_svfiprintf_r+0x17e>
 80044a0:	b1b0      	cbz	r0, 80044d0 <_svfiprintf_r+0x110>
 80044a2:	9207      	str	r2, [sp, #28]
 80044a4:	e014      	b.n	80044d0 <_svfiprintf_r+0x110>
 80044a6:	eba0 0308 	sub.w	r3, r0, r8
 80044aa:	fa09 f303 	lsl.w	r3, r9, r3
 80044ae:	4313      	orrs	r3, r2
 80044b0:	46a2      	mov	sl, r4
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	e7d2      	b.n	800445c <_svfiprintf_r+0x9c>
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	9103      	str	r1, [sp, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfbb      	ittet	lt
 80044c2:	425b      	neglt	r3, r3
 80044c4:	f042 0202 	orrlt.w	r2, r2, #2
 80044c8:	9307      	strge	r3, [sp, #28]
 80044ca:	9307      	strlt	r3, [sp, #28]
 80044cc:	bfb8      	it	lt
 80044ce:	9204      	strlt	r2, [sp, #16]
 80044d0:	7823      	ldrb	r3, [r4, #0]
 80044d2:	2b2e      	cmp	r3, #46	; 0x2e
 80044d4:	d10c      	bne.n	80044f0 <_svfiprintf_r+0x130>
 80044d6:	7863      	ldrb	r3, [r4, #1]
 80044d8:	2b2a      	cmp	r3, #42	; 0x2a
 80044da:	d135      	bne.n	8004548 <_svfiprintf_r+0x188>
 80044dc:	9b03      	ldr	r3, [sp, #12]
 80044de:	3402      	adds	r4, #2
 80044e0:	1d1a      	adds	r2, r3, #4
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	9203      	str	r2, [sp, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bfb8      	it	lt
 80044ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80044ee:	9305      	str	r3, [sp, #20]
 80044f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045bc <_svfiprintf_r+0x1fc>
 80044f4:	2203      	movs	r2, #3
 80044f6:	4650      	mov	r0, sl
 80044f8:	7821      	ldrb	r1, [r4, #0]
 80044fa:	f000 f9f9 	bl	80048f0 <memchr>
 80044fe:	b140      	cbz	r0, 8004512 <_svfiprintf_r+0x152>
 8004500:	2340      	movs	r3, #64	; 0x40
 8004502:	eba0 000a 	sub.w	r0, r0, sl
 8004506:	fa03 f000 	lsl.w	r0, r3, r0
 800450a:	9b04      	ldr	r3, [sp, #16]
 800450c:	3401      	adds	r4, #1
 800450e:	4303      	orrs	r3, r0
 8004510:	9304      	str	r3, [sp, #16]
 8004512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004516:	2206      	movs	r2, #6
 8004518:	4825      	ldr	r0, [pc, #148]	; (80045b0 <_svfiprintf_r+0x1f0>)
 800451a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800451e:	f000 f9e7 	bl	80048f0 <memchr>
 8004522:	2800      	cmp	r0, #0
 8004524:	d038      	beq.n	8004598 <_svfiprintf_r+0x1d8>
 8004526:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <_svfiprintf_r+0x1f4>)
 8004528:	bb1b      	cbnz	r3, 8004572 <_svfiprintf_r+0x1b2>
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	3307      	adds	r3, #7
 800452e:	f023 0307 	bic.w	r3, r3, #7
 8004532:	3308      	adds	r3, #8
 8004534:	9303      	str	r3, [sp, #12]
 8004536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004538:	4433      	add	r3, r6
 800453a:	9309      	str	r3, [sp, #36]	; 0x24
 800453c:	e767      	b.n	800440e <_svfiprintf_r+0x4e>
 800453e:	460c      	mov	r4, r1
 8004540:	2001      	movs	r0, #1
 8004542:	fb0c 3202 	mla	r2, ip, r2, r3
 8004546:	e7a5      	b.n	8004494 <_svfiprintf_r+0xd4>
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 0c0a 	mov.w	ip, #10
 800454e:	4619      	mov	r1, r3
 8004550:	3401      	adds	r4, #1
 8004552:	9305      	str	r3, [sp, #20]
 8004554:	4620      	mov	r0, r4
 8004556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800455a:	3a30      	subs	r2, #48	; 0x30
 800455c:	2a09      	cmp	r2, #9
 800455e:	d903      	bls.n	8004568 <_svfiprintf_r+0x1a8>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0c5      	beq.n	80044f0 <_svfiprintf_r+0x130>
 8004564:	9105      	str	r1, [sp, #20]
 8004566:	e7c3      	b.n	80044f0 <_svfiprintf_r+0x130>
 8004568:	4604      	mov	r4, r0
 800456a:	2301      	movs	r3, #1
 800456c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004570:	e7f0      	b.n	8004554 <_svfiprintf_r+0x194>
 8004572:	ab03      	add	r3, sp, #12
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	462a      	mov	r2, r5
 8004578:	4638      	mov	r0, r7
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <_svfiprintf_r+0x1f8>)
 800457c:	a904      	add	r1, sp, #16
 800457e:	f3af 8000 	nop.w
 8004582:	1c42      	adds	r2, r0, #1
 8004584:	4606      	mov	r6, r0
 8004586:	d1d6      	bne.n	8004536 <_svfiprintf_r+0x176>
 8004588:	89ab      	ldrh	r3, [r5, #12]
 800458a:	065b      	lsls	r3, r3, #25
 800458c:	f53f af2c 	bmi.w	80043e8 <_svfiprintf_r+0x28>
 8004590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004592:	b01d      	add	sp, #116	; 0x74
 8004594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004598:	ab03      	add	r3, sp, #12
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	462a      	mov	r2, r5
 800459e:	4638      	mov	r0, r7
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <_svfiprintf_r+0x1f8>)
 80045a2:	a904      	add	r1, sp, #16
 80045a4:	f000 f87c 	bl	80046a0 <_printf_i>
 80045a8:	e7eb      	b.n	8004582 <_svfiprintf_r+0x1c2>
 80045aa:	bf00      	nop
 80045ac:	08004ae2 	.word	0x08004ae2
 80045b0:	08004aec 	.word	0x08004aec
 80045b4:	00000000 	.word	0x00000000
 80045b8:	08004309 	.word	0x08004309
 80045bc:	08004ae8 	.word	0x08004ae8

080045c0 <_printf_common>:
 80045c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c4:	4616      	mov	r6, r2
 80045c6:	4699      	mov	r9, r3
 80045c8:	688a      	ldr	r2, [r1, #8]
 80045ca:	690b      	ldr	r3, [r1, #16]
 80045cc:	4607      	mov	r7, r0
 80045ce:	4293      	cmp	r3, r2
 80045d0:	bfb8      	it	lt
 80045d2:	4613      	movlt	r3, r2
 80045d4:	6033      	str	r3, [r6, #0]
 80045d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045da:	460c      	mov	r4, r1
 80045dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045e0:	b10a      	cbz	r2, 80045e6 <_printf_common+0x26>
 80045e2:	3301      	adds	r3, #1
 80045e4:	6033      	str	r3, [r6, #0]
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	0699      	lsls	r1, r3, #26
 80045ea:	bf42      	ittt	mi
 80045ec:	6833      	ldrmi	r3, [r6, #0]
 80045ee:	3302      	addmi	r3, #2
 80045f0:	6033      	strmi	r3, [r6, #0]
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	f015 0506 	ands.w	r5, r5, #6
 80045f8:	d106      	bne.n	8004608 <_printf_common+0x48>
 80045fa:	f104 0a19 	add.w	sl, r4, #25
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	6832      	ldr	r2, [r6, #0]
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	42ab      	cmp	r3, r5
 8004606:	dc28      	bgt.n	800465a <_printf_common+0x9a>
 8004608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800460c:	1e13      	subs	r3, r2, #0
 800460e:	6822      	ldr	r2, [r4, #0]
 8004610:	bf18      	it	ne
 8004612:	2301      	movne	r3, #1
 8004614:	0692      	lsls	r2, r2, #26
 8004616:	d42d      	bmi.n	8004674 <_printf_common+0xb4>
 8004618:	4649      	mov	r1, r9
 800461a:	4638      	mov	r0, r7
 800461c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d020      	beq.n	8004668 <_printf_common+0xa8>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	68e5      	ldr	r5, [r4, #12]
 800462a:	f003 0306 	and.w	r3, r3, #6
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf18      	it	ne
 8004632:	2500      	movne	r5, #0
 8004634:	6832      	ldr	r2, [r6, #0]
 8004636:	f04f 0600 	mov.w	r6, #0
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	bf08      	it	eq
 800463e:	1aad      	subeq	r5, r5, r2
 8004640:	6922      	ldr	r2, [r4, #16]
 8004642:	bf08      	it	eq
 8004644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004648:	4293      	cmp	r3, r2
 800464a:	bfc4      	itt	gt
 800464c:	1a9b      	subgt	r3, r3, r2
 800464e:	18ed      	addgt	r5, r5, r3
 8004650:	341a      	adds	r4, #26
 8004652:	42b5      	cmp	r5, r6
 8004654:	d11a      	bne.n	800468c <_printf_common+0xcc>
 8004656:	2000      	movs	r0, #0
 8004658:	e008      	b.n	800466c <_printf_common+0xac>
 800465a:	2301      	movs	r3, #1
 800465c:	4652      	mov	r2, sl
 800465e:	4649      	mov	r1, r9
 8004660:	4638      	mov	r0, r7
 8004662:	47c0      	blx	r8
 8004664:	3001      	adds	r0, #1
 8004666:	d103      	bne.n	8004670 <_printf_common+0xb0>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004670:	3501      	adds	r5, #1
 8004672:	e7c4      	b.n	80045fe <_printf_common+0x3e>
 8004674:	2030      	movs	r0, #48	; 0x30
 8004676:	18e1      	adds	r1, r4, r3
 8004678:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004682:	4422      	add	r2, r4
 8004684:	3302      	adds	r3, #2
 8004686:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800468a:	e7c5      	b.n	8004618 <_printf_common+0x58>
 800468c:	2301      	movs	r3, #1
 800468e:	4622      	mov	r2, r4
 8004690:	4649      	mov	r1, r9
 8004692:	4638      	mov	r0, r7
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d0e6      	beq.n	8004668 <_printf_common+0xa8>
 800469a:	3601      	adds	r6, #1
 800469c:	e7d9      	b.n	8004652 <_printf_common+0x92>
	...

080046a0 <_printf_i>:
 80046a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a4:	460c      	mov	r4, r1
 80046a6:	7e27      	ldrb	r7, [r4, #24]
 80046a8:	4691      	mov	r9, r2
 80046aa:	2f78      	cmp	r7, #120	; 0x78
 80046ac:	4680      	mov	r8, r0
 80046ae:	469a      	mov	sl, r3
 80046b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b6:	d807      	bhi.n	80046c8 <_printf_i+0x28>
 80046b8:	2f62      	cmp	r7, #98	; 0x62
 80046ba:	d80a      	bhi.n	80046d2 <_printf_i+0x32>
 80046bc:	2f00      	cmp	r7, #0
 80046be:	f000 80d9 	beq.w	8004874 <_printf_i+0x1d4>
 80046c2:	2f58      	cmp	r7, #88	; 0x58
 80046c4:	f000 80a4 	beq.w	8004810 <_printf_i+0x170>
 80046c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046d0:	e03a      	b.n	8004748 <_printf_i+0xa8>
 80046d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d8f6      	bhi.n	80046c8 <_printf_i+0x28>
 80046da:	a001      	add	r0, pc, #4	; (adr r0, 80046e0 <_printf_i+0x40>)
 80046dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046e0:	08004739 	.word	0x08004739
 80046e4:	0800474d 	.word	0x0800474d
 80046e8:	080046c9 	.word	0x080046c9
 80046ec:	080046c9 	.word	0x080046c9
 80046f0:	080046c9 	.word	0x080046c9
 80046f4:	080046c9 	.word	0x080046c9
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080046c9 	.word	0x080046c9
 8004700:	080046c9 	.word	0x080046c9
 8004704:	080046c9 	.word	0x080046c9
 8004708:	080046c9 	.word	0x080046c9
 800470c:	0800485b 	.word	0x0800485b
 8004710:	0800477d 	.word	0x0800477d
 8004714:	0800483d 	.word	0x0800483d
 8004718:	080046c9 	.word	0x080046c9
 800471c:	080046c9 	.word	0x080046c9
 8004720:	0800487d 	.word	0x0800487d
 8004724:	080046c9 	.word	0x080046c9
 8004728:	0800477d 	.word	0x0800477d
 800472c:	080046c9 	.word	0x080046c9
 8004730:	080046c9 	.word	0x080046c9
 8004734:	08004845 	.word	0x08004845
 8004738:	680b      	ldr	r3, [r1, #0]
 800473a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800473e:	1d1a      	adds	r2, r3, #4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	600a      	str	r2, [r1, #0]
 8004744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004748:	2301      	movs	r3, #1
 800474a:	e0a4      	b.n	8004896 <_printf_i+0x1f6>
 800474c:	6825      	ldr	r5, [r4, #0]
 800474e:	6808      	ldr	r0, [r1, #0]
 8004750:	062e      	lsls	r6, r5, #24
 8004752:	f100 0304 	add.w	r3, r0, #4
 8004756:	d50a      	bpl.n	800476e <_printf_i+0xce>
 8004758:	6805      	ldr	r5, [r0, #0]
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	2d00      	cmp	r5, #0
 800475e:	da03      	bge.n	8004768 <_printf_i+0xc8>
 8004760:	232d      	movs	r3, #45	; 0x2d
 8004762:	426d      	negs	r5, r5
 8004764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004768:	230a      	movs	r3, #10
 800476a:	485e      	ldr	r0, [pc, #376]	; (80048e4 <_printf_i+0x244>)
 800476c:	e019      	b.n	80047a2 <_printf_i+0x102>
 800476e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004772:	6805      	ldr	r5, [r0, #0]
 8004774:	600b      	str	r3, [r1, #0]
 8004776:	bf18      	it	ne
 8004778:	b22d      	sxthne	r5, r5
 800477a:	e7ef      	b.n	800475c <_printf_i+0xbc>
 800477c:	680b      	ldr	r3, [r1, #0]
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	1d18      	adds	r0, r3, #4
 8004782:	6008      	str	r0, [r1, #0]
 8004784:	0628      	lsls	r0, r5, #24
 8004786:	d501      	bpl.n	800478c <_printf_i+0xec>
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	e002      	b.n	8004792 <_printf_i+0xf2>
 800478c:	0669      	lsls	r1, r5, #25
 800478e:	d5fb      	bpl.n	8004788 <_printf_i+0xe8>
 8004790:	881d      	ldrh	r5, [r3, #0]
 8004792:	2f6f      	cmp	r7, #111	; 0x6f
 8004794:	bf0c      	ite	eq
 8004796:	2308      	moveq	r3, #8
 8004798:	230a      	movne	r3, #10
 800479a:	4852      	ldr	r0, [pc, #328]	; (80048e4 <_printf_i+0x244>)
 800479c:	2100      	movs	r1, #0
 800479e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047a2:	6866      	ldr	r6, [r4, #4]
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	bfa8      	it	ge
 80047a8:	6821      	ldrge	r1, [r4, #0]
 80047aa:	60a6      	str	r6, [r4, #8]
 80047ac:	bfa4      	itt	ge
 80047ae:	f021 0104 	bicge.w	r1, r1, #4
 80047b2:	6021      	strge	r1, [r4, #0]
 80047b4:	b90d      	cbnz	r5, 80047ba <_printf_i+0x11a>
 80047b6:	2e00      	cmp	r6, #0
 80047b8:	d04d      	beq.n	8004856 <_printf_i+0x1b6>
 80047ba:	4616      	mov	r6, r2
 80047bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80047c0:	fb03 5711 	mls	r7, r3, r1, r5
 80047c4:	5dc7      	ldrb	r7, [r0, r7]
 80047c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047ca:	462f      	mov	r7, r5
 80047cc:	42bb      	cmp	r3, r7
 80047ce:	460d      	mov	r5, r1
 80047d0:	d9f4      	bls.n	80047bc <_printf_i+0x11c>
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d10b      	bne.n	80047ee <_printf_i+0x14e>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	07df      	lsls	r7, r3, #31
 80047da:	d508      	bpl.n	80047ee <_printf_i+0x14e>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	6861      	ldr	r1, [r4, #4]
 80047e0:	4299      	cmp	r1, r3
 80047e2:	bfde      	ittt	le
 80047e4:	2330      	movle	r3, #48	; 0x30
 80047e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047ee:	1b92      	subs	r2, r2, r6
 80047f0:	6122      	str	r2, [r4, #16]
 80047f2:	464b      	mov	r3, r9
 80047f4:	4621      	mov	r1, r4
 80047f6:	4640      	mov	r0, r8
 80047f8:	f8cd a000 	str.w	sl, [sp]
 80047fc:	aa03      	add	r2, sp, #12
 80047fe:	f7ff fedf 	bl	80045c0 <_printf_common>
 8004802:	3001      	adds	r0, #1
 8004804:	d14c      	bne.n	80048a0 <_printf_i+0x200>
 8004806:	f04f 30ff 	mov.w	r0, #4294967295
 800480a:	b004      	add	sp, #16
 800480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004810:	4834      	ldr	r0, [pc, #208]	; (80048e4 <_printf_i+0x244>)
 8004812:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004816:	680e      	ldr	r6, [r1, #0]
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f856 5b04 	ldr.w	r5, [r6], #4
 800481e:	061f      	lsls	r7, r3, #24
 8004820:	600e      	str	r6, [r1, #0]
 8004822:	d514      	bpl.n	800484e <_printf_i+0x1ae>
 8004824:	07d9      	lsls	r1, r3, #31
 8004826:	bf44      	itt	mi
 8004828:	f043 0320 	orrmi.w	r3, r3, #32
 800482c:	6023      	strmi	r3, [r4, #0]
 800482e:	b91d      	cbnz	r5, 8004838 <_printf_i+0x198>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	f023 0320 	bic.w	r3, r3, #32
 8004836:	6023      	str	r3, [r4, #0]
 8004838:	2310      	movs	r3, #16
 800483a:	e7af      	b.n	800479c <_printf_i+0xfc>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	f043 0320 	orr.w	r3, r3, #32
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	2378      	movs	r3, #120	; 0x78
 8004846:	4828      	ldr	r0, [pc, #160]	; (80048e8 <_printf_i+0x248>)
 8004848:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800484c:	e7e3      	b.n	8004816 <_printf_i+0x176>
 800484e:	065e      	lsls	r6, r3, #25
 8004850:	bf48      	it	mi
 8004852:	b2ad      	uxthmi	r5, r5
 8004854:	e7e6      	b.n	8004824 <_printf_i+0x184>
 8004856:	4616      	mov	r6, r2
 8004858:	e7bb      	b.n	80047d2 <_printf_i+0x132>
 800485a:	680b      	ldr	r3, [r1, #0]
 800485c:	6826      	ldr	r6, [r4, #0]
 800485e:	1d1d      	adds	r5, r3, #4
 8004860:	6960      	ldr	r0, [r4, #20]
 8004862:	600d      	str	r5, [r1, #0]
 8004864:	0635      	lsls	r5, r6, #24
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	d501      	bpl.n	800486e <_printf_i+0x1ce>
 800486a:	6018      	str	r0, [r3, #0]
 800486c:	e002      	b.n	8004874 <_printf_i+0x1d4>
 800486e:	0671      	lsls	r1, r6, #25
 8004870:	d5fb      	bpl.n	800486a <_printf_i+0x1ca>
 8004872:	8018      	strh	r0, [r3, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	4616      	mov	r6, r2
 8004878:	6123      	str	r3, [r4, #16]
 800487a:	e7ba      	b.n	80047f2 <_printf_i+0x152>
 800487c:	680b      	ldr	r3, [r1, #0]
 800487e:	1d1a      	adds	r2, r3, #4
 8004880:	600a      	str	r2, [r1, #0]
 8004882:	681e      	ldr	r6, [r3, #0]
 8004884:	2100      	movs	r1, #0
 8004886:	4630      	mov	r0, r6
 8004888:	6862      	ldr	r2, [r4, #4]
 800488a:	f000 f831 	bl	80048f0 <memchr>
 800488e:	b108      	cbz	r0, 8004894 <_printf_i+0x1f4>
 8004890:	1b80      	subs	r0, r0, r6
 8004892:	6060      	str	r0, [r4, #4]
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	2300      	movs	r3, #0
 800489a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800489e:	e7a8      	b.n	80047f2 <_printf_i+0x152>
 80048a0:	4632      	mov	r2, r6
 80048a2:	4649      	mov	r1, r9
 80048a4:	4640      	mov	r0, r8
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	47d0      	blx	sl
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0ab      	beq.n	8004806 <_printf_i+0x166>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	079b      	lsls	r3, r3, #30
 80048b2:	d413      	bmi.n	80048dc <_printf_i+0x23c>
 80048b4:	68e0      	ldr	r0, [r4, #12]
 80048b6:	9b03      	ldr	r3, [sp, #12]
 80048b8:	4298      	cmp	r0, r3
 80048ba:	bfb8      	it	lt
 80048bc:	4618      	movlt	r0, r3
 80048be:	e7a4      	b.n	800480a <_printf_i+0x16a>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4632      	mov	r2, r6
 80048c4:	4649      	mov	r1, r9
 80048c6:	4640      	mov	r0, r8
 80048c8:	47d0      	blx	sl
 80048ca:	3001      	adds	r0, #1
 80048cc:	d09b      	beq.n	8004806 <_printf_i+0x166>
 80048ce:	3501      	adds	r5, #1
 80048d0:	68e3      	ldr	r3, [r4, #12]
 80048d2:	9903      	ldr	r1, [sp, #12]
 80048d4:	1a5b      	subs	r3, r3, r1
 80048d6:	42ab      	cmp	r3, r5
 80048d8:	dcf2      	bgt.n	80048c0 <_printf_i+0x220>
 80048da:	e7eb      	b.n	80048b4 <_printf_i+0x214>
 80048dc:	2500      	movs	r5, #0
 80048de:	f104 0619 	add.w	r6, r4, #25
 80048e2:	e7f5      	b.n	80048d0 <_printf_i+0x230>
 80048e4:	08004af3 	.word	0x08004af3
 80048e8:	08004b04 	.word	0x08004b04

080048ec <__retarget_lock_acquire_recursive>:
 80048ec:	4770      	bx	lr

080048ee <__retarget_lock_release_recursive>:
 80048ee:	4770      	bx	lr

080048f0 <memchr>:
 80048f0:	4603      	mov	r3, r0
 80048f2:	b510      	push	{r4, lr}
 80048f4:	b2c9      	uxtb	r1, r1
 80048f6:	4402      	add	r2, r0
 80048f8:	4293      	cmp	r3, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	d101      	bne.n	8004902 <memchr+0x12>
 80048fe:	2000      	movs	r0, #0
 8004900:	e003      	b.n	800490a <memchr+0x1a>
 8004902:	7804      	ldrb	r4, [r0, #0]
 8004904:	3301      	adds	r3, #1
 8004906:	428c      	cmp	r4, r1
 8004908:	d1f6      	bne.n	80048f8 <memchr+0x8>
 800490a:	bd10      	pop	{r4, pc}

0800490c <memcpy>:
 800490c:	440a      	add	r2, r1
 800490e:	4291      	cmp	r1, r2
 8004910:	f100 33ff 	add.w	r3, r0, #4294967295
 8004914:	d100      	bne.n	8004918 <memcpy+0xc>
 8004916:	4770      	bx	lr
 8004918:	b510      	push	{r4, lr}
 800491a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800491e:	4291      	cmp	r1, r2
 8004920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004924:	d1f9      	bne.n	800491a <memcpy+0xe>
 8004926:	bd10      	pop	{r4, pc}

08004928 <memmove>:
 8004928:	4288      	cmp	r0, r1
 800492a:	b510      	push	{r4, lr}
 800492c:	eb01 0402 	add.w	r4, r1, r2
 8004930:	d902      	bls.n	8004938 <memmove+0x10>
 8004932:	4284      	cmp	r4, r0
 8004934:	4623      	mov	r3, r4
 8004936:	d807      	bhi.n	8004948 <memmove+0x20>
 8004938:	1e43      	subs	r3, r0, #1
 800493a:	42a1      	cmp	r1, r4
 800493c:	d008      	beq.n	8004950 <memmove+0x28>
 800493e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004946:	e7f8      	b.n	800493a <memmove+0x12>
 8004948:	4601      	mov	r1, r0
 800494a:	4402      	add	r2, r0
 800494c:	428a      	cmp	r2, r1
 800494e:	d100      	bne.n	8004952 <memmove+0x2a>
 8004950:	bd10      	pop	{r4, pc}
 8004952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800495a:	e7f7      	b.n	800494c <memmove+0x24>

0800495c <_realloc_r>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	4607      	mov	r7, r0
 8004960:	4614      	mov	r4, r2
 8004962:	460e      	mov	r6, r1
 8004964:	b921      	cbnz	r1, 8004970 <_realloc_r+0x14>
 8004966:	4611      	mov	r1, r2
 8004968:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800496c:	f7ff bc02 	b.w	8004174 <_malloc_r>
 8004970:	b922      	cbnz	r2, 800497c <_realloc_r+0x20>
 8004972:	f7ff fbb3 	bl	80040dc <_free_r>
 8004976:	4625      	mov	r5, r4
 8004978:	4628      	mov	r0, r5
 800497a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800497c:	f000 f814 	bl	80049a8 <_malloc_usable_size_r>
 8004980:	42a0      	cmp	r0, r4
 8004982:	d20f      	bcs.n	80049a4 <_realloc_r+0x48>
 8004984:	4621      	mov	r1, r4
 8004986:	4638      	mov	r0, r7
 8004988:	f7ff fbf4 	bl	8004174 <_malloc_r>
 800498c:	4605      	mov	r5, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d0f2      	beq.n	8004978 <_realloc_r+0x1c>
 8004992:	4631      	mov	r1, r6
 8004994:	4622      	mov	r2, r4
 8004996:	f7ff ffb9 	bl	800490c <memcpy>
 800499a:	4631      	mov	r1, r6
 800499c:	4638      	mov	r0, r7
 800499e:	f7ff fb9d 	bl	80040dc <_free_r>
 80049a2:	e7e9      	b.n	8004978 <_realloc_r+0x1c>
 80049a4:	4635      	mov	r5, r6
 80049a6:	e7e7      	b.n	8004978 <_realloc_r+0x1c>

080049a8 <_malloc_usable_size_r>:
 80049a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ac:	1f18      	subs	r0, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bfbc      	itt	lt
 80049b2:	580b      	ldrlt	r3, [r1, r0]
 80049b4:	18c0      	addlt	r0, r0, r3
 80049b6:	4770      	bx	lr

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr
