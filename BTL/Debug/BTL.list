
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c28  08003c28  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  08003c28  08003c28  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c28  08003c28  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c2c  08003c2c  00013c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08003c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000108  08003d38  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003d38  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c5e  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f1  00000000  00000000  00035d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00038780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00039720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019540  00000000  00000000  0003a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d76  00000000  00000000  00053b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da4c  00000000  00000000  0006787e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f52ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d8  00000000  00000000  000f5320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aec 	.word	0x08003aec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	08003aec 	.word	0x08003aec

0800014c <switchAutoState>:


// ======================= CHẾ ĐỘ TỰ ĐỘNG =======================


void switchAutoState(int newState, int mainTime, int sideTime) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
    autoStatus = newState;
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <switchAutoState+0x2c>)
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	6013      	str	r3, [r2, #0]
    clock_counter_main = mainTime;
 800015e:	4a07      	ldr	r2, [pc, #28]	; (800017c <switchAutoState+0x30>)
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	6013      	str	r3, [r2, #0]
    clock_counter_side = sideTime;
 8000164:	4a06      	ldr	r2, [pc, #24]	; (8000180 <switchAutoState+0x34>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
    clearRoadLed();
 800016a:	f000 fc2f 	bl	80009cc <clearRoadLed>
}
 800016e:	bf00      	nop
 8000170:	3710      	adds	r7, #16
 8000172:	46bd      	mov	sp, r7
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	20000004 	.word	0x20000004
 800017c:	2000012c 	.word	0x2000012c
 8000180:	20000130 	.word	0x20000130

08000184 <fsm_traffic_auto_mode>:

void fsm_traffic_auto_mode(void) {
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
    switch (autoStatus) {
 8000188:	4b3e      	ldr	r3, [pc, #248]	; (8000284 <fsm_traffic_auto_mode+0x100>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b0a      	cmp	r3, #10
 800018e:	d86e      	bhi.n	800026e <fsm_traffic_auto_mode+0xea>
 8000190:	a201      	add	r2, pc, #4	; (adr r2, 8000198 <fsm_traffic_auto_mode+0x14>)
 8000192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000196:	bf00      	nop
 8000198:	0800026f 	.word	0x0800026f
 800019c:	080001d7 	.word	0x080001d7
 80001a0:	080001fd 	.word	0x080001fd
 80001a4:	08000223 	.word	0x08000223
 80001a8:	08000249 	.word	0x08000249
 80001ac:	0800026f 	.word	0x0800026f
 80001b0:	0800026f 	.word	0x0800026f
 80001b4:	0800026f 	.word	0x0800026f
 80001b8:	0800026f 	.word	0x0800026f
 80001bc:	0800026f 	.word	0x0800026f
 80001c0:	080001c5 	.word	0x080001c5
        case OFF:
            break; // Không làm gì
        case INIT:
            switchAutoState(RED_GREEN, timeRed, timeGreen);
 80001c4:	4b30      	ldr	r3, [pc, #192]	; (8000288 <fsm_traffic_auto_mode+0x104>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a30      	ldr	r2, [pc, #192]	; (800028c <fsm_traffic_auto_mode+0x108>)
 80001ca:	6812      	ldr	r2, [r2, #0]
 80001cc:	4619      	mov	r1, r3
 80001ce:	2001      	movs	r0, #1
 80001d0:	f7ff ffbc 	bl	800014c <switchAutoState>
            break;
 80001d4:	e054      	b.n	8000280 <fsm_traffic_auto_mode+0xfc>
        case RED_GREEN:
            turnOnRed(0);
 80001d6:	2000      	movs	r0, #0
 80001d8:	f000 fb82 	bl	80008e0 <turnOnRed>
            turnOnGreen(1);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 fb9b 	bl	8000918 <turnOnGreen>
            if (clock_counter_side == 0)
 80001e2:	4b2b      	ldr	r3, [pc, #172]	; (8000290 <fsm_traffic_auto_mode+0x10c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d143      	bne.n	8000272 <fsm_traffic_auto_mode+0xee>
                switchAutoState(RED_AMBER, clock_counter_main, timeAmber);
 80001ea:	4b2a      	ldr	r3, [pc, #168]	; (8000294 <fsm_traffic_auto_mode+0x110>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <fsm_traffic_auto_mode+0x114>)
 80001f0:	6812      	ldr	r2, [r2, #0]
 80001f2:	4619      	mov	r1, r3
 80001f4:	2002      	movs	r0, #2
 80001f6:	f7ff ffa9 	bl	800014c <switchAutoState>
            break;
 80001fa:	e03a      	b.n	8000272 <fsm_traffic_auto_mode+0xee>
        case RED_AMBER:
            turnOnRed(0);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fb6f 	bl	80008e0 <turnOnRed>
            turnOnAmber(1);
 8000202:	2001      	movs	r0, #1
 8000204:	f000 fb7a 	bl	80008fc <turnOnAmber>
            if (clock_counter_side == 0)
 8000208:	4b21      	ldr	r3, [pc, #132]	; (8000290 <fsm_traffic_auto_mode+0x10c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d132      	bne.n	8000276 <fsm_traffic_auto_mode+0xf2>
                switchAutoState(GREEN_RED, timeGreen, timeRed);
 8000210:	4b1e      	ldr	r3, [pc, #120]	; (800028c <fsm_traffic_auto_mode+0x108>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a1c      	ldr	r2, [pc, #112]	; (8000288 <fsm_traffic_auto_mode+0x104>)
 8000216:	6812      	ldr	r2, [r2, #0]
 8000218:	4619      	mov	r1, r3
 800021a:	2003      	movs	r0, #3
 800021c:	f7ff ff96 	bl	800014c <switchAutoState>
            break;
 8000220:	e029      	b.n	8000276 <fsm_traffic_auto_mode+0xf2>
        case GREEN_RED:
            turnOnGreen(0);
 8000222:	2000      	movs	r0, #0
 8000224:	f000 fb78 	bl	8000918 <turnOnGreen>
            turnOnRed(1);
 8000228:	2001      	movs	r0, #1
 800022a:	f000 fb59 	bl	80008e0 <turnOnRed>
            if (clock_counter_main == 0)
 800022e:	4b19      	ldr	r3, [pc, #100]	; (8000294 <fsm_traffic_auto_mode+0x110>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d121      	bne.n	800027a <fsm_traffic_auto_mode+0xf6>
                switchAutoState(AMBER_RED, timeAmber, clock_counter_side);
 8000236:	4b18      	ldr	r3, [pc, #96]	; (8000298 <fsm_traffic_auto_mode+0x114>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a15      	ldr	r2, [pc, #84]	; (8000290 <fsm_traffic_auto_mode+0x10c>)
 800023c:	6812      	ldr	r2, [r2, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	2004      	movs	r0, #4
 8000242:	f7ff ff83 	bl	800014c <switchAutoState>
            break;
 8000246:	e018      	b.n	800027a <fsm_traffic_auto_mode+0xf6>
        case AMBER_RED:
            turnOnAmber(0);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fb57 	bl	80008fc <turnOnAmber>
            turnOnRed(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f000 fb46 	bl	80008e0 <turnOnRed>
            if (clock_counter_main == 0)
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <fsm_traffic_auto_mode+0x110>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d110      	bne.n	800027e <fsm_traffic_auto_mode+0xfa>
                switchAutoState(RED_GREEN, timeRed, timeGreen);
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <fsm_traffic_auto_mode+0x104>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0a      	ldr	r2, [pc, #40]	; (800028c <fsm_traffic_auto_mode+0x108>)
 8000262:	6812      	ldr	r2, [r2, #0]
 8000264:	4619      	mov	r1, r3
 8000266:	2001      	movs	r0, #1
 8000268:	f7ff ff70 	bl	800014c <switchAutoState>
            break;
 800026c:	e007      	b.n	800027e <fsm_traffic_auto_mode+0xfa>
        default:
            break;
 800026e:	bf00      	nop
 8000270:	e006      	b.n	8000280 <fsm_traffic_auto_mode+0xfc>
            break;
 8000272:	bf00      	nop
 8000274:	e004      	b.n	8000280 <fsm_traffic_auto_mode+0xfc>
            break;
 8000276:	bf00      	nop
 8000278:	e002      	b.n	8000280 <fsm_traffic_auto_mode+0xfc>
            break;
 800027a:	bf00      	nop
 800027c:	e000      	b.n	8000280 <fsm_traffic_auto_mode+0xfc>
            break;
 800027e:	bf00      	nop
    }
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000004 	.word	0x20000004
 8000288:	20000008 	.word	0x20000008
 800028c:	20000010 	.word	0x20000010
 8000290:	20000130 	.word	0x20000130
 8000294:	2000012c 	.word	0x2000012c
 8000298:	2000000c 	.word	0x2000000c

0800029c <logNewTime>:


// ======================= CHẾ ĐỘ TINH CHỈNH =======================
void logNewTime(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	if (tuningStatus == RED_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER RED :%d#\r\n",timeRed),500);
 80002a0:	4b1d      	ldr	r3, [pc, #116]	; (8000318 <logNewTime+0x7c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d10e      	bne.n	80002c6 <logNewTime+0x2a>
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <logNewTime+0x80>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	491c      	ldr	r1, [pc, #112]	; (8000320 <logNewTime+0x84>)
 80002b0:	481c      	ldr	r0, [pc, #112]	; (8000324 <logNewTime+0x88>)
 80002b2:	f003 f897 	bl	80033e4 <siprintf>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b29a      	uxth	r2, r3
 80002ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002be:	4919      	ldr	r1, [pc, #100]	; (8000324 <logNewTime+0x88>)
 80002c0:	4819      	ldr	r0, [pc, #100]	; (8000328 <logNewTime+0x8c>)
 80002c2:	f002 fdcb 	bl	8002e5c <HAL_UART_Transmit>
	if (tuningStatus == AMBER_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER AMBER :%d#\r\n",timeAmber),500);
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <logNewTime+0x7c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d10e      	bne.n	80002ec <logNewTime+0x50>
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <logNewTime+0x90>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	461a      	mov	r2, r3
 80002d4:	4916      	ldr	r1, [pc, #88]	; (8000330 <logNewTime+0x94>)
 80002d6:	4813      	ldr	r0, [pc, #76]	; (8000324 <logNewTime+0x88>)
 80002d8:	f003 f884 	bl	80033e4 <siprintf>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29a      	uxth	r2, r3
 80002e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002e4:	490f      	ldr	r1, [pc, #60]	; (8000324 <logNewTime+0x88>)
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <logNewTime+0x8c>)
 80002e8:	f002 fdb8 	bl	8002e5c <HAL_UART_Transmit>
	if (tuningStatus == GREEN_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER GREEN :%d#\r\n",timeGreen),500);
 80002ec:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <logNewTime+0x7c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d10e      	bne.n	8000312 <logNewTime+0x76>
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <logNewTime+0x98>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	461a      	mov	r2, r3
 80002fa:	490f      	ldr	r1, [pc, #60]	; (8000338 <logNewTime+0x9c>)
 80002fc:	4809      	ldr	r0, [pc, #36]	; (8000324 <logNewTime+0x88>)
 80002fe:	f003 f871 	bl	80033e4 <siprintf>
 8000302:	4603      	mov	r3, r0
 8000304:	b29a      	uxth	r2, r3
 8000306:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800030a:	4906      	ldr	r1, [pc, #24]	; (8000324 <logNewTime+0x88>)
 800030c:	4806      	ldr	r0, [pc, #24]	; (8000328 <logNewTime+0x8c>)
 800030e:	f002 fda5 	bl	8002e5c <HAL_UART_Transmit>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000128 	.word	0x20000128
 800031c:	20000008 	.word	0x20000008
 8000320:	08003b04 	.word	0x08003b04
 8000324:	200001a8 	.word	0x200001a8
 8000328:	20000160 	.word	0x20000160
 800032c:	2000000c 	.word	0x2000000c
 8000330:	08003b18 	.word	0x08003b18
 8000334:	20000010 	.word	0x20000010
 8000338:	08003b2c 	.word	0x08003b2c

0800033c <fsm_traffic_tunning_mode>:
int initialTimeRed = 5;
int initialTimeAmber = 2;
int initialTimeGreen = 3;
void fsm_traffic_tunning_mode(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	switch(tuningStatus){
 8000340:	4ba3      	ldr	r3, [pc, #652]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b0a      	cmp	r3, #10
 8000346:	f200 8139 	bhi.w	80005bc <fsm_traffic_tunning_mode+0x280>
 800034a:	a201      	add	r2, pc, #4	; (adr r2, 8000350 <fsm_traffic_tunning_mode+0x14>)
 800034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000350:	0800037d 	.word	0x0800037d
 8000354:	08000399 	.word	0x08000399
 8000358:	08000507 	.word	0x08000507
 800035c:	08000451 	.word	0x08000451
 8000360:	080005bd 	.word	0x080005bd
 8000364:	080005bd 	.word	0x080005bd
 8000368:	080005bd 	.word	0x080005bd
 800036c:	080005bd 	.word	0x080005bd
 8000370:	080005bd 	.word	0x080005bd
 8000374:	080005bd 	.word	0x080005bd
 8000378:	0800037d 	.word	0x0800037d
	case OFF:
		// do nothing
	case INIT:
		tuningStatus = RED_ADJ;
 800037c:	4b94      	ldr	r3, [pc, #592]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 800037e:	2201      	movs	r2, #1
 8000380:	601a      	str	r2, [r3, #0]
		clearRoadLed();
 8000382:	f000 fb23 	bl	80009cc <clearRoadLed>
		logNewTime();
 8000386:	f7ff ff89 	bl	800029c <logNewTime>
		setTimer(timer_duration[1], 1);
 800038a:	4b92      	ldr	r3, [pc, #584]	; (80005d4 <fsm_traffic_tunning_mode+0x298>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	2101      	movs	r1, #1
 8000390:	4618      	mov	r0, r3
 8000392:	f000 ffeb 	bl	800136c <setTimer>
		break;
 8000396:	e118      	b.n	80005ca <fsm_traffic_tunning_mode+0x28e>
	case RED_ADJ:
		blinkyRed();
 8000398:	f000 facc 	bl	8000934 <blinkyRed>
		if (isButtonShortPress(2)){
 800039c:	2002      	movs	r0, #2
 800039e:	f000 fc3b 	bl	8000c18 <isButtonShortPress>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d011      	beq.n	80003cc <fsm_traffic_tunning_mode+0x90>
            timeRed = (timeRed + 1) % 100;
 80003a8:	4b8b      	ldr	r3, [pc, #556]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	1c5a      	adds	r2, r3, #1
 80003ae:	4b8b      	ldr	r3, [pc, #556]	; (80005dc <fsm_traffic_tunning_mode+0x2a0>)
 80003b0:	fb83 1302 	smull	r1, r3, r3, r2
 80003b4:	1159      	asrs	r1, r3, #5
 80003b6:	17d3      	asrs	r3, r2, #31
 80003b8:	1acb      	subs	r3, r1, r3
 80003ba:	2164      	movs	r1, #100	; 0x64
 80003bc:	fb01 f303 	mul.w	r3, r1, r3
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	4a85      	ldr	r2, [pc, #532]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 80003c4:	6013      	str	r3, [r2, #0]
            logNewTime();
 80003c6:	f7ff ff69 	bl	800029c <logNewTime>
            timeGreen = initialTimeGreen;
            logNewTime();  // Gửi thông tin thời gian mới
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
            clearRoadLed();  // Tắt tất cả đèn
        }
		break;
 80003ca:	e0f9      	b.n	80005c0 <fsm_traffic_tunning_mode+0x284>
		else if (isButtonLongPress(2)){
 80003cc:	2002      	movs	r0, #2
 80003ce:	f000 fc47 	bl	8000c60 <isButtonLongPress>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d012      	beq.n	80003fe <fsm_traffic_tunning_mode+0xc2>
            timeRed = (timeRed - 1 + 100) % 100;
 80003d8:	4b7f      	ldr	r3, [pc, #508]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f103 0263 	add.w	r2, r3, #99	; 0x63
 80003e0:	4b7e      	ldr	r3, [pc, #504]	; (80005dc <fsm_traffic_tunning_mode+0x2a0>)
 80003e2:	fb83 1302 	smull	r1, r3, r3, r2
 80003e6:	1159      	asrs	r1, r3, #5
 80003e8:	17d3      	asrs	r3, r2, #31
 80003ea:	1acb      	subs	r3, r1, r3
 80003ec:	2164      	movs	r1, #100	; 0x64
 80003ee:	fb01 f303 	mul.w	r3, r1, r3
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	4a78      	ldr	r2, [pc, #480]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 80003f6:	6013      	str	r3, [r2, #0]
            logNewTime();
 80003f8:	f7ff ff50 	bl	800029c <logNewTime>
		break;
 80003fc:	e0e0      	b.n	80005c0 <fsm_traffic_tunning_mode+0x284>
		else if (isButtonShortPress(1)){
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 fc0a 	bl	8000c18 <isButtonShortPress>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d007      	beq.n	800041a <fsm_traffic_tunning_mode+0xde>
			tuningStatus = GREEN_ADJ;
 800040a:	4b71      	ldr	r3, [pc, #452]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 800040c:	2203      	movs	r2, #3
 800040e:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 8000410:	f000 fadc 	bl	80009cc <clearRoadLed>
			logNewTime();
 8000414:	f7ff ff42 	bl	800029c <logNewTime>
		break;
 8000418:	e0d2      	b.n	80005c0 <fsm_traffic_tunning_mode+0x284>
        else if(isButtonShortPress(0)){
 800041a:	2000      	movs	r0, #0
 800041c:	f000 fbfc 	bl	8000c18 <isButtonShortPress>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	f000 80cc 	beq.w	80005c0 <fsm_traffic_tunning_mode+0x284>
            timeRed = initialTimeRed;
 8000428:	4b6d      	ldr	r3, [pc, #436]	; (80005e0 <fsm_traffic_tunning_mode+0x2a4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a6a      	ldr	r2, [pc, #424]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 800042e:	6013      	str	r3, [r2, #0]
            timeAmber = initialTimeAmber;
 8000430:	4b6c      	ldr	r3, [pc, #432]	; (80005e4 <fsm_traffic_tunning_mode+0x2a8>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a6c      	ldr	r2, [pc, #432]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 8000436:	6013      	str	r3, [r2, #0]
            timeGreen = initialTimeGreen;
 8000438:	4b6c      	ldr	r3, [pc, #432]	; (80005ec <fsm_traffic_tunning_mode+0x2b0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a6c      	ldr	r2, [pc, #432]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 800043e:	6013      	str	r3, [r2, #0]
            logNewTime();  // Gửi thông tin thời gian mới
 8000440:	f7ff ff2c 	bl	800029c <logNewTime>
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
 8000444:	4b62      	ldr	r3, [pc, #392]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 8000446:	2203      	movs	r2, #3
 8000448:	601a      	str	r2, [r3, #0]
            clearRoadLed();  // Tắt tất cả đèn
 800044a:	f000 fabf 	bl	80009cc <clearRoadLed>
		break;
 800044e:	e0b7      	b.n	80005c0 <fsm_traffic_tunning_mode+0x284>
	case GREEN_ADJ:
		blinkyGreen();
 8000450:	f000 faa2 	bl	8000998 <blinkyGreen>
		if(isButtonShortPress(2)){
 8000454:	2002      	movs	r0, #2
 8000456:	f000 fbdf 	bl	8000c18 <isButtonShortPress>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d011      	beq.n	8000484 <fsm_traffic_tunning_mode+0x148>
            timeGreen = (timeGreen + 1) % 100;
 8000460:	4b63      	ldr	r3, [pc, #396]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	4b5d      	ldr	r3, [pc, #372]	; (80005dc <fsm_traffic_tunning_mode+0x2a0>)
 8000468:	fb83 1302 	smull	r1, r3, r3, r2
 800046c:	1159      	asrs	r1, r3, #5
 800046e:	17d3      	asrs	r3, r2, #31
 8000470:	1acb      	subs	r3, r1, r3
 8000472:	2164      	movs	r1, #100	; 0x64
 8000474:	fb01 f303 	mul.w	r3, r1, r3
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	4a5d      	ldr	r2, [pc, #372]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 800047c:	6013      	str	r3, [r2, #0]
            logNewTime();;
 800047e:	f7ff ff0d 	bl	800029c <logNewTime>
            timeGreen = initialTimeGreen;
            logNewTime();  // Gửi thông tin thời gian mới
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
            clearRoadLed();  // Tắt tất cả đèn
        }
		break;
 8000482:	e09f      	b.n	80005c4 <fsm_traffic_tunning_mode+0x288>
		else if(isButtonLongPress(2)){
 8000484:	2002      	movs	r0, #2
 8000486:	f000 fbeb 	bl	8000c60 <isButtonLongPress>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d012      	beq.n	80004b6 <fsm_traffic_tunning_mode+0x17a>
            timeGreen = (timeGreen - 1 + 100) % 100;
 8000490:	4b57      	ldr	r3, [pc, #348]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000498:	4b50      	ldr	r3, [pc, #320]	; (80005dc <fsm_traffic_tunning_mode+0x2a0>)
 800049a:	fb83 1302 	smull	r1, r3, r3, r2
 800049e:	1159      	asrs	r1, r3, #5
 80004a0:	17d3      	asrs	r3, r2, #31
 80004a2:	1acb      	subs	r3, r1, r3
 80004a4:	2164      	movs	r1, #100	; 0x64
 80004a6:	fb01 f303 	mul.w	r3, r1, r3
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	4a50      	ldr	r2, [pc, #320]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 80004ae:	6013      	str	r3, [r2, #0]
            logNewTime();
 80004b0:	f7ff fef4 	bl	800029c <logNewTime>
		break;
 80004b4:	e086      	b.n	80005c4 <fsm_traffic_tunning_mode+0x288>
		else if(isButtonShortPress(1)){
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fbae 	bl	8000c18 <isButtonShortPress>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d007      	beq.n	80004d2 <fsm_traffic_tunning_mode+0x196>
			tuningStatus = AMBER_ADJ;
 80004c2:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 80004c4:	2202      	movs	r2, #2
 80004c6:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 80004c8:	f000 fa80 	bl	80009cc <clearRoadLed>
			logNewTime();
 80004cc:	f7ff fee6 	bl	800029c <logNewTime>
		break;
 80004d0:	e078      	b.n	80005c4 <fsm_traffic_tunning_mode+0x288>
        else if(isButtonShortPress(0)){
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fba0 	bl	8000c18 <isButtonShortPress>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d072      	beq.n	80005c4 <fsm_traffic_tunning_mode+0x288>
            timeRed = initialTimeRed;
 80004de:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <fsm_traffic_tunning_mode+0x2a4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a3d      	ldr	r2, [pc, #244]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 80004e4:	6013      	str	r3, [r2, #0]
            timeAmber = initialTimeAmber;
 80004e6:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <fsm_traffic_tunning_mode+0x2a8>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a3f      	ldr	r2, [pc, #252]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 80004ec:	6013      	str	r3, [r2, #0]
            timeGreen = initialTimeGreen;
 80004ee:	4b3f      	ldr	r3, [pc, #252]	; (80005ec <fsm_traffic_tunning_mode+0x2b0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a3f      	ldr	r2, [pc, #252]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 80004f4:	6013      	str	r3, [r2, #0]
            logNewTime();  // Gửi thông tin thời gian mới
 80004f6:	f7ff fed1 	bl	800029c <logNewTime>
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
 80004fa:	4b35      	ldr	r3, [pc, #212]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 80004fc:	2203      	movs	r2, #3
 80004fe:	601a      	str	r2, [r3, #0]
            clearRoadLed();  // Tắt tất cả đèn
 8000500:	f000 fa64 	bl	80009cc <clearRoadLed>
		break;
 8000504:	e05e      	b.n	80005c4 <fsm_traffic_tunning_mode+0x288>
	case AMBER_ADJ:
		blinkyAmber();
 8000506:	f000 fa2d 	bl	8000964 <blinkyAmber>
		if (isButtonShortPress(2)){
 800050a:	2002      	movs	r0, #2
 800050c:	f000 fb84 	bl	8000c18 <isButtonShortPress>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d011      	beq.n	800053a <fsm_traffic_tunning_mode+0x1fe>
            timeAmber = (timeAmber + 1) % 100;
 8000516:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	4b2f      	ldr	r3, [pc, #188]	; (80005dc <fsm_traffic_tunning_mode+0x2a0>)
 800051e:	fb83 1302 	smull	r1, r3, r3, r2
 8000522:	1159      	asrs	r1, r3, #5
 8000524:	17d3      	asrs	r3, r2, #31
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	2164      	movs	r1, #100	; 0x64
 800052a:	fb01 f303 	mul.w	r3, r1, r3
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	4a2d      	ldr	r2, [pc, #180]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 8000532:	6013      	str	r3, [r2, #0]
            logNewTime();
 8000534:	f7ff feb2 	bl	800029c <logNewTime>
            timeGreen = initialTimeGreen;
            logNewTime();  // Gửi thông tin thời gian mới
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
            clearRoadLed();  // Tắt tất cả đèn
        }
		break;
 8000538:	e046      	b.n	80005c8 <fsm_traffic_tunning_mode+0x28c>
		else if(isButtonLongPress(2)){
 800053a:	2002      	movs	r0, #2
 800053c:	f000 fb90 	bl	8000c60 <isButtonLongPress>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d012      	beq.n	800056c <fsm_traffic_tunning_mode+0x230>
            timeAmber = (timeAmber - 1 + 100) % 100;
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f103 0263 	add.w	r2, r3, #99	; 0x63
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <fsm_traffic_tunning_mode+0x2a0>)
 8000550:	fb83 1302 	smull	r1, r3, r3, r2
 8000554:	1159      	asrs	r1, r3, #5
 8000556:	17d3      	asrs	r3, r2, #31
 8000558:	1acb      	subs	r3, r1, r3
 800055a:	2164      	movs	r1, #100	; 0x64
 800055c:	fb01 f303 	mul.w	r3, r1, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 8000564:	6013      	str	r3, [r2, #0]
            logNewTime();
 8000566:	f7ff fe99 	bl	800029c <logNewTime>
		break;
 800056a:	e02d      	b.n	80005c8 <fsm_traffic_tunning_mode+0x28c>
		else if (isButtonShortPress(1)){
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fb53 	bl	8000c18 <isButtonShortPress>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d007      	beq.n	8000588 <fsm_traffic_tunning_mode+0x24c>
			tuningStatus = RED_ADJ;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 800057a:	2201      	movs	r2, #1
 800057c:	601a      	str	r2, [r3, #0]
			clearRoadLed();
 800057e:	f000 fa25 	bl	80009cc <clearRoadLed>
			logNewTime();
 8000582:	f7ff fe8b 	bl	800029c <logNewTime>
		break;
 8000586:	e01f      	b.n	80005c8 <fsm_traffic_tunning_mode+0x28c>
        else if(isButtonShortPress(0)){
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fb45 	bl	8000c18 <isButtonShortPress>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d019      	beq.n	80005c8 <fsm_traffic_tunning_mode+0x28c>
            timeRed = initialTimeRed;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <fsm_traffic_tunning_mode+0x2a4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <fsm_traffic_tunning_mode+0x29c>)
 800059a:	6013      	str	r3, [r2, #0]
            timeAmber = initialTimeAmber;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <fsm_traffic_tunning_mode+0x2a8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <fsm_traffic_tunning_mode+0x2ac>)
 80005a2:	6013      	str	r3, [r2, #0]
            timeGreen = initialTimeGreen;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <fsm_traffic_tunning_mode+0x2b0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <fsm_traffic_tunning_mode+0x2b4>)
 80005aa:	6013      	str	r3, [r2, #0]
            logNewTime();  // Gửi thông tin thời gian mới
 80005ac:	f7ff fe76 	bl	800029c <logNewTime>
            tuningStatus = GREEN_ADJ;  // Giữ trạng thái GREEN_ADJ
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <fsm_traffic_tunning_mode+0x294>)
 80005b2:	2203      	movs	r2, #3
 80005b4:	601a      	str	r2, [r3, #0]
            clearRoadLed();  // Tắt tất cả đèn
 80005b6:	f000 fa09 	bl	80009cc <clearRoadLed>
		break;
 80005ba:	e005      	b.n	80005c8 <fsm_traffic_tunning_mode+0x28c>

	default:
		break;
 80005bc:	bf00      	nop
 80005be:	e004      	b.n	80005ca <fsm_traffic_tunning_mode+0x28e>
		break;
 80005c0:	bf00      	nop
 80005c2:	e002      	b.n	80005ca <fsm_traffic_tunning_mode+0x28e>
		break;
 80005c4:	bf00      	nop
 80005c6:	e000      	b.n	80005ca <fsm_traffic_tunning_mode+0x28e>
		break;
 80005c8:	bf00      	nop
	}
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000128 	.word	0x20000128
 80005d4:	20000088 	.word	0x20000088
 80005d8:	20000008 	.word	0x20000008
 80005dc:	51eb851f 	.word	0x51eb851f
 80005e0:	20000014 	.word	0x20000014
 80005e4:	20000018 	.word	0x20000018
 80005e8:	2000000c 	.word	0x2000000c
 80005ec:	2000001c 	.word	0x2000001c
 80005f0:	20000010 	.word	0x20000010

080005f4 <fsm_switch_mode>:
// ======================= CHUYỂN ĐỔI CHẾ ĐỘ =======================
void fsm_switch_mode(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	if (isButtonLongPress(0)){
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fb31 	bl	8000c60 <isButtonLongPress>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d02c      	beq.n	800065e <fsm_switch_mode+0x6a>
		if (trafficMode != MANUAL_MODE) {
 8000604:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <fsm_switch_mode+0xd4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d018      	beq.n	800063e <fsm_switch_mode+0x4a>
			trafficMode = MANUAL_MODE;
 800060c:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <fsm_switch_mode+0xd4>)
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO MANUAL MODE#\r\n"),500);
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <fsm_switch_mode+0xd8>)
 8000614:	482e      	ldr	r0, [pc, #184]	; (80006d0 <fsm_switch_mode+0xdc>)
 8000616:	f002 fee5 	bl	80033e4 <siprintf>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000622:	492b      	ldr	r1, [pc, #172]	; (80006d0 <fsm_switch_mode+0xdc>)
 8000624:	482b      	ldr	r0, [pc, #172]	; (80006d4 <fsm_switch_mode+0xe0>)
 8000626:	f002 fc19 	bl	8002e5c <HAL_UART_Transmit>
			// TODO: prepare for manual mode
			manualStatus = INIT;
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <fsm_switch_mode+0xe4>)
 800062c:	220a      	movs	r2, #10
 800062e:	601a      	str	r2, [r3, #0]
			autoStatus= OFF;
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <fsm_switch_mode+0xe8>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000636:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <fsm_switch_mode+0xec>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
		else {
			trafficMode = INIT;
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
		}
	}
}
 800063c:	e041      	b.n	80006c2 <fsm_switch_mode+0xce>
			trafficMode = INIT;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <fsm_switch_mode+0xd4>)
 8000640:	220a      	movs	r2, #10
 8000642:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 8000644:	4927      	ldr	r1, [pc, #156]	; (80006e4 <fsm_switch_mode+0xf0>)
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <fsm_switch_mode+0xdc>)
 8000648:	f002 fecc 	bl	80033e4 <siprintf>
 800064c:	4603      	mov	r3, r0
 800064e:	b29a      	uxth	r2, r3
 8000650:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000654:	491e      	ldr	r1, [pc, #120]	; (80006d0 <fsm_switch_mode+0xdc>)
 8000656:	481f      	ldr	r0, [pc, #124]	; (80006d4 <fsm_switch_mode+0xe0>)
 8000658:	f002 fc00 	bl	8002e5c <HAL_UART_Transmit>
}
 800065c:	e031      	b.n	80006c2 <fsm_switch_mode+0xce>
	else if (isButtonLongPress(1)){
 800065e:	2001      	movs	r0, #1
 8000660:	f000 fafe 	bl	8000c60 <isButtonLongPress>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d02b      	beq.n	80006c2 <fsm_switch_mode+0xce>
		if (trafficMode != TUNING_MODE) {
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <fsm_switch_mode+0xd4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b03      	cmp	r3, #3
 8000670:	d018      	beq.n	80006a4 <fsm_switch_mode+0xb0>
			trafficMode = TUNING_MODE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <fsm_switch_mode+0xd4>)
 8000674:	2203      	movs	r2, #3
 8000676:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO TUNING MODE#\r\n"),500);
 8000678:	491b      	ldr	r1, [pc, #108]	; (80006e8 <fsm_switch_mode+0xf4>)
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <fsm_switch_mode+0xdc>)
 800067c:	f002 feb2 	bl	80033e4 <siprintf>
 8000680:	4603      	mov	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000688:	4911      	ldr	r1, [pc, #68]	; (80006d0 <fsm_switch_mode+0xdc>)
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <fsm_switch_mode+0xe0>)
 800068c:	f002 fbe6 	bl	8002e5c <HAL_UART_Transmit>
			tuningStatus = INIT;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <fsm_switch_mode+0xec>)
 8000692:	220a      	movs	r2, #10
 8000694:	601a      	str	r2, [r3, #0]
			autoStatus = OFF;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <fsm_switch_mode+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <fsm_switch_mode+0xe4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
}
 80006a2:	e00e      	b.n	80006c2 <fsm_switch_mode+0xce>
			trafficMode = INIT;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <fsm_switch_mode+0xd4>)
 80006a6:	220a      	movs	r2, #10
 80006a8:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"),500);
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <fsm_switch_mode+0xf0>)
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <fsm_switch_mode+0xdc>)
 80006ae:	f002 fe99 	bl	80033e4 <siprintf>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006ba:	4905      	ldr	r1, [pc, #20]	; (80006d0 <fsm_switch_mode+0xdc>)
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <fsm_switch_mode+0xe0>)
 80006be:	f002 fbcd 	bl	8002e5c <HAL_UART_Transmit>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000000 	.word	0x20000000
 80006cc:	08003b40 	.word	0x08003b40
 80006d0:	200001a8 	.word	0x200001a8
 80006d4:	20000160 	.word	0x20000160
 80006d8:	20000124 	.word	0x20000124
 80006dc:	20000004 	.word	0x20000004
 80006e0:	20000128 	.word	0x20000128
 80006e4:	08003b5c 	.word	0x08003b5c
 80006e8:	08003b74 	.word	0x08003b74

080006ec <fsm_traffic>:
// ======================= VÒNG LẶP CHÍNH =======================
void fsm_traffic(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	switch(trafficMode){
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <fsm_traffic+0x9c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d006      	beq.n	8000706 <fsm_traffic+0x1a>
 80006f8:	2b0a      	cmp	r3, #10
 80006fa:	dc41      	bgt.n	8000780 <fsm_traffic+0x94>
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d039      	beq.n	8000774 <fsm_traffic+0x88>
 8000700:	2b03      	cmp	r3, #3
 8000702:	d03a      	beq.n	800077a <fsm_traffic+0x8e>
		break;
	case TUNING_MODE:
		fsm_traffic_tunning_mode();
		break;
	default:
		break;
 8000704:	e03c      	b.n	8000780 <fsm_traffic+0x94>
		if (timeRed != (timeAmber + timeGreen)){
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <fsm_traffic+0xa0>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <fsm_traffic+0xa4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	441a      	add	r2, r3
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <fsm_traffic+0xa8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d018      	beq.n	800074a <fsm_traffic+0x5e>
			trafficMode = ERROR_MODE;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <fsm_traffic+0x9c>)
 800071a:	2204      	movs	r2, #4
 800071c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER ERROR#\r\n"),500);
 800071e:	491e      	ldr	r1, [pc, #120]	; (8000798 <fsm_traffic+0xac>)
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <fsm_traffic+0xb0>)
 8000722:	f002 fe5f 	bl	80033e4 <siprintf>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800072e:	491b      	ldr	r1, [pc, #108]	; (800079c <fsm_traffic+0xb0>)
 8000730:	481b      	ldr	r0, [pc, #108]	; (80007a0 <fsm_traffic+0xb4>)
 8000732:	f002 fb93 	bl	8002e5c <HAL_UART_Transmit>
			autoStatus = OFF;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <fsm_traffic+0xb8>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <fsm_traffic+0xbc>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <fsm_traffic+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	e011      	b.n	800076e <fsm_traffic+0x82>
			trafficMode = AUTO_MODE;
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <fsm_traffic+0x9c>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
			autoStatus = INIT;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <fsm_traffic+0xb8>)
 8000752:	220a      	movs	r2, #10
 8000754:	601a      	str	r2, [r3, #0]
			manualStatus = OFF;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <fsm_traffic+0xbc>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
			tuningStatus = OFF;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <fsm_traffic+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
			setTimer(timer_duration[0], 0);
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <fsm_traffic+0xc4>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fdff 	bl	800136c <setTimer>
		turnOffAllLED();
 800076e:	f000 f8ab 	bl	80008c8 <turnOffAllLED>
		break;
 8000772:	e006      	b.n	8000782 <fsm_traffic+0x96>
		fsm_traffic_auto_mode();
 8000774:	f7ff fd06 	bl	8000184 <fsm_traffic_auto_mode>
		break;
 8000778:	e003      	b.n	8000782 <fsm_traffic+0x96>
		fsm_traffic_tunning_mode();
 800077a:	f7ff fddf 	bl	800033c <fsm_traffic_tunning_mode>
		break;
 800077e:	e000      	b.n	8000782 <fsm_traffic+0x96>
		break;
 8000780:	bf00      	nop
	}
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000000 	.word	0x20000000
 800078c:	2000000c 	.word	0x2000000c
 8000790:	20000010 	.word	0x20000010
 8000794:	20000008 	.word	0x20000008
 8000798:	08003b90 	.word	0x08003b90
 800079c:	200001a8 	.word	0x200001a8
 80007a0:	20000160 	.word	0x20000160
 80007a4:	20000004 	.word	0x20000004
 80007a8:	20000124 	.word	0x20000124
 80007ac:	20000128 	.word	0x20000128
 80007b0:	20000088 	.word	0x20000088

080007b4 <clock_counter_traffic_update>:

void clock_counter_traffic_update(void){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if((timer_flag[0] == 1) && (trafficMode == AUTO_MODE)){
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <clock_counter_traffic_update+0x74>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d131      	bne.n	8000824 <clock_counter_traffic_update+0x70>
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <clock_counter_traffic_update+0x78>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d12d      	bne.n	8000824 <clock_counter_traffic_update+0x70>
		clock_counter_main--;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <clock_counter_traffic_update+0x7c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a18      	ldr	r2, [pc, #96]	; (8000830 <clock_counter_traffic_update+0x7c>)
 80007d0:	6013      	str	r3, [r2, #0]
		clock_counter_side--;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <clock_counter_traffic_update+0x80>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a16      	ldr	r2, [pc, #88]	; (8000834 <clock_counter_traffic_update+0x80>)
 80007da:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "\n!7SEG WAY1:%d#\r\n",clock_counter_main),500);
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <clock_counter_traffic_update+0x7c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4915      	ldr	r1, [pc, #84]	; (8000838 <clock_counter_traffic_update+0x84>)
 80007e4:	4815      	ldr	r0, [pc, #84]	; (800083c <clock_counter_traffic_update+0x88>)
 80007e6:	f002 fdfd 	bl	80033e4 <siprintf>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007f2:	4912      	ldr	r1, [pc, #72]	; (800083c <clock_counter_traffic_update+0x88>)
 80007f4:	4812      	ldr	r0, [pc, #72]	; (8000840 <clock_counter_traffic_update+0x8c>)
 80007f6:	f002 fb31 	bl	8002e5c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!7SEG WAY2:%d#\r\n",clock_counter_side),500);
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <clock_counter_traffic_update+0x80>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4910      	ldr	r1, [pc, #64]	; (8000844 <clock_counter_traffic_update+0x90>)
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <clock_counter_traffic_update+0x88>)
 8000804:	f002 fdee 	bl	80033e4 <siprintf>
 8000808:	4603      	mov	r3, r0
 800080a:	b29a      	uxth	r2, r3
 800080c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000810:	490a      	ldr	r1, [pc, #40]	; (800083c <clock_counter_traffic_update+0x88>)
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <clock_counter_traffic_update+0x8c>)
 8000814:	f002 fb22 	bl	8002e5c <HAL_UART_Transmit>

		setTimer(timer_duration[0], 0);
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <clock_counter_traffic_update+0x94>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fda4 	bl	800136c <setTimer>
	}
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000144 	.word	0x20000144
 800082c:	20000000 	.word	0x20000000
 8000830:	2000012c 	.word	0x2000012c
 8000834:	20000130 	.word	0x20000130
 8000838:	08003ba0 	.word	0x08003ba0
 800083c:	200001a8 	.word	0x200001a8
 8000840:	20000160 	.word	0x20000160
 8000844:	08003bb4 	.word	0x08003bb4
 8000848:	20000088 	.word	0x20000088

0800084c <setLEDState>:
 */

#include "Traffic_Light_FSM.h"

// Common function to control LED states
void setLEDState(GPIO_PinState red, GPIO_PinState amber, GPIO_PinState green, int index) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4603      	mov	r3, r0
 8000856:	71fb      	strb	r3, [r7, #7]
 8000858:	460b      	mov	r3, r1
 800085a:	71bb      	strb	r3, [r7, #6]
 800085c:	4613      	mov	r3, r2
 800085e:	717b      	strb	r3, [r7, #5]
    if (index == 0) { // Way 1
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d112      	bne.n	800088c <setLEDState+0x40>
        HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin, red);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	461a      	mov	r2, r3
 800086a:	2102      	movs	r1, #2
 800086c:	4815      	ldr	r0, [pc, #84]	; (80008c4 <setLEDState+0x78>)
 800086e:	f001 fa34 	bl	8001cda <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, AMBER_LED1_Pin, amber);
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	461a      	mov	r2, r3
 8000876:	2110      	movs	r1, #16
 8000878:	4812      	ldr	r0, [pc, #72]	; (80008c4 <setLEDState+0x78>)
 800087a:	f001 fa2e 	bl	8001cda <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin, green);
 800087e:	797b      	ldrb	r3, [r7, #5]
 8000880:	461a      	mov	r2, r3
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	480f      	ldr	r0, [pc, #60]	; (80008c4 <setLEDState+0x78>)
 8000886:	f001 fa28 	bl	8001cda <HAL_GPIO_WritePin>
    } else if (index == 1) { // Way 2
        HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, red);
        HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, amber);
        HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, green);
    }
}
 800088a:	e016      	b.n	80008ba <setLEDState+0x6e>
    } else if (index == 1) { // Way 2
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d113      	bne.n	80008ba <setLEDState+0x6e>
        HAL_GPIO_WritePin(GPIOA, RED_LED2_Pin, red);
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	461a      	mov	r2, r3
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <setLEDState+0x78>)
 800089a:	f001 fa1e 	bl	8001cda <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, AMBER_LED2_Pin, amber);
 800089e:	79bb      	ldrb	r3, [r7, #6]
 80008a0:	461a      	mov	r2, r3
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4807      	ldr	r0, [pc, #28]	; (80008c4 <setLEDState+0x78>)
 80008a8:	f001 fa17 	bl	8001cda <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GREEN_LED2_Pin, green);
 80008ac:	797b      	ldrb	r3, [r7, #5]
 80008ae:	461a      	mov	r2, r3
 80008b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <setLEDState+0x78>)
 80008b6:	f001 fa10 	bl	8001cda <HAL_GPIO_WritePin>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010800 	.word	0x40010800

080008c8 <turnOffAllLED>:

// Turn off all LEDs
void turnOffAllLED(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin | AMBER_LED1_Pin |
 80008cc:	2201      	movs	r2, #1
 80008ce:	f240 31d2 	movw	r1, #978	; 0x3d2
 80008d2:	4802      	ldr	r0, [pc, #8]	; (80008dc <turnOffAllLED+0x14>)
 80008d4:	f001 fa01 	bl	8001cda <HAL_GPIO_WritePin>
                      AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin, GPIO_PIN_SET);
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40010800 	.word	0x40010800

080008e0 <turnOnRed>:
    HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin | AMBER_LED1_Pin |
                      AMBER_LED2_Pin | GREEN_LED1_Pin | GREEN_LED2_Pin, GPIO_PIN_RESET);
}

// Turn on RED LED for specified way
void turnOnRed(int index) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    setLEDState(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, index);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2201      	movs	r2, #1
 80008ec:	2101      	movs	r1, #1
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ffac 	bl	800084c <setLEDState>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <turnOnAmber>:

// Turn on AMBER LED for specified way
void turnOnAmber(int index) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    setLEDState(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, index);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2201      	movs	r2, #1
 8000908:	2100      	movs	r1, #0
 800090a:	2001      	movs	r0, #1
 800090c:	f7ff ff9e 	bl	800084c <setLEDState>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <turnOnGreen>:

// Turn on GREEN LED for specified way
void turnOnGreen(int index) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    setLEDState(GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET, index);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	2101      	movs	r1, #1
 8000926:	2001      	movs	r0, #1
 8000928:	f7ff ff90 	bl	800084c <setLEDState>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <blinkyRed>:

// Blink RED LEDs
void blinkyRed(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    if (timer_flag[1] == 1) {
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <blinkyRed+0x24>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d109      	bne.n	8000954 <blinkyRed+0x20>
        HAL_GPIO_TogglePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin);
 8000940:	2182      	movs	r1, #130	; 0x82
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <blinkyRed+0x28>)
 8000944:	f001 f9e1 	bl	8001d0a <HAL_GPIO_TogglePin>
        setTimer(timer_duration[1], 1);
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <blinkyRed+0x2c>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2101      	movs	r1, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fd0c 	bl	800136c <setTimer>
    }
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000144 	.word	0x20000144
 800095c:	40010800 	.word	0x40010800
 8000960:	20000088 	.word	0x20000088

08000964 <blinkyAmber>:

// Blink AMBER LEDs
void blinkyAmber(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    if (timer_flag[1] == 1) {
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <blinkyAmber+0x28>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10a      	bne.n	8000986 <blinkyAmber+0x22>
        HAL_GPIO_TogglePin(GPIOA, AMBER_LED1_Pin | AMBER_LED2_Pin);
 8000970:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <blinkyAmber+0x2c>)
 8000976:	f001 f9c8 	bl	8001d0a <HAL_GPIO_TogglePin>
        setTimer(timer_duration[1], 1);
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <blinkyAmber+0x30>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	2101      	movs	r1, #1
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fcf3 	bl	800136c <setTimer>
    }
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000144 	.word	0x20000144
 8000990:	40010800 	.word	0x40010800
 8000994:	20000088 	.word	0x20000088

08000998 <blinkyGreen>:

// Blink GREEN LEDs
void blinkyGreen(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    if (timer_flag[1] == 1) {
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <blinkyGreen+0x28>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d10a      	bne.n	80009ba <blinkyGreen+0x22>
        HAL_GPIO_TogglePin(GPIOA, GREEN_LED1_Pin | GREEN_LED2_Pin);
 80009a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <blinkyGreen+0x2c>)
 80009aa:	f001 f9ae 	bl	8001d0a <HAL_GPIO_TogglePin>
        setTimer(timer_duration[1], 1);
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <blinkyGreen+0x30>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fcd9 	bl	800136c <setTimer>
    }
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000144 	.word	0x20000144
 80009c4:	40010800 	.word	0x40010800
 80009c8:	20000088 	.word	0x20000088

080009cc <clearRoadLed>:

// Clear all road LEDs
void clearRoadLed(void) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
    turnOffAllLED();
 80009d0:	f7ff ff7a 	bl	80008c8 <turnOffAllLED>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <getButtonValue>:

struct keyget listButton[NUM_BUTTON] = {{RELEASE, RELEASE, RELEASE, RELEASE, 0, 0}};
GPIO_TypeDef * BUTTON_GPIO[NUM_BUTTON] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port};
uint16_t BUTTON_PIN[NUM_BUTTON] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};

void getButtonValue(void) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++){
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	e109      	b.n	8000bf8 <getButtonValue+0x220>
		listButton[i].keyget1 = listButton[i].keyget2;
 80009e4:	4989      	ldr	r1, [pc, #548]	; (8000c0c <getButtonValue+0x234>)
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4613      	mov	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	1a9b      	subs	r3, r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	440b      	add	r3, r1
 80009f2:	3304      	adds	r3, #4
 80009f4:	6819      	ldr	r1, [r3, #0]
 80009f6:	4885      	ldr	r0, [pc, #532]	; (8000c0c <getButtonValue+0x234>)
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4403      	add	r3, r0
 8000a04:	6019      	str	r1, [r3, #0]
		listButton[i].keyget2 = listButton[i].keyget3;
 8000a06:	4981      	ldr	r1, [pc, #516]	; (8000c0c <getButtonValue+0x234>)
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	1a9b      	subs	r3, r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	440b      	add	r3, r1
 8000a14:	3308      	adds	r3, #8
 8000a16:	6819      	ldr	r1, [r3, #0]
 8000a18:	487c      	ldr	r0, [pc, #496]	; (8000c0c <getButtonValue+0x234>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4403      	add	r3, r0
 8000a26:	3304      	adds	r3, #4
 8000a28:	6019      	str	r1, [r3, #0]
		listButton[i].keyget3 = HAL_GPIO_ReadPin(BUTTON_GPIO[i], BUTTON_PIN[i]);
 8000a2a:	4a79      	ldr	r2, [pc, #484]	; (8000c10 <getButtonValue+0x238>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a32:	4978      	ldr	r1, [pc, #480]	; (8000c14 <getButtonValue+0x23c>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4610      	mov	r0, r2
 8000a3e:	f001 f935 	bl	8001cac <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4618      	mov	r0, r3
 8000a46:	4971      	ldr	r1, [pc, #452]	; (8000c0c <getButtonValue+0x234>)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	1a9b      	subs	r3, r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	440b      	add	r3, r1
 8000a54:	3308      	adds	r3, #8
 8000a56:	6018      	str	r0, [r3, #0]
		if((listButton[i].keyget1 == listButton[i].keyget2) && (listButton[i].keyget2 == listButton[i].keyget3)){
 8000a58:	496c      	ldr	r1, [pc, #432]	; (8000c0c <getButtonValue+0x234>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	1a9b      	subs	r3, r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	440b      	add	r3, r1
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	4868      	ldr	r0, [pc, #416]	; (8000c0c <getButtonValue+0x234>)
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	4403      	add	r3, r0
 8000a76:	3304      	adds	r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f040 80b9 	bne.w	8000bf2 <getButtonValue+0x21a>
 8000a80:	4962      	ldr	r1, [pc, #392]	; (8000c0c <getButtonValue+0x234>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	4613      	mov	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	1a9b      	subs	r3, r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	3304      	adds	r3, #4
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	485e      	ldr	r0, [pc, #376]	; (8000c0c <getButtonValue+0x234>)
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4613      	mov	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4403      	add	r3, r0
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	f040 80a4 	bne.w	8000bf2 <getButtonValue+0x21a>
			if (listButton[i].oldState != listButton[i].keyget3){
 8000aaa:	4958      	ldr	r1, [pc, #352]	; (8000c0c <getButtonValue+0x234>)
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	1a9b      	subs	r3, r3, r2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	330c      	adds	r3, #12
 8000aba:	6819      	ldr	r1, [r3, #0]
 8000abc:	4853      	ldr	r0, [pc, #332]	; (8000c0c <getButtonValue+0x234>)
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4403      	add	r3, r0
 8000aca:	3308      	adds	r3, #8
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d052      	beq.n	8000b78 <getButtonValue+0x1a0>
				listButton[i].oldState = listButton[i].keyget3;
 8000ad2:	494e      	ldr	r1, [pc, #312]	; (8000c0c <getButtonValue+0x234>)
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3308      	adds	r3, #8
 8000ae2:	6819      	ldr	r1, [r3, #0]
 8000ae4:	4849      	ldr	r0, [pc, #292]	; (8000c0c <getButtonValue+0x234>)
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4403      	add	r3, r0
 8000af2:	330c      	adds	r3, #12
 8000af4:	6019      	str	r1, [r3, #0]
				if (listButton[i].keyget3 == PRESSED){
 8000af6:	4945      	ldr	r1, [pc, #276]	; (8000c0c <getButtonValue+0x234>)
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	1a9b      	subs	r3, r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	3308      	adds	r3, #8
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d114      	bne.n	8000b36 <getButtonValue+0x15e>
					listButton[i].shortPress = 1;
 8000b0c:	493f      	ldr	r1, [pc, #252]	; (8000c0c <getButtonValue+0x234>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4613      	mov	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	440b      	add	r3, r1
 8000b1a:	3310      	adds	r3, #16
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
					listButton[i].timePress = KEY_PRESS_TIME / TIME_CYCLE;
 8000b20:	493a      	ldr	r1, [pc, #232]	; (8000c0c <getButtonValue+0x234>)
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	4613      	mov	r3, r2
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	1a9b      	subs	r3, r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3318      	adds	r3, #24
 8000b30:	2264      	movs	r2, #100	; 0x64
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	e05d      	b.n	8000bf2 <getButtonValue+0x21a>
				}
				else if (listButton[i].keyget3 == RELEASE){
 8000b36:	4935      	ldr	r1, [pc, #212]	; (8000c0c <getButtonValue+0x234>)
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	3308      	adds	r3, #8
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d152      	bne.n	8000bf2 <getButtonValue+0x21a>
					// if new state != old state and button is released -> Short Press is complete
					 if(listButton[i].shortPress == 1) listButton[i].shortPress = 2;
 8000b4c:	492f      	ldr	r1, [pc, #188]	; (8000c0c <getButtonValue+0x234>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4613      	mov	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	3310      	adds	r3, #16
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d147      	bne.n	8000bf2 <getButtonValue+0x21a>
 8000b62:	492a      	ldr	r1, [pc, #168]	; (8000c0c <getButtonValue+0x234>)
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	1a9b      	subs	r3, r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	440b      	add	r3, r1
 8000b70:	3310      	adds	r3, #16
 8000b72:	2202      	movs	r2, #2
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	e03c      	b.n	8000bf2 <getButtonValue+0x21a>
				}
			}
			else if (listButton[i].keyget3 == PRESSED){
 8000b78:	4924      	ldr	r1, [pc, #144]	; (8000c0c <getButtonValue+0x234>)
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	1a9b      	subs	r3, r3, r2
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	440b      	add	r3, r1
 8000b86:	3308      	adds	r3, #8
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d131      	bne.n	8000bf2 <getButtonValue+0x21a>
				listButton[i].timePress--;
 8000b8e:	491f      	ldr	r1, [pc, #124]	; (8000c0c <getButtonValue+0x234>)
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	1a9b      	subs	r3, r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3318      	adds	r3, #24
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1e59      	subs	r1, r3, #1
 8000ba2:	481a      	ldr	r0, [pc, #104]	; (8000c0c <getButtonValue+0x234>)
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4403      	add	r3, r0
 8000bb0:	3318      	adds	r3, #24
 8000bb2:	6019      	str	r1, [r3, #0]
				if (listButton[i].timePress == 0){
 8000bb4:	4915      	ldr	r1, [pc, #84]	; (8000c0c <getButtonValue+0x234>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3318      	adds	r3, #24
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d113      	bne.n	8000bf2 <getButtonValue+0x21a>
					listButton[i].longPress = 1;
 8000bca:	4910      	ldr	r1, [pc, #64]	; (8000c0c <getButtonValue+0x234>)
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3314      	adds	r3, #20
 8000bda:	2201      	movs	r2, #1
 8000bdc:	601a      	str	r2, [r3, #0]
					listButton[i].shortPress = 0; // When press time >= KEY_PRESS_TIME -> long press -> terminate short press
 8000bde:	490b      	ldr	r1, [pc, #44]	; (8000c0c <getButtonValue+0x234>)
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4613      	mov	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	1a9b      	subs	r3, r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	440b      	add	r3, r1
 8000bec:	3310      	adds	r3, #16
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_BUTTON; i++){
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	f77f aef2 	ble.w	80009e4 <getButtonValue+0xc>
				}
			}
		}
	}
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000020 	.word	0x20000020
 8000c10:	20000074 	.word	0x20000074
 8000c14:	20000080 	.word	0x20000080

08000c18 <isButtonShortPress>:



int isButtonShortPress(int index){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	if (listButton[index].shortPress == 2){
 8000c20:	490e      	ldr	r1, [pc, #56]	; (8000c5c <isButtonShortPress+0x44>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4613      	mov	r3, r2
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3310      	adds	r3, #16
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d10b      	bne.n	8000c4e <isButtonShortPress+0x36>
		listButton[index].shortPress = 0;
 8000c36:	4909      	ldr	r1, [pc, #36]	; (8000c5c <isButtonShortPress+0x44>)
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	3310      	adds	r3, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
		return 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <isButtonShortPress+0x38>
	}
	else return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000020 	.word	0x20000020

08000c60 <isButtonLongPress>:

int isButtonLongPress(int index){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if (listButton[index].longPress == 1){
 8000c68:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <isButtonLongPress+0x44>)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	3314      	adds	r3, #20
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d10b      	bne.n	8000c96 <isButtonLongPress+0x36>
		listButton[index].longPress = 0;
 8000c7e:	4909      	ldr	r1, [pc, #36]	; (8000ca4 <isButtonLongPress+0x44>)
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3314      	adds	r3, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
		return 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <isButtonLongPress+0x38>
	}
	else return 0;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000020 	.word	0x20000020

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fd0a 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f83e 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f922 	bl	8000efc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cb8:	f000 f8f6 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000cbc:	f000 f87a 	bl	8000db4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000cc0:	f000 f8a6 	bl	8000e10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <main+0x6c>)
 8000cc6:	f001 fdfd 	bl	80028c4 <HAL_TIM_Base_Start_IT>
  setTimer(timer_duration[0], 0);
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <main+0x70>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fb4b 	bl	800136c <setTimer>
  SCH_Init();
 8000cd6:	f000 f9c1 	bl	800105c <SCH_Init>
  SCH_Add_Task(fsm_traffic, 0, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480f      	ldr	r0, [pc, #60]	; (8000d1c <main+0x74>)
 8000ce0:	f000 f9d6 	bl	8001090 <SCH_Add_Task>
  SCH_Add_Task(clock_counter_traffic_update, 0, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <main+0x78>)
 8000cea:	f000 f9d1 	bl	8001090 <SCH_Add_Task>
  SCH_Add_Task(fsm_switch_mode, 0, 1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <main+0x7c>)
 8000cf4:	f000 f9cc 	bl	8001090 <SCH_Add_Task>
  SCH_Add_Task(timerRun, 0, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	480a      	ldr	r0, [pc, #40]	; (8000d28 <main+0x80>)
 8000cfe:	f000 f9c7 	bl	8001090 <SCH_Add_Task>
  SCH_Add_Task(getButtonValue, 0, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2100      	movs	r1, #0
 8000d06:	4809      	ldr	r0, [pc, #36]	; (8000d2c <main+0x84>)
 8000d08:	f000 f9c2 	bl	8001090 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000d0c:	f000 fb00 	bl	8001310 <SCH_Dispatch_Tasks>
 8000d10:	e7fc      	b.n	8000d0c <main+0x64>
 8000d12:	bf00      	nop
 8000d14:	20000230 	.word	0x20000230
 8000d18:	20000088 	.word	0x20000088
 8000d1c:	080006ed 	.word	0x080006ed
 8000d20:	080007b5 	.word	0x080007b5
 8000d24:	080005f5 	.word	0x080005f5
 8000d28:	080013ad 	.word	0x080013ad
 8000d2c:	080009d9 	.word	0x080009d9

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2228      	movs	r2, #40	; 0x28
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fa92 	bl	8003268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d66:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0318 	add.w	r3, r7, #24
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 f949 	bl	8002008 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d7c:	f000 f93e 	bl	8000ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2102      	movs	r1, #2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 fbb4 	bl	8002508 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000da6:	f000 f929 	bl	8000ffc <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3740      	adds	r7, #64	; 0x40
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MX_I2C1_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_I2C1_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_I2C1_Init+0x50>)
 8000df2:	f000 ffc5 	bl	8001d80 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f8fe 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200001dc 	.word	0x200001dc
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e44:	2209      	movs	r2, #9
 8000e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e56:	f001 fce5 	bl	8002824 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e60:	f000 f8cc 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e72:	f001 fd79 	bl	8002968 <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e7c:	f000 f8be 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_TIM2_Init+0x94>)
 8000e8e:	f001 ff37 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e98:	f000 f8b0 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000230 	.word	0x20000230

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f001 ff6c 	bl	8002dbc <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f887 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000160 	.word	0x20000160
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a34      	ldr	r2, [pc, #208]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b32      	ldr	r3, [pc, #200]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f2e:	f043 0320 	orr.w	r3, r3, #32
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b2c      	ldr	r3, [pc, #176]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0320 	and.w	r3, r3, #32
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_GPIO_Init+0xec>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 8000f70:	2200      	movs	r2, #0
 8000f72:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <MX_GPIO_Init+0xf0>)
 8000f78:	f000 feaf 	bl	8001cda <HAL_GPIO_WritePin>
                          |RED_LED2_Pin|AMBER_LED2_Pin|GREEN_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_GPIO_Init+0xf4>)
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <MX_GPIO_Init+0xf8>)
 8000f92:	f000 fd07 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED1_Pin AMBER_LED1_Pin LD2_Pin GREEN_LED1_Pin
                           RED_LED2_Pin AMBER_LED2_Pin GREEN_LED2_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 8000f96:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8000f9a:	613b      	str	r3, [r7, #16]
                          |RED_LED2_Pin|AMBER_LED2_Pin|GREEN_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <MX_GPIO_Init+0xf0>)
 8000fb0:	f000 fcf8 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000fb4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <MX_GPIO_Init+0xfc>)
 8000fca:	f000 fceb 	bl	80019a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2028      	movs	r0, #40	; 0x28
 8000fd4:	f000 fcaf 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd8:	2028      	movs	r0, #40	; 0x28
 8000fda:	f000 fcc8 	bl	800196e <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	40011000 	.word	0x40011000
 8000ff8:	40010c00 	.word	0x40010c00

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x8>

08001006 <Add_Node>:
};

struct container* container;


struct sTask* Add_Node(struct sTask** curr, void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	603b      	str	r3, [r7, #0]
    struct sTask *temp = (struct sTask*)malloc(sizeof(struct sTask));
 8001014:	2010      	movs	r0, #16
 8001016:	f002 f91f 	bl	8003258 <malloc>
 800101a:	4603      	mov	r3, r0
 800101c:	617b      	str	r3, [r7, #20]
    temp -> pTask = pFunction;
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
    temp -> Delay = DELAY;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
    temp -> Period = PERIOD;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	609a      	str	r2, [r3, #8]
    if (curr == NULL || *curr == NULL) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <Add_Node+0x38>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <Add_Node+0x40>
        temp -> next = temp;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	e004      	b.n	8001050 <Add_Node+0x4a>
    }
    else {
        temp -> next = (*curr) -> next;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	60da      	str	r2, [r3, #12]
    }
    return temp;
 8001050:	697b      	ldr	r3, [r7, #20]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <SCH_Init>:

void SCH_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    container = (struct container*)malloc(sizeof(struct container));
 8001060:	200c      	movs	r0, #12
 8001062:	f002 f8f9 	bl	8003258 <malloc>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <SCH_Init+0x30>)
 800106c:	601a      	str	r2, [r3, #0]
	container -> tail = NULL;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <SCH_Init+0x30>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
	container -> numSlot = 0;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <SCH_Init+0x30>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	605a      	str	r2, [r3, #4]
	container -> emptySlot = 0;
 800107e:	4b03      	ldr	r3, [pc, #12]	; (800108c <SCH_Init+0x30>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000278 	.word	0x20000278

08001090 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	// container empty
	if (container -> tail == NULL) {
 800109c:	4b6e      	ldr	r3, [pc, #440]	; (8001258 <SCH_Add_Task+0x1c8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10f      	bne.n	80010c6 <SCH_Add_Task+0x36>
		container -> tail = Add_Node(NULL, pFunction, DELAY, PERIOD);
 80010a6:	4b6c      	ldr	r3, [pc, #432]	; (8001258 <SCH_Add_Task+0x1c8>)
 80010a8:	681c      	ldr	r4, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff ffa8 	bl	8001006 <Add_Node>
 80010b6:	4603      	mov	r3, r0
 80010b8:	6023      	str	r3, [r4, #0]
		(container -> numSlot)++;
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <SCH_Add_Task+0x1c8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	3201      	adds	r2, #1
 80010c2:	605a      	str	r2, [r3, #4]
			}
			temp = temp -> next;
		}
	}

}
 80010c4:	e0c4      	b.n	8001250 <SCH_Add_Task+0x1c0>
		struct sTask* temp = container -> tail;
 80010c6:	4b64      	ldr	r3, [pc, #400]	; (8001258 <SCH_Add_Task+0x1c8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	617b      	str	r3, [r7, #20]
		uint32_t sumDelay = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t newDelay = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < container -> numSlot; i++) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
 80010da:	e0b1      	b.n	8001240 <SCH_Add_Task+0x1b0>
			sumDelay = sumDelay + temp -> next -> Delay;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e4:	4413      	add	r3, r2
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
			if (sumDelay > DELAY) {
 80010e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d965      	bls.n	80011bc <SCH_Add_Task+0x12c>
				newDelay = DELAY - (sumDelay - temp -> next -> Delay);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	4413      	add	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
				temp -> next -> Delay = sumDelay - DELAY;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	605a      	str	r2, [r3, #4]
				if (container -> emptySlot == 0) {
 800110c:	4b52      	ldr	r3, [pc, #328]	; (8001258 <SCH_Add_Task+0x1c8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10f      	bne.n	8001136 <SCH_Add_Task+0xa6>
					temp -> next = Add_Node(&temp, pFunction, newDelay, PERIOD);
 8001116:	697c      	ldr	r4, [r7, #20]
 8001118:	f107 0014 	add.w	r0, r7, #20
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	f7ff ff70 	bl	8001006 <Add_Node>
 8001126:	4603      	mov	r3, r0
 8001128:	60e3      	str	r3, [r4, #12]
					(container -> numSlot)++;
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <SCH_Add_Task+0x1c8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	3201      	adds	r2, #1
 8001132:	605a      	str	r2, [r3, #4]
                break;
 8001134:	e08c      	b.n	8001250 <SCH_Add_Task+0x1c0>
					container -> tail -> pTask = pFunction;
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	601a      	str	r2, [r3, #0]
					container -> tail -> Delay = newDelay;
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	605a      	str	r2, [r3, #4]
					container -> tail -> Period = PERIOD;
 800114a:	4b43      	ldr	r3, [pc, #268]	; (8001258 <SCH_Add_Task+0x1c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	609a      	str	r2, [r3, #8]
					struct sTask *newTail = temp -> next;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 800115a:	e002      	b.n	8001162 <SCH_Add_Task+0xd2>
						newTail = newTail -> next;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61fb      	str	r3, [r7, #28]
					while (newTail -> next != container -> tail) {
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d1f5      	bne.n	800115c <SCH_Add_Task+0xcc>
					if (temp == container -> tail) container -> tail = newTail;
 8001170:	4b39      	ldr	r3, [pc, #228]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	d104      	bne.n	8001186 <SCH_Add_Task+0xf6>
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <SCH_Add_Task+0x1c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e014      	b.n	80011b0 <SCH_Add_Task+0x120>
						newTail -> next = container -> tail -> next;
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	60da      	str	r2, [r3, #12]
						container -> tail -> next = temp -> next;
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68d2      	ldr	r2, [r2, #12]
 800119c:	60da      	str	r2, [r3, #12]
						temp -> next = container -> tail;
 800119e:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <SCH_Add_Task+0x1c8>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	60da      	str	r2, [r3, #12]
						container -> tail = newTail;
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <SCH_Add_Task+0x1c8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	69fa      	ldr	r2, [r7, #28]
 80011ae:	601a      	str	r2, [r3, #0]
                    (container -> emptySlot)--;
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <SCH_Add_Task+0x1c8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	3a01      	subs	r2, #1
 80011b8:	609a      	str	r2, [r3, #8]
                break;
 80011ba:	e049      	b.n	8001250 <SCH_Add_Task+0x1c0>
                if (temp -> next -> pTask == 0x0000) {
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d113      	bne.n	80011ee <SCH_Add_Task+0x15e>
					temp -> next -> pTask = pFunction;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	601a      	str	r2, [r3, #0]
					temp -> next -> Delay = DELAY - sumDelay;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d6:	1a8a      	subs	r2, r1, r2
 80011d8:	605a      	str	r2, [r3, #4]
					temp -> next -> Period = PERIOD;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	609a      	str	r2, [r3, #8]
                    (container -> emptySlot)--;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	; (8001258 <SCH_Add_Task+0x1c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	3a01      	subs	r2, #1
 80011ea:	609a      	str	r2, [r3, #8]
					break;
 80011ec:	e030      	b.n	8001250 <SCH_Add_Task+0x1c0>
					if (temp -> next == container -> tail) {
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <SCH_Add_Task+0x1c8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d11b      	bne.n	8001234 <SCH_Add_Task+0x1a4>
						container -> tail -> next = Add_Node(&(container -> tail), pFunction, DELAY - sumDelay, PERIOD);
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <SCH_Add_Task+0x1c8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	1ad2      	subs	r2, r2, r3
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <SCH_Add_Task+0x1c8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681c      	ldr	r4, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68f9      	ldr	r1, [r7, #12]
 8001212:	f7ff fef8 	bl	8001006 <Add_Node>
 8001216:	4603      	mov	r3, r0
 8001218:	60e3      	str	r3, [r4, #12]
						container -> tail = container -> tail -> next;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <SCH_Add_Task+0x1c8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68d2      	ldr	r2, [r2, #12]
 8001226:	601a      	str	r2, [r3, #0]
						(container -> numSlot)++;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <SCH_Add_Task+0x1c8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	3201      	adds	r2, #1
 8001230:	605a      	str	r2, [r3, #4]
						break;
 8001232:	e00d      	b.n	8001250 <SCH_Add_Task+0x1c0>
			temp = temp -> next;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < container -> numSlot; i++) {
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	3301      	adds	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SCH_Add_Task+0x1c8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	429a      	cmp	r2, r3
 800124a:	f6ff af47 	blt.w	80010dc <SCH_Add_Task+0x4c>
}
 800124e:	e7ff      	b.n	8001250 <SCH_Add_Task+0x1c0>
 8001250:	bf00      	nop
 8001252:	372c      	adds	r7, #44	; 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	20000278 	.word	0x20000278

0800125c <SCH_Delete_Task>:

void SCH_Delete_Task(struct sTask** preDel) {
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    struct sTask* del = (*preDel) -> next;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	60fb      	str	r3, [r7, #12]
    if (del != container -> tail) del -> next -> Delay += del -> Delay;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <SCH_Delete_Task+0xb0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d008      	beq.n	800128a <SCH_Delete_Task+0x2e>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	6859      	ldr	r1, [r3, #4]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	440a      	add	r2, r1
 8001288:	605a      	str	r2, [r3, #4]
	del -> pTask = 0x0000;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
	del -> Delay = 0;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
	del -> Period = 0;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
	if (*preDel == container -> tail)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <SCH_Delete_Task+0xb0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d107      	bne.n	80012ba <SCH_Delete_Task+0x5e>
		container -> tail = container -> tail -> next;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <SCH_Delete_Task+0xb0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <SCH_Delete_Task+0xb0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68d2      	ldr	r2, [r2, #12]
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e01e      	b.n	80012f8 <SCH_Delete_Task+0x9c>
	else {
		if (del -> next -> pTask != 0 && del != container -> tail) {
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d019      	beq.n	80012f8 <SCH_Delete_Task+0x9c>
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <SCH_Delete_Task+0xb0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d013      	beq.n	80012f8 <SCH_Delete_Task+0x9c>
			(*preDel) -> next = del -> next;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	68d2      	ldr	r2, [r2, #12]
 80012d8:	60da      	str	r2, [r3, #12]
			del -> next = container -> tail -> next;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <SCH_Delete_Task+0xb0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	60da      	str	r2, [r3, #12]
			container -> tail -> next = del;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <SCH_Delete_Task+0xb0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	60da      	str	r2, [r3, #12]
			container -> tail = del;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <SCH_Delete_Task+0xb0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	601a      	str	r2, [r3, #0]
		}
	}
	(container -> emptySlot)++;
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <SCH_Delete_Task+0xb0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	3201      	adds	r2, #1
 8001300:	609a      	str	r2, [r3, #8]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	20000278 	.word	0x20000278

08001310 <SCH_Dispatch_Tasks>:
			(container -> tail -> next -> Delay)--;
	}
}


void SCH_Dispatch_Tasks(void) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
	while (container -> tail -> next -> Delay <= 0) {
 8001316:	e01b      	b.n	8001350 <SCH_Dispatch_Tasks+0x40>
		(*(container -> tail -> next -> pTask))();
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <SCH_Dispatch_Tasks+0x58>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4798      	blx	r3
		struct sTask temp = *(container -> tail -> next);
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <SCH_Dispatch_Tasks+0x58>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	463c      	mov	r4, r7
 800132e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		SCH_Delete_Task(&(container -> tail));
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <SCH_Dispatch_Tasks+0x58>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff8f 	bl	800125c <SCH_Delete_Task>
		if (temp.Period != 0) {
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <SCH_Dispatch_Tasks+0x40>
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fea0 	bl	8001090 <SCH_Add_Task>
	while (container -> tail -> next -> Delay <= 0) {
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SCH_Dispatch_Tasks+0x58>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0dc      	beq.n	8001318 <SCH_Dispatch_Tasks+0x8>
		}
	}
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000278 	.word	0x20000278

0800136c <setTimer>:

int timer_counter[NUM_TIMER] = {0};
int timer_flag[NUM_TIMER] = {0};
int timer_duration[NUM_TIMER] = {1000, 250, 0, 0};

void setTimer(int duration, int index){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <setTimer+0x34>)
 800137a:	fb82 1203 	smull	r1, r2, r2, r3
 800137e:	1092      	asrs	r2, r2, #2
 8001380:	17db      	asrs	r3, r3, #31
 8001382:	1ad2      	subs	r2, r2, r3
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <setTimer+0x38>)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <setTimer+0x3c>)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2100      	movs	r1, #0
 8001392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	66666667 	.word	0x66666667
 80013a4:	20000134 	.word	0x20000134
 80013a8:	20000144 	.word	0x20000144

080013ac <timerRun>:

void timerRun(){
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_TIMER; i++){
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	e01c      	b.n	80013f2 <timerRun+0x46>
		if (timer_counter[i] > 0){
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <timerRun+0x58>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd13      	ble.n	80013ec <timerRun+0x40>
			timer_counter[i]--;
 80013c4:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <timerRun+0x58>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <timerRun+0x58>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <timerRun+0x58>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dc04      	bgt.n	80013ec <timerRun+0x40>
				timer_flag[i] = 1;
 80013e2:	4a09      	ldr	r2, [pc, #36]	; (8001408 <timerRun+0x5c>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2101      	movs	r1, #1
 80013e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_TIMER; i++){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	dddf      	ble.n	80013b8 <timerRun+0xc>
			}
		}
	}
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000134 	.word	0x20000134
 8001408:	20000144 	.word	0x20000144

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_MspInit+0x5c>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_MspInit+0x5c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6193      	str	r3, [r2, #24]
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_MspInit+0x5c>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_MspInit+0x5c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <HAL_MspInit+0x5c>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <HAL_MspInit+0x5c>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_MspInit+0x60>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_MspInit+0x60>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_I2C_MspInit+0x70>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d123      	bne.n	80014d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 8001496:	f043 0308 	orr.w	r3, r3, #8
 800149a:	6193      	str	r3, [r2, #24]
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014a8:	23c0      	movs	r3, #192	; 0xc0
 80014aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ac:	2312      	movs	r3, #18
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4619      	mov	r1, r3
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0x78>)
 80014bc:	f000 fa72 	bl	80019a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 80014c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ca:	61d3      	str	r3, [r2, #28]
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_I2C_MspInit+0x74>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010c00 	.word	0x40010c00

080014ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014fc:	d10b      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_TIM_Base_MspInit+0x34>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_TIM_Base_MspInit+0x34>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_TIM_Base_MspInit+0x34>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <HAL_UART_MspInit+0x70>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d123      	bne.n	800158c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_UART_MspInit+0x74>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_UART_MspInit+0x74>)
 800154a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154e:	61d3      	str	r3, [r2, #28]
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_UART_MspInit+0x74>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_UART_MspInit+0x74>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <HAL_UART_MspInit+0x74>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_UART_MspInit+0x74>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001574:	230c      	movs	r3, #12
 8001576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2302      	movs	r3, #2
 800157e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_UART_MspInit+0x78>)
 8001588:	f000 fa0c 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40004400 	.word	0x40004400
 8001598:	40021000 	.word	0x40021000
 800159c:	40010800 	.word	0x40010800

080015a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <NMI_Handler+0x4>

080015a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler+0x4>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <MemManage_Handler+0x4>

080015b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <UsageFault_Handler+0x4>

080015be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e6:	f000 f8b3 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}

080015ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015f6:	f000 fba1 	bl	8001d3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f001 fde8 	bl	8003204 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20005000 	.word	0x20005000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000154 	.word	0x20000154
 8001668:	20000290 	.word	0x20000290

0800166c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff fff8 	bl	800166c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800167e:	490c      	ldr	r1, [pc, #48]	; (80016b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001694:	4c09      	ldr	r4, [pc, #36]	; (80016bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f001 fdb5 	bl	8003210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a6:	f7ff faff 	bl	8000ca8 <main>
  bx lr
 80016aa:	4770      	bx	lr
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80016b4:	08003c30 	.word	0x08003c30
  ldr r2, =_sbss
 80016b8:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80016bc:	20000290 	.word	0x20000290

080016c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_2_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x28>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f923 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fe94 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f93b 	bl	800198a <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f903 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000098 	.word	0x20000098
 8001748:	200000a0 	.word	0x200000a0
 800174c:	2000009c 	.word	0x2000009c

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x1c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x20>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_IncTick+0x20>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	200000a0 	.word	0x200000a0
 8001770:	2000027c 	.word	0x2000027c

08001774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_GetTick+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	2000027c 	.word	0x2000027c

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4906      	ldr	r1, [pc, #24]	; (8001820 <__NVIC_EnableIRQ+0x34>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff90 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff2d 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff42 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff90 	bl	8001878 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5f 	bl	8001824 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff35 	bl	80017ec <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b08b      	sub	sp, #44	; 0x2c
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e169      	b.n	8001c8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b8:	2201      	movs	r2, #1
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69fa      	ldr	r2, [r7, #28]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8158 	bne.w	8001c86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a9a      	ldr	r2, [pc, #616]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d05e      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019e0:	4a98      	ldr	r2, [pc, #608]	; (8001c44 <HAL_GPIO_Init+0x2a0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d875      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019e6:	4a98      	ldr	r2, [pc, #608]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d058      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019ec:	4a96      	ldr	r2, [pc, #600]	; (8001c48 <HAL_GPIO_Init+0x2a4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d86f      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019f2:	4a96      	ldr	r2, [pc, #600]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d052      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 80019f8:	4a94      	ldr	r2, [pc, #592]	; (8001c4c <HAL_GPIO_Init+0x2a8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d869      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 80019fe:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d04c      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a04:	4a92      	ldr	r2, [pc, #584]	; (8001c50 <HAL_GPIO_Init+0x2ac>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d863      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a0a:	4a92      	ldr	r2, [pc, #584]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d046      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
 8001a10:	4a90      	ldr	r2, [pc, #576]	; (8001c54 <HAL_GPIO_Init+0x2b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d85d      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a16:	2b12      	cmp	r3, #18
 8001a18:	d82a      	bhi.n	8001a70 <HAL_GPIO_Init+0xcc>
 8001a1a:	2b12      	cmp	r3, #18
 8001a1c:	d859      	bhi.n	8001ad2 <HAL_GPIO_Init+0x12e>
 8001a1e:	a201      	add	r2, pc, #4	; (adr r2, 8001a24 <HAL_GPIO_Init+0x80>)
 8001a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a24:	08001a9f 	.word	0x08001a9f
 8001a28:	08001a79 	.word	0x08001a79
 8001a2c:	08001a8b 	.word	0x08001a8b
 8001a30:	08001acd 	.word	0x08001acd
 8001a34:	08001ad3 	.word	0x08001ad3
 8001a38:	08001ad3 	.word	0x08001ad3
 8001a3c:	08001ad3 	.word	0x08001ad3
 8001a40:	08001ad3 	.word	0x08001ad3
 8001a44:	08001ad3 	.word	0x08001ad3
 8001a48:	08001ad3 	.word	0x08001ad3
 8001a4c:	08001ad3 	.word	0x08001ad3
 8001a50:	08001ad3 	.word	0x08001ad3
 8001a54:	08001ad3 	.word	0x08001ad3
 8001a58:	08001ad3 	.word	0x08001ad3
 8001a5c:	08001ad3 	.word	0x08001ad3
 8001a60:	08001ad3 	.word	0x08001ad3
 8001a64:	08001ad3 	.word	0x08001ad3
 8001a68:	08001a81 	.word	0x08001a81
 8001a6c:	08001a95 	.word	0x08001a95
 8001a70:	4a79      	ldr	r2, [pc, #484]	; (8001c58 <HAL_GPIO_Init+0x2b4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a76:	e02c      	b.n	8001ad2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e029      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	3304      	adds	r3, #4
 8001a86:	623b      	str	r3, [r7, #32]
          break;
 8001a88:	e024      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	3308      	adds	r3, #8
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e01f      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	330c      	adds	r3, #12
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e01a      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e013      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	611a      	str	r2, [r3, #16]
          break;
 8001abe:	e009      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	615a      	str	r2, [r3, #20]
          break;
 8001aca:	e003      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
          break;
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x130>
          break;
 8001ad2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d801      	bhi.n	8001ade <HAL_GPIO_Init+0x13a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	e001      	b.n	8001ae2 <HAL_GPIO_Init+0x13e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	2bff      	cmp	r3, #255	; 0xff
 8001ae8:	d802      	bhi.n	8001af0 <HAL_GPIO_Init+0x14c>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x152>
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3b08      	subs	r3, #8
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	210f      	movs	r1, #15
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	6a39      	ldr	r1, [r7, #32]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	431a      	orrs	r2, r3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80b1 	beq.w	8001c86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_GPIO_Init+0x2b8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b3c:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3302      	adds	r3, #2
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a40      	ldr	r2, [pc, #256]	; (8001c64 <HAL_GPIO_Init+0x2c0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d013      	beq.n	8001b90 <HAL_GPIO_Init+0x1ec>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_GPIO_Init+0x2c4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d00d      	beq.n	8001b8c <HAL_GPIO_Init+0x1e8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d007      	beq.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_GPIO_Init+0x1e0>
 8001b80:	2303      	movs	r3, #3
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b84:	2304      	movs	r3, #4
 8001b86:	e004      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <HAL_GPIO_Init+0x1ee>
 8001b90:	2300      	movs	r3, #0
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	f002 0203 	and.w	r2, r2, #3
 8001b98:	0092      	lsls	r2, r2, #2
 8001b9a:	4093      	lsls	r3, r2
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ba2:	492f      	ldr	r1, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x2bc>)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	492c      	ldr	r1, [pc, #176]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bca:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4928      	ldr	r1, [pc, #160]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60cb      	str	r3, [r1, #12]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	491e      	ldr	r1, [pc, #120]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4918      	ldr	r1, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	4914      	ldr	r1, [pc, #80]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	490e      	ldr	r1, [pc, #56]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	600b      	str	r3, [r1, #0]
 8001c40:	e021      	b.n	8001c86 <HAL_GPIO_Init+0x2e2>
 8001c42:	bf00      	nop
 8001c44:	10320000 	.word	0x10320000
 8001c48:	10310000 	.word	0x10310000
 8001c4c:	10220000 	.word	0x10220000
 8001c50:	10210000 	.word	0x10210000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10110000 	.word	0x10110000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	40011000 	.word	0x40011000
 8001c70:	40011400 	.word	0x40011400
 8001c74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4909      	ldr	r1, [pc, #36]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	3301      	adds	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae8e 	bne.w	80019b8 <HAL_GPIO_Init+0x14>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	807b      	strh	r3, [r7, #2]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cea:	787b      	ldrb	r3, [r7, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf6:	e003      	b.n	8001d00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	041a      	lsls	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 f806 	bl	8001d6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e12b      	b.n	8001fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fb62 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001de4:	f000 fcd8 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4a81      	ldr	r2, [pc, #516]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d807      	bhi.n	8001e04 <HAL_I2C_Init+0x84>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a80      	ldr	r2, [pc, #512]	; (8001ff8 <HAL_I2C_Init+0x278>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	bf94      	ite	ls
 8001dfc:	2301      	movls	r3, #1
 8001dfe:	2300      	movhi	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e006      	b.n	8001e12 <HAL_I2C_Init+0x92>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4a7d      	ldr	r2, [pc, #500]	; (8001ffc <HAL_I2C_Init+0x27c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	bf94      	ite	ls
 8001e0c:	2301      	movls	r3, #1
 8001e0e:	2300      	movhi	r3, #0
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0e7      	b.n	8001fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4a78      	ldr	r2, [pc, #480]	; (8002000 <HAL_I2C_Init+0x280>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0c9b      	lsrs	r3, r3, #18
 8001e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a6a      	ldr	r2, [pc, #424]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d802      	bhi.n	8001e54 <HAL_I2C_Init+0xd4>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	e009      	b.n	8001e68 <HAL_I2C_Init+0xe8>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	4a69      	ldr	r2, [pc, #420]	; (8002004 <HAL_I2C_Init+0x284>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	099b      	lsrs	r3, r3, #6
 8001e66:	3301      	adds	r3, #1
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	495c      	ldr	r1, [pc, #368]	; (8001ff4 <HAL_I2C_Init+0x274>)
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d819      	bhi.n	8001ebc <HAL_I2C_Init+0x13c>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e59      	subs	r1, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_I2C_Init+0x138>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1e59      	subs	r1, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb6:	e051      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001eb8:	2304      	movs	r3, #4
 8001eba:	e04f      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d111      	bne.n	8001ee8 <HAL_I2C_Init+0x168>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1e58      	subs	r0, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6859      	ldr	r1, [r3, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	440b      	add	r3, r1
 8001ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e012      	b.n	8001f0e <HAL_I2C_Init+0x18e>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Init+0x196>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e022      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10e      	bne.n	8001f3c <HAL_I2C_Init+0x1bc>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1e58      	subs	r0, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6859      	ldr	r1, [r3, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	440b      	add	r3, r1
 8001f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	e00f      	b.n	8001f5c <HAL_I2C_Init+0x1dc>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e58      	subs	r0, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	0099      	lsls	r1, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	6809      	ldr	r1, [r1, #0]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69da      	ldr	r2, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6911      	ldr	r1, [r2, #16]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68d2      	ldr	r2, [r2, #12]
 8001f96:	4311      	orrs	r1, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	000186a0 	.word	0x000186a0
 8001ff8:	001e847f 	.word	0x001e847f
 8001ffc:	003d08ff 	.word	0x003d08ff
 8002000:	431bde83 	.word	0x431bde83
 8002004:	10624dd3 	.word	0x10624dd3

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e26c      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e246      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fb46 	bl	8001774 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fb42 	bl	8001774 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1fa      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fb32 	bl	8001774 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fb2e 	bl	8001774 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1e6      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1ba      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fae7 	bl	8001774 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff fae3 	bl	8001774 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e19b      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fac6 	bl	8001774 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff fac2 	bl	8001774 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e17a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff faa6 	bl	8001774 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff faa2 	bl	8001774 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e15a      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 facc 	bl	80027e8 <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fa8c 	bl	8001774 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fa88 	bl	8001774 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e140      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b9e      	ldr	r3, [pc, #632]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b97      	ldr	r3, [pc, #604]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b94      	ldr	r3, [pc, #592]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a93      	ldr	r2, [pc, #588]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b8e      	ldr	r3, [pc, #568]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b8b      	ldr	r3, [pc, #556]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a8a      	ldr	r2, [pc, #552]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7ff fa49 	bl	8001774 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7ff fa45 	bl	8001774 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0fd      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_OscConfig+0x4f8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a7a      	ldr	r2, [pc, #488]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b73      	ldr	r3, [pc, #460]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a72      	ldr	r2, [pc, #456]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a69      	ldr	r2, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b67      	ldr	r3, [pc, #412]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a66      	ldr	r2, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b64      	ldr	r3, [pc, #400]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a63      	ldr	r2, [pc, #396]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff f9f9 	bl	8001774 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff f9f5 	bl	8001774 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ab      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b57      	ldr	r3, [pc, #348]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff f9e3 	bl	8001774 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7ff f9df 	bl	8001774 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e095      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a47      	ldr	r2, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8081 	beq.w	80024f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b42      	ldr	r3, [pc, #264]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b3f      	ldr	r3, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff f9b3 	bl	8001774 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff f9af 	bl	8001774 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e067      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b35      	ldr	r3, [pc, #212]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	492d      	ldr	r1, [pc, #180]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	4927      	ldr	r1, [pc, #156]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff f983 	bl	8001774 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff f97f 	bl	8001774 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e037      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e02f      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_RCC_OscConfig+0x4fc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff f96c 	bl	8001774 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff f968 	bl	8001774 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e020      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e018      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e013      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	40007000 	.word	0x40007000
 8002504:	42420060 	.word	0x42420060

08002508 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0d0      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b6a      	ldr	r3, [pc, #424]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 0207 	bic.w	r2, r3, #7
 8002532:	4965      	ldr	r1, [pc, #404]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0b8      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a58      	ldr	r2, [pc, #352]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800256e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a52      	ldr	r2, [pc, #328]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002586:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	494d      	ldr	r1, [pc, #308]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d040      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e07f      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e073      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06b      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff f8bc 	bl	8001774 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f8b8 	bl	8001774 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e053      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d210      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4922      	ldr	r1, [pc, #136]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e032      	b.n	80026be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4916      	ldr	r1, [pc, #88]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	490e      	ldr	r1, [pc, #56]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002696:	f000 f821 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 800269a:	4602      	mov	r2, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	5ccb      	ldrb	r3, [r1, r3]
 80026aa:	fa22 f303 	lsr.w	r3, r2, r3
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1cc>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1d0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f81a 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08003bc8 	.word	0x08003bc8
 80026d4:	20000098 	.word	0x20000098
 80026d8:	2000009c 	.word	0x2000009c

080026dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b04      	cmp	r3, #4
 8002704:	d002      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x30>
 8002706:	2b08      	cmp	r3, #8
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x36>
 800270a:	e027      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800270e:	613b      	str	r3, [r7, #16]
      break;
 8002710:	e027      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	0c9b      	lsrs	r3, r3, #18
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_RCC_GetSysClockFreq+0x9c>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_GetSysClockFreq+0x94>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0c5b      	lsrs	r3, r3, #17
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	4a11      	ldr	r2, [pc, #68]	; (800277c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800273e:	fb02 f203 	mul.w	r2, r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e004      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	613b      	str	r3, [r7, #16]
      break;
 800275a:	e002      	b.n	8002762 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_RCC_GetSysClockFreq+0x98>)
 800275e:	613b      	str	r3, [r7, #16]
      break;
 8002760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002762:	693b      	ldr	r3, [r7, #16]
}
 8002764:	4618      	mov	r0, r3
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40021000 	.word	0x40021000
 8002774:	007a1200 	.word	0x007a1200
 8002778:	08003be0 	.word	0x08003be0
 800277c:	08003bf0 	.word	0x08003bf0
 8002780:	003d0900 	.word	0x003d0900

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <HAL_RCC_GetHCLKFreq+0x10>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	20000098 	.word	0x20000098

08002798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800279c:	f7ff fff2 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	08003bd8 	.word	0x08003bd8

080027c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027c4:	f7ff ffde 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027c8:	4602      	mov	r2, r0
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0adb      	lsrs	r3, r3, #11
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	4903      	ldr	r1, [pc, #12]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027d6:	5ccb      	ldrb	r3, [r1, r3]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003bd8 	.word	0x08003bd8

080027e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <RCC_Delay+0x34>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <RCC_Delay+0x38>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0a5b      	lsrs	r3, r3, #9
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002804:	bf00      	nop
  }
  while (Delay --);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	60fa      	str	r2, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f9      	bne.n	8002804 <RCC_Delay+0x1c>
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000098 	.word	0x20000098
 8002820:	10624dd3 	.word	0x10624dd3

08002824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e041      	b.n	80028ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fe4e 	bl	80014ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3304      	adds	r3, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 f948 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d001      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e03a      	b.n	8002952 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a18      	ldr	r2, [pc, #96]	; (800295c <HAL_TIM_Base_Start_IT+0x98>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x58>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d009      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x58>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_TIM_Base_Start_IT+0x9c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x58>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a13      	ldr	r2, [pc, #76]	; (8002964 <HAL_TIM_Base_Start_IT+0xa0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d010      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	e007      	b.n	8002950 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40012c00 	.word	0x40012c00
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800

08002968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_TIM_ConfigClockSource+0x1c>
 8002980:	2302      	movs	r3, #2
 8002982:	e0b4      	b.n	8002aee <HAL_TIM_ConfigClockSource+0x186>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029bc:	d03e      	beq.n	8002a3c <HAL_TIM_ConfigClockSource+0xd4>
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	f200 8087 	bhi.w	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	f000 8086 	beq.w	8002ada <HAL_TIM_ConfigClockSource+0x172>
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	d87f      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029d4:	2b70      	cmp	r3, #112	; 0x70
 80029d6:	d01a      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xa6>
 80029d8:	2b70      	cmp	r3, #112	; 0x70
 80029da:	d87b      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b60      	cmp	r3, #96	; 0x60
 80029de:	d050      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x11a>
 80029e0:	2b60      	cmp	r3, #96	; 0x60
 80029e2:	d877      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b50      	cmp	r3, #80	; 0x50
 80029e6:	d03c      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xfa>
 80029e8:	2b50      	cmp	r3, #80	; 0x50
 80029ea:	d873      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d058      	beq.n	8002aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d86f      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b30      	cmp	r3, #48	; 0x30
 80029f6:	d064      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80029f8:	2b30      	cmp	r3, #48	; 0x30
 80029fa:	d86b      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d060      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	d867      	bhi.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05c      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d05a      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	e062      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f000 f950 	bl	8002cc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	609a      	str	r2, [r3, #8]
      break;
 8002a3a:	e04f      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f000 f939 	bl	8002cc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a5e:	609a      	str	r2, [r3, #8]
      break;
 8002a60:	e03c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f000 f8b0 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2150      	movs	r1, #80	; 0x50
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f907 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a80:	e02c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f000 f8ce 	bl	8002c30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2160      	movs	r1, #96	; 0x60
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f8f7 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002aa0:	e01c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	f000 f890 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2140      	movs	r1, #64	; 0x40
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f8e7 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002ac0:	e00c      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f000 f8de 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002ad2:	e003      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e000      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <TIM_Base_SetConfig+0xd0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <TIM_Base_SetConfig+0xd4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x30>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <TIM_Base_SetConfig+0xd8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a22      	ldr	r2, [pc, #136]	; (8002bc8 <TIM_Base_SetConfig+0xd0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00b      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d007      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <TIM_Base_SetConfig+0xd4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d003      	beq.n	8002b5a <TIM_Base_SetConfig+0x62>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <TIM_Base_SetConfig+0xd8>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d108      	bne.n	8002b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <TIM_Base_SetConfig+0xd0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f023 0201 	bic.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	611a      	str	r2, [r3, #16]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0201 	bic.w	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 030a 	bic.w	r3, r3, #10
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0210 	bic.w	r2, r3, #16
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f043 0307 	orr.w	r3, r3, #7
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e046      	b.n	8002da6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00e      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d009      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10c      	bne.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800

08002dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e042      	b.n	8002e54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fb9e 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2224      	movs	r2, #36	; 0x24
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f971 	bl	80030e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695a      	ldr	r2, [r3, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	; 0x28
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d175      	bne.n	8002f68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_UART_Transmit+0x2c>
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e06e      	b.n	8002f6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2221      	movs	r2, #33	; 0x21
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe fc6b 	bl	8001774 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_UART_Transmit+0x6c>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d104      	bne.n	8002ec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e003      	b.n	8002ed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ed0:	e02e      	b.n	8002f30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f848 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e03a      	b.n	8002f6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	e007      	b.n	8002f22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1cb      	bne.n	8002ed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f814 	bl	8002f72 <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e006      	b.n	8002f6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	e03b      	b.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d037      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe fbf2 	bl	8001774 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03a      	b.n	800301c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d023      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b80      	cmp	r3, #128	; 0x80
 8002fb8:	d020      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d01d      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d116      	bne.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f81d 	bl	8003024 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2208      	movs	r2, #8
 8002fee:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e00f      	b.n	800301c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	429a      	cmp	r2, r3
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	429a      	cmp	r2, r3
 8003018:	d0b4      	beq.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b095      	sub	sp, #84	; 0x54
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	330c      	adds	r3, #12
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800304c:	643a      	str	r2, [r7, #64]	; 0x40
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3314      	adds	r3, #20
 8003066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	64bb      	str	r3, [r7, #72]	; 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e5      	bne.n	8003060 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2b01      	cmp	r3, #1
 800309a:	d119      	bne.n	80030d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f023 0310 	bic.w	r3, r3, #16
 80030b2:	647b      	str	r3, [r7, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030bc:	61ba      	str	r2, [r7, #24]
 80030be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6979      	ldr	r1, [r7, #20]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	613b      	str	r3, [r7, #16]
   return(result);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030de:	bf00      	nop
 80030e0:	3754      	adds	r7, #84	; 0x54
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	4313      	orrs	r3, r2
 8003116:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003122:	f023 030c 	bic.w	r3, r3, #12
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	430b      	orrs	r3, r1
 800312e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <UART_SetConfig+0x114>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d103      	bne.n	8003158 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003150:	f7ff fb36 	bl	80027c0 <HAL_RCC_GetPCLK2Freq>
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	e002      	b.n	800315e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003158:	f7ff fb1e 	bl	8002798 <HAL_RCC_GetPCLK1Freq>
 800315c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	4a22      	ldr	r2, [pc, #136]	; (8003200 <UART_SetConfig+0x118>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	0119      	lsls	r1, r3, #4
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009a      	lsls	r2, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fbb2 f2f3 	udiv	r2, r2, r3
 8003194:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <UART_SetConfig+0x118>)
 8003196:	fba3 0302 	umull	r0, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2064      	movs	r0, #100	; 0x64
 800319e:	fb00 f303 	mul.w	r3, r0, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <UART_SetConfig+0x118>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	4419      	add	r1, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <UART_SetConfig+0x118>)
 80031ce:	fba3 0302 	umull	r0, r3, r3, r2
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2064      	movs	r0, #100	; 0x64
 80031d6:	fb00 f303 	mul.w	r3, r0, r3
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	3332      	adds	r3, #50	; 0x32
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <UART_SetConfig+0x118>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	440a      	add	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40013800 	.word	0x40013800
 8003200:	51eb851f 	.word	0x51eb851f

08003204 <__errno>:
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <__errno+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	200000a4 	.word	0x200000a4

08003210 <__libc_init_array>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	2600      	movs	r6, #0
 8003214:	4d0c      	ldr	r5, [pc, #48]	; (8003248 <__libc_init_array+0x38>)
 8003216:	4c0d      	ldr	r4, [pc, #52]	; (800324c <__libc_init_array+0x3c>)
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	42a6      	cmp	r6, r4
 800321e:	d109      	bne.n	8003234 <__libc_init_array+0x24>
 8003220:	f000 fc64 	bl	8003aec <_init>
 8003224:	2600      	movs	r6, #0
 8003226:	4d0a      	ldr	r5, [pc, #40]	; (8003250 <__libc_init_array+0x40>)
 8003228:	4c0a      	ldr	r4, [pc, #40]	; (8003254 <__libc_init_array+0x44>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	42a6      	cmp	r6, r4
 8003230:	d105      	bne.n	800323e <__libc_init_array+0x2e>
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	f855 3b04 	ldr.w	r3, [r5], #4
 8003238:	4798      	blx	r3
 800323a:	3601      	adds	r6, #1
 800323c:	e7ee      	b.n	800321c <__libc_init_array+0xc>
 800323e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003242:	4798      	blx	r3
 8003244:	3601      	adds	r6, #1
 8003246:	e7f2      	b.n	800322e <__libc_init_array+0x1e>
 8003248:	08003c28 	.word	0x08003c28
 800324c:	08003c28 	.word	0x08003c28
 8003250:	08003c28 	.word	0x08003c28
 8003254:	08003c2c 	.word	0x08003c2c

08003258 <malloc>:
 8003258:	4b02      	ldr	r3, [pc, #8]	; (8003264 <malloc+0xc>)
 800325a:	4601      	mov	r1, r0
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f000 b857 	b.w	8003310 <_malloc_r>
 8003262:	bf00      	nop
 8003264:	200000a4 	.word	0x200000a4

08003268 <memset>:
 8003268:	4603      	mov	r3, r0
 800326a:	4402      	add	r2, r0
 800326c:	4293      	cmp	r3, r2
 800326e:	d100      	bne.n	8003272 <memset+0xa>
 8003270:	4770      	bx	lr
 8003272:	f803 1b01 	strb.w	r1, [r3], #1
 8003276:	e7f9      	b.n	800326c <memset+0x4>

08003278 <_free_r>:
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	4605      	mov	r5, r0
 800327c:	2900      	cmp	r1, #0
 800327e:	d043      	beq.n	8003308 <_free_r+0x90>
 8003280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003284:	1f0c      	subs	r4, r1, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfb8      	it	lt
 800328a:	18e4      	addlt	r4, r4, r3
 800328c:	f000 f8ca 	bl	8003424 <__malloc_lock>
 8003290:	4a1e      	ldr	r2, [pc, #120]	; (800330c <_free_r+0x94>)
 8003292:	6813      	ldr	r3, [r2, #0]
 8003294:	4610      	mov	r0, r2
 8003296:	b933      	cbnz	r3, 80032a6 <_free_r+0x2e>
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	6014      	str	r4, [r2, #0]
 800329c:	4628      	mov	r0, r5
 800329e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032a2:	f000 b8c5 	b.w	8003430 <__malloc_unlock>
 80032a6:	42a3      	cmp	r3, r4
 80032a8:	d90a      	bls.n	80032c0 <_free_r+0x48>
 80032aa:	6821      	ldr	r1, [r4, #0]
 80032ac:	1862      	adds	r2, r4, r1
 80032ae:	4293      	cmp	r3, r2
 80032b0:	bf01      	itttt	eq
 80032b2:	681a      	ldreq	r2, [r3, #0]
 80032b4:	685b      	ldreq	r3, [r3, #4]
 80032b6:	1852      	addeq	r2, r2, r1
 80032b8:	6022      	streq	r2, [r4, #0]
 80032ba:	6063      	str	r3, [r4, #4]
 80032bc:	6004      	str	r4, [r0, #0]
 80032be:	e7ed      	b.n	800329c <_free_r+0x24>
 80032c0:	461a      	mov	r2, r3
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	b10b      	cbz	r3, 80032ca <_free_r+0x52>
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	d9fa      	bls.n	80032c0 <_free_r+0x48>
 80032ca:	6811      	ldr	r1, [r2, #0]
 80032cc:	1850      	adds	r0, r2, r1
 80032ce:	42a0      	cmp	r0, r4
 80032d0:	d10b      	bne.n	80032ea <_free_r+0x72>
 80032d2:	6820      	ldr	r0, [r4, #0]
 80032d4:	4401      	add	r1, r0
 80032d6:	1850      	adds	r0, r2, r1
 80032d8:	4283      	cmp	r3, r0
 80032da:	6011      	str	r1, [r2, #0]
 80032dc:	d1de      	bne.n	800329c <_free_r+0x24>
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4401      	add	r1, r0
 80032e4:	6011      	str	r1, [r2, #0]
 80032e6:	6053      	str	r3, [r2, #4]
 80032e8:	e7d8      	b.n	800329c <_free_r+0x24>
 80032ea:	d902      	bls.n	80032f2 <_free_r+0x7a>
 80032ec:	230c      	movs	r3, #12
 80032ee:	602b      	str	r3, [r5, #0]
 80032f0:	e7d4      	b.n	800329c <_free_r+0x24>
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	1821      	adds	r1, r4, r0
 80032f6:	428b      	cmp	r3, r1
 80032f8:	bf01      	itttt	eq
 80032fa:	6819      	ldreq	r1, [r3, #0]
 80032fc:	685b      	ldreq	r3, [r3, #4]
 80032fe:	1809      	addeq	r1, r1, r0
 8003300:	6021      	streq	r1, [r4, #0]
 8003302:	6063      	str	r3, [r4, #4]
 8003304:	6054      	str	r4, [r2, #4]
 8003306:	e7c9      	b.n	800329c <_free_r+0x24>
 8003308:	bd38      	pop	{r3, r4, r5, pc}
 800330a:	bf00      	nop
 800330c:	20000158 	.word	0x20000158

08003310 <_malloc_r>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	1ccd      	adds	r5, r1, #3
 8003314:	f025 0503 	bic.w	r5, r5, #3
 8003318:	3508      	adds	r5, #8
 800331a:	2d0c      	cmp	r5, #12
 800331c:	bf38      	it	cc
 800331e:	250c      	movcc	r5, #12
 8003320:	2d00      	cmp	r5, #0
 8003322:	4606      	mov	r6, r0
 8003324:	db01      	blt.n	800332a <_malloc_r+0x1a>
 8003326:	42a9      	cmp	r1, r5
 8003328:	d903      	bls.n	8003332 <_malloc_r+0x22>
 800332a:	230c      	movs	r3, #12
 800332c:	6033      	str	r3, [r6, #0]
 800332e:	2000      	movs	r0, #0
 8003330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003332:	f000 f877 	bl	8003424 <__malloc_lock>
 8003336:	4921      	ldr	r1, [pc, #132]	; (80033bc <_malloc_r+0xac>)
 8003338:	680a      	ldr	r2, [r1, #0]
 800333a:	4614      	mov	r4, r2
 800333c:	b99c      	cbnz	r4, 8003366 <_malloc_r+0x56>
 800333e:	4f20      	ldr	r7, [pc, #128]	; (80033c0 <_malloc_r+0xb0>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b923      	cbnz	r3, 800334e <_malloc_r+0x3e>
 8003344:	4621      	mov	r1, r4
 8003346:	4630      	mov	r0, r6
 8003348:	f000 f83c 	bl	80033c4 <_sbrk_r>
 800334c:	6038      	str	r0, [r7, #0]
 800334e:	4629      	mov	r1, r5
 8003350:	4630      	mov	r0, r6
 8003352:	f000 f837 	bl	80033c4 <_sbrk_r>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	d123      	bne.n	80033a2 <_malloc_r+0x92>
 800335a:	230c      	movs	r3, #12
 800335c:	4630      	mov	r0, r6
 800335e:	6033      	str	r3, [r6, #0]
 8003360:	f000 f866 	bl	8003430 <__malloc_unlock>
 8003364:	e7e3      	b.n	800332e <_malloc_r+0x1e>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	1b5b      	subs	r3, r3, r5
 800336a:	d417      	bmi.n	800339c <_malloc_r+0x8c>
 800336c:	2b0b      	cmp	r3, #11
 800336e:	d903      	bls.n	8003378 <_malloc_r+0x68>
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	441c      	add	r4, r3
 8003374:	6025      	str	r5, [r4, #0]
 8003376:	e004      	b.n	8003382 <_malloc_r+0x72>
 8003378:	6863      	ldr	r3, [r4, #4]
 800337a:	42a2      	cmp	r2, r4
 800337c:	bf0c      	ite	eq
 800337e:	600b      	streq	r3, [r1, #0]
 8003380:	6053      	strne	r3, [r2, #4]
 8003382:	4630      	mov	r0, r6
 8003384:	f000 f854 	bl	8003430 <__malloc_unlock>
 8003388:	f104 000b 	add.w	r0, r4, #11
 800338c:	1d23      	adds	r3, r4, #4
 800338e:	f020 0007 	bic.w	r0, r0, #7
 8003392:	1ac2      	subs	r2, r0, r3
 8003394:	d0cc      	beq.n	8003330 <_malloc_r+0x20>
 8003396:	1a1b      	subs	r3, r3, r0
 8003398:	50a3      	str	r3, [r4, r2]
 800339a:	e7c9      	b.n	8003330 <_malloc_r+0x20>
 800339c:	4622      	mov	r2, r4
 800339e:	6864      	ldr	r4, [r4, #4]
 80033a0:	e7cc      	b.n	800333c <_malloc_r+0x2c>
 80033a2:	1cc4      	adds	r4, r0, #3
 80033a4:	f024 0403 	bic.w	r4, r4, #3
 80033a8:	42a0      	cmp	r0, r4
 80033aa:	d0e3      	beq.n	8003374 <_malloc_r+0x64>
 80033ac:	1a21      	subs	r1, r4, r0
 80033ae:	4630      	mov	r0, r6
 80033b0:	f000 f808 	bl	80033c4 <_sbrk_r>
 80033b4:	3001      	adds	r0, #1
 80033b6:	d1dd      	bne.n	8003374 <_malloc_r+0x64>
 80033b8:	e7cf      	b.n	800335a <_malloc_r+0x4a>
 80033ba:	bf00      	nop
 80033bc:	20000158 	.word	0x20000158
 80033c0:	2000015c 	.word	0x2000015c

080033c4 <_sbrk_r>:
 80033c4:	b538      	push	{r3, r4, r5, lr}
 80033c6:	2300      	movs	r3, #0
 80033c8:	4d05      	ldr	r5, [pc, #20]	; (80033e0 <_sbrk_r+0x1c>)
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	f7fe f916 	bl	8001600 <_sbrk>
 80033d4:	1c43      	adds	r3, r0, #1
 80033d6:	d102      	bne.n	80033de <_sbrk_r+0x1a>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b103      	cbz	r3, 80033de <_sbrk_r+0x1a>
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	bd38      	pop	{r3, r4, r5, pc}
 80033e0:	20000280 	.word	0x20000280

080033e4 <siprintf>:
 80033e4:	b40e      	push	{r1, r2, r3}
 80033e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033ea:	b500      	push	{lr}
 80033ec:	b09c      	sub	sp, #112	; 0x70
 80033ee:	ab1d      	add	r3, sp, #116	; 0x74
 80033f0:	9002      	str	r0, [sp, #8]
 80033f2:	9006      	str	r0, [sp, #24]
 80033f4:	9107      	str	r1, [sp, #28]
 80033f6:	9104      	str	r1, [sp, #16]
 80033f8:	4808      	ldr	r0, [pc, #32]	; (800341c <siprintf+0x38>)
 80033fa:	4909      	ldr	r1, [pc, #36]	; (8003420 <siprintf+0x3c>)
 80033fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003400:	9105      	str	r1, [sp, #20]
 8003402:	6800      	ldr	r0, [r0, #0]
 8003404:	a902      	add	r1, sp, #8
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	f000 f874 	bl	80034f4 <_svfiprintf_r>
 800340c:	2200      	movs	r2, #0
 800340e:	9b02      	ldr	r3, [sp, #8]
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	b01c      	add	sp, #112	; 0x70
 8003414:	f85d eb04 	ldr.w	lr, [sp], #4
 8003418:	b003      	add	sp, #12
 800341a:	4770      	bx	lr
 800341c:	200000a4 	.word	0x200000a4
 8003420:	ffff0208 	.word	0xffff0208

08003424 <__malloc_lock>:
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <__malloc_lock+0x8>)
 8003426:	f000 bafb 	b.w	8003a20 <__retarget_lock_acquire_recursive>
 800342a:	bf00      	nop
 800342c:	20000288 	.word	0x20000288

08003430 <__malloc_unlock>:
 8003430:	4801      	ldr	r0, [pc, #4]	; (8003438 <__malloc_unlock+0x8>)
 8003432:	f000 baf6 	b.w	8003a22 <__retarget_lock_release_recursive>
 8003436:	bf00      	nop
 8003438:	20000288 	.word	0x20000288

0800343c <__ssputs_r>:
 800343c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	688e      	ldr	r6, [r1, #8]
 8003442:	4682      	mov	sl, r0
 8003444:	429e      	cmp	r6, r3
 8003446:	460c      	mov	r4, r1
 8003448:	4690      	mov	r8, r2
 800344a:	461f      	mov	r7, r3
 800344c:	d838      	bhi.n	80034c0 <__ssputs_r+0x84>
 800344e:	898a      	ldrh	r2, [r1, #12]
 8003450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003454:	d032      	beq.n	80034bc <__ssputs_r+0x80>
 8003456:	6825      	ldr	r5, [r4, #0]
 8003458:	6909      	ldr	r1, [r1, #16]
 800345a:	3301      	adds	r3, #1
 800345c:	eba5 0901 	sub.w	r9, r5, r1
 8003460:	6965      	ldr	r5, [r4, #20]
 8003462:	444b      	add	r3, r9
 8003464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800346c:	106d      	asrs	r5, r5, #1
 800346e:	429d      	cmp	r5, r3
 8003470:	bf38      	it	cc
 8003472:	461d      	movcc	r5, r3
 8003474:	0553      	lsls	r3, r2, #21
 8003476:	d531      	bpl.n	80034dc <__ssputs_r+0xa0>
 8003478:	4629      	mov	r1, r5
 800347a:	f7ff ff49 	bl	8003310 <_malloc_r>
 800347e:	4606      	mov	r6, r0
 8003480:	b950      	cbnz	r0, 8003498 <__ssputs_r+0x5c>
 8003482:	230c      	movs	r3, #12
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f8ca 3000 	str.w	r3, [sl]
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003492:	81a3      	strh	r3, [r4, #12]
 8003494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003498:	464a      	mov	r2, r9
 800349a:	6921      	ldr	r1, [r4, #16]
 800349c:	f000 fad0 	bl	8003a40 <memcpy>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	6126      	str	r6, [r4, #16]
 80034ae:	444e      	add	r6, r9
 80034b0:	6026      	str	r6, [r4, #0]
 80034b2:	463e      	mov	r6, r7
 80034b4:	6165      	str	r5, [r4, #20]
 80034b6:	eba5 0509 	sub.w	r5, r5, r9
 80034ba:	60a5      	str	r5, [r4, #8]
 80034bc:	42be      	cmp	r6, r7
 80034be:	d900      	bls.n	80034c2 <__ssputs_r+0x86>
 80034c0:	463e      	mov	r6, r7
 80034c2:	4632      	mov	r2, r6
 80034c4:	4641      	mov	r1, r8
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	f000 fac8 	bl	8003a5c <memmove>
 80034cc:	68a3      	ldr	r3, [r4, #8]
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	1b9b      	subs	r3, r3, r6
 80034d2:	4432      	add	r2, r6
 80034d4:	2000      	movs	r0, #0
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	6022      	str	r2, [r4, #0]
 80034da:	e7db      	b.n	8003494 <__ssputs_r+0x58>
 80034dc:	462a      	mov	r2, r5
 80034de:	f000 fad7 	bl	8003a90 <_realloc_r>
 80034e2:	4606      	mov	r6, r0
 80034e4:	2800      	cmp	r0, #0
 80034e6:	d1e1      	bne.n	80034ac <__ssputs_r+0x70>
 80034e8:	4650      	mov	r0, sl
 80034ea:	6921      	ldr	r1, [r4, #16]
 80034ec:	f7ff fec4 	bl	8003278 <_free_r>
 80034f0:	e7c7      	b.n	8003482 <__ssputs_r+0x46>
	...

080034f4 <_svfiprintf_r>:
 80034f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f8:	4698      	mov	r8, r3
 80034fa:	898b      	ldrh	r3, [r1, #12]
 80034fc:	4607      	mov	r7, r0
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	460d      	mov	r5, r1
 8003502:	4614      	mov	r4, r2
 8003504:	b09d      	sub	sp, #116	; 0x74
 8003506:	d50e      	bpl.n	8003526 <_svfiprintf_r+0x32>
 8003508:	690b      	ldr	r3, [r1, #16]
 800350a:	b963      	cbnz	r3, 8003526 <_svfiprintf_r+0x32>
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	f7ff feff 	bl	8003310 <_malloc_r>
 8003512:	6028      	str	r0, [r5, #0]
 8003514:	6128      	str	r0, [r5, #16]
 8003516:	b920      	cbnz	r0, 8003522 <_svfiprintf_r+0x2e>
 8003518:	230c      	movs	r3, #12
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	e0d1      	b.n	80036c6 <_svfiprintf_r+0x1d2>
 8003522:	2340      	movs	r3, #64	; 0x40
 8003524:	616b      	str	r3, [r5, #20]
 8003526:	2300      	movs	r3, #0
 8003528:	9309      	str	r3, [sp, #36]	; 0x24
 800352a:	2320      	movs	r3, #32
 800352c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003530:	2330      	movs	r3, #48	; 0x30
 8003532:	f04f 0901 	mov.w	r9, #1
 8003536:	f8cd 800c 	str.w	r8, [sp, #12]
 800353a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80036e0 <_svfiprintf_r+0x1ec>
 800353e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003542:	4623      	mov	r3, r4
 8003544:	469a      	mov	sl, r3
 8003546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800354a:	b10a      	cbz	r2, 8003550 <_svfiprintf_r+0x5c>
 800354c:	2a25      	cmp	r2, #37	; 0x25
 800354e:	d1f9      	bne.n	8003544 <_svfiprintf_r+0x50>
 8003550:	ebba 0b04 	subs.w	fp, sl, r4
 8003554:	d00b      	beq.n	800356e <_svfiprintf_r+0x7a>
 8003556:	465b      	mov	r3, fp
 8003558:	4622      	mov	r2, r4
 800355a:	4629      	mov	r1, r5
 800355c:	4638      	mov	r0, r7
 800355e:	f7ff ff6d 	bl	800343c <__ssputs_r>
 8003562:	3001      	adds	r0, #1
 8003564:	f000 80aa 	beq.w	80036bc <_svfiprintf_r+0x1c8>
 8003568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800356a:	445a      	add	r2, fp
 800356c:	9209      	str	r2, [sp, #36]	; 0x24
 800356e:	f89a 3000 	ldrb.w	r3, [sl]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80a2 	beq.w	80036bc <_svfiprintf_r+0x1c8>
 8003578:	2300      	movs	r3, #0
 800357a:	f04f 32ff 	mov.w	r2, #4294967295
 800357e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003582:	f10a 0a01 	add.w	sl, sl, #1
 8003586:	9304      	str	r3, [sp, #16]
 8003588:	9307      	str	r3, [sp, #28]
 800358a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800358e:	931a      	str	r3, [sp, #104]	; 0x68
 8003590:	4654      	mov	r4, sl
 8003592:	2205      	movs	r2, #5
 8003594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003598:	4851      	ldr	r0, [pc, #324]	; (80036e0 <_svfiprintf_r+0x1ec>)
 800359a:	f000 fa43 	bl	8003a24 <memchr>
 800359e:	9a04      	ldr	r2, [sp, #16]
 80035a0:	b9d8      	cbnz	r0, 80035da <_svfiprintf_r+0xe6>
 80035a2:	06d0      	lsls	r0, r2, #27
 80035a4:	bf44      	itt	mi
 80035a6:	2320      	movmi	r3, #32
 80035a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ac:	0711      	lsls	r1, r2, #28
 80035ae:	bf44      	itt	mi
 80035b0:	232b      	movmi	r3, #43	; 0x2b
 80035b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035b6:	f89a 3000 	ldrb.w	r3, [sl]
 80035ba:	2b2a      	cmp	r3, #42	; 0x2a
 80035bc:	d015      	beq.n	80035ea <_svfiprintf_r+0xf6>
 80035be:	4654      	mov	r4, sl
 80035c0:	2000      	movs	r0, #0
 80035c2:	f04f 0c0a 	mov.w	ip, #10
 80035c6:	9a07      	ldr	r2, [sp, #28]
 80035c8:	4621      	mov	r1, r4
 80035ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035ce:	3b30      	subs	r3, #48	; 0x30
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d94e      	bls.n	8003672 <_svfiprintf_r+0x17e>
 80035d4:	b1b0      	cbz	r0, 8003604 <_svfiprintf_r+0x110>
 80035d6:	9207      	str	r2, [sp, #28]
 80035d8:	e014      	b.n	8003604 <_svfiprintf_r+0x110>
 80035da:	eba0 0308 	sub.w	r3, r0, r8
 80035de:	fa09 f303 	lsl.w	r3, r9, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	46a2      	mov	sl, r4
 80035e6:	9304      	str	r3, [sp, #16]
 80035e8:	e7d2      	b.n	8003590 <_svfiprintf_r+0x9c>
 80035ea:	9b03      	ldr	r3, [sp, #12]
 80035ec:	1d19      	adds	r1, r3, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	9103      	str	r1, [sp, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bfbb      	ittet	lt
 80035f6:	425b      	neglt	r3, r3
 80035f8:	f042 0202 	orrlt.w	r2, r2, #2
 80035fc:	9307      	strge	r3, [sp, #28]
 80035fe:	9307      	strlt	r3, [sp, #28]
 8003600:	bfb8      	it	lt
 8003602:	9204      	strlt	r2, [sp, #16]
 8003604:	7823      	ldrb	r3, [r4, #0]
 8003606:	2b2e      	cmp	r3, #46	; 0x2e
 8003608:	d10c      	bne.n	8003624 <_svfiprintf_r+0x130>
 800360a:	7863      	ldrb	r3, [r4, #1]
 800360c:	2b2a      	cmp	r3, #42	; 0x2a
 800360e:	d135      	bne.n	800367c <_svfiprintf_r+0x188>
 8003610:	9b03      	ldr	r3, [sp, #12]
 8003612:	3402      	adds	r4, #2
 8003614:	1d1a      	adds	r2, r3, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	9203      	str	r2, [sp, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfb8      	it	lt
 800361e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003622:	9305      	str	r3, [sp, #20]
 8003624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036f0 <_svfiprintf_r+0x1fc>
 8003628:	2203      	movs	r2, #3
 800362a:	4650      	mov	r0, sl
 800362c:	7821      	ldrb	r1, [r4, #0]
 800362e:	f000 f9f9 	bl	8003a24 <memchr>
 8003632:	b140      	cbz	r0, 8003646 <_svfiprintf_r+0x152>
 8003634:	2340      	movs	r3, #64	; 0x40
 8003636:	eba0 000a 	sub.w	r0, r0, sl
 800363a:	fa03 f000 	lsl.w	r0, r3, r0
 800363e:	9b04      	ldr	r3, [sp, #16]
 8003640:	3401      	adds	r4, #1
 8003642:	4303      	orrs	r3, r0
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364a:	2206      	movs	r2, #6
 800364c:	4825      	ldr	r0, [pc, #148]	; (80036e4 <_svfiprintf_r+0x1f0>)
 800364e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003652:	f000 f9e7 	bl	8003a24 <memchr>
 8003656:	2800      	cmp	r0, #0
 8003658:	d038      	beq.n	80036cc <_svfiprintf_r+0x1d8>
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <_svfiprintf_r+0x1f4>)
 800365c:	bb1b      	cbnz	r3, 80036a6 <_svfiprintf_r+0x1b2>
 800365e:	9b03      	ldr	r3, [sp, #12]
 8003660:	3307      	adds	r3, #7
 8003662:	f023 0307 	bic.w	r3, r3, #7
 8003666:	3308      	adds	r3, #8
 8003668:	9303      	str	r3, [sp, #12]
 800366a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366c:	4433      	add	r3, r6
 800366e:	9309      	str	r3, [sp, #36]	; 0x24
 8003670:	e767      	b.n	8003542 <_svfiprintf_r+0x4e>
 8003672:	460c      	mov	r4, r1
 8003674:	2001      	movs	r0, #1
 8003676:	fb0c 3202 	mla	r2, ip, r2, r3
 800367a:	e7a5      	b.n	80035c8 <_svfiprintf_r+0xd4>
 800367c:	2300      	movs	r3, #0
 800367e:	f04f 0c0a 	mov.w	ip, #10
 8003682:	4619      	mov	r1, r3
 8003684:	3401      	adds	r4, #1
 8003686:	9305      	str	r3, [sp, #20]
 8003688:	4620      	mov	r0, r4
 800368a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800368e:	3a30      	subs	r2, #48	; 0x30
 8003690:	2a09      	cmp	r2, #9
 8003692:	d903      	bls.n	800369c <_svfiprintf_r+0x1a8>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0c5      	beq.n	8003624 <_svfiprintf_r+0x130>
 8003698:	9105      	str	r1, [sp, #20]
 800369a:	e7c3      	b.n	8003624 <_svfiprintf_r+0x130>
 800369c:	4604      	mov	r4, r0
 800369e:	2301      	movs	r3, #1
 80036a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80036a4:	e7f0      	b.n	8003688 <_svfiprintf_r+0x194>
 80036a6:	ab03      	add	r3, sp, #12
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	462a      	mov	r2, r5
 80036ac:	4638      	mov	r0, r7
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <_svfiprintf_r+0x1f8>)
 80036b0:	a904      	add	r1, sp, #16
 80036b2:	f3af 8000 	nop.w
 80036b6:	1c42      	adds	r2, r0, #1
 80036b8:	4606      	mov	r6, r0
 80036ba:	d1d6      	bne.n	800366a <_svfiprintf_r+0x176>
 80036bc:	89ab      	ldrh	r3, [r5, #12]
 80036be:	065b      	lsls	r3, r3, #25
 80036c0:	f53f af2c 	bmi.w	800351c <_svfiprintf_r+0x28>
 80036c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036c6:	b01d      	add	sp, #116	; 0x74
 80036c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036cc:	ab03      	add	r3, sp, #12
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	462a      	mov	r2, r5
 80036d2:	4638      	mov	r0, r7
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <_svfiprintf_r+0x1f8>)
 80036d6:	a904      	add	r1, sp, #16
 80036d8:	f000 f87c 	bl	80037d4 <_printf_i>
 80036dc:	e7eb      	b.n	80036b6 <_svfiprintf_r+0x1c2>
 80036de:	bf00      	nop
 80036e0:	08003bf2 	.word	0x08003bf2
 80036e4:	08003bfc 	.word	0x08003bfc
 80036e8:	00000000 	.word	0x00000000
 80036ec:	0800343d 	.word	0x0800343d
 80036f0:	08003bf8 	.word	0x08003bf8

080036f4 <_printf_common>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	4616      	mov	r6, r2
 80036fa:	4699      	mov	r9, r3
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	690b      	ldr	r3, [r1, #16]
 8003700:	4607      	mov	r7, r0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfb8      	it	lt
 8003706:	4613      	movlt	r3, r2
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	b10a      	cbz	r2, 800371a <_printf_common+0x26>
 8003716:	3301      	adds	r3, #1
 8003718:	6033      	str	r3, [r6, #0]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	6833      	ldrmi	r3, [r6, #0]
 8003722:	3302      	addmi	r3, #2
 8003724:	6033      	strmi	r3, [r6, #0]
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	f015 0506 	ands.w	r5, r5, #6
 800372c:	d106      	bne.n	800373c <_printf_common+0x48>
 800372e:	f104 0a19 	add.w	sl, r4, #25
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	6832      	ldr	r2, [r6, #0]
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	42ab      	cmp	r3, r5
 800373a:	dc28      	bgt.n	800378e <_printf_common+0x9a>
 800373c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003740:	1e13      	subs	r3, r2, #0
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	bf18      	it	ne
 8003746:	2301      	movne	r3, #1
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d42d      	bmi.n	80037a8 <_printf_common+0xb4>
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d020      	beq.n	800379c <_printf_common+0xa8>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	68e5      	ldr	r5, [r4, #12]
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf18      	it	ne
 8003766:	2500      	movne	r5, #0
 8003768:	6832      	ldr	r2, [r6, #0]
 800376a:	f04f 0600 	mov.w	r6, #0
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	bf08      	it	eq
 8003772:	1aad      	subeq	r5, r5, r2
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf08      	it	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	4293      	cmp	r3, r2
 800377e:	bfc4      	itt	gt
 8003780:	1a9b      	subgt	r3, r3, r2
 8003782:	18ed      	addgt	r5, r5, r3
 8003784:	341a      	adds	r4, #26
 8003786:	42b5      	cmp	r5, r6
 8003788:	d11a      	bne.n	80037c0 <_printf_common+0xcc>
 800378a:	2000      	movs	r0, #0
 800378c:	e008      	b.n	80037a0 <_printf_common+0xac>
 800378e:	2301      	movs	r3, #1
 8003790:	4652      	mov	r2, sl
 8003792:	4649      	mov	r1, r9
 8003794:	4638      	mov	r0, r7
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d103      	bne.n	80037a4 <_printf_common+0xb0>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	3501      	adds	r5, #1
 80037a6:	e7c4      	b.n	8003732 <_printf_common+0x3e>
 80037a8:	2030      	movs	r0, #48	; 0x30
 80037aa:	18e1      	adds	r1, r4, r3
 80037ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037b6:	4422      	add	r2, r4
 80037b8:	3302      	adds	r3, #2
 80037ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037be:	e7c5      	b.n	800374c <_printf_common+0x58>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4622      	mov	r2, r4
 80037c4:	4649      	mov	r1, r9
 80037c6:	4638      	mov	r0, r7
 80037c8:	47c0      	blx	r8
 80037ca:	3001      	adds	r0, #1
 80037cc:	d0e6      	beq.n	800379c <_printf_common+0xa8>
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7d9      	b.n	8003786 <_printf_common+0x92>
	...

080037d4 <_printf_i>:
 80037d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	460c      	mov	r4, r1
 80037da:	7e27      	ldrb	r7, [r4, #24]
 80037dc:	4691      	mov	r9, r2
 80037de:	2f78      	cmp	r7, #120	; 0x78
 80037e0:	4680      	mov	r8, r0
 80037e2:	469a      	mov	sl, r3
 80037e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037ea:	d807      	bhi.n	80037fc <_printf_i+0x28>
 80037ec:	2f62      	cmp	r7, #98	; 0x62
 80037ee:	d80a      	bhi.n	8003806 <_printf_i+0x32>
 80037f0:	2f00      	cmp	r7, #0
 80037f2:	f000 80d9 	beq.w	80039a8 <_printf_i+0x1d4>
 80037f6:	2f58      	cmp	r7, #88	; 0x58
 80037f8:	f000 80a4 	beq.w	8003944 <_printf_i+0x170>
 80037fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003804:	e03a      	b.n	800387c <_printf_i+0xa8>
 8003806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800380a:	2b15      	cmp	r3, #21
 800380c:	d8f6      	bhi.n	80037fc <_printf_i+0x28>
 800380e:	a001      	add	r0, pc, #4	; (adr r0, 8003814 <_printf_i+0x40>)
 8003810:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003814:	0800386d 	.word	0x0800386d
 8003818:	08003881 	.word	0x08003881
 800381c:	080037fd 	.word	0x080037fd
 8003820:	080037fd 	.word	0x080037fd
 8003824:	080037fd 	.word	0x080037fd
 8003828:	080037fd 	.word	0x080037fd
 800382c:	08003881 	.word	0x08003881
 8003830:	080037fd 	.word	0x080037fd
 8003834:	080037fd 	.word	0x080037fd
 8003838:	080037fd 	.word	0x080037fd
 800383c:	080037fd 	.word	0x080037fd
 8003840:	0800398f 	.word	0x0800398f
 8003844:	080038b1 	.word	0x080038b1
 8003848:	08003971 	.word	0x08003971
 800384c:	080037fd 	.word	0x080037fd
 8003850:	080037fd 	.word	0x080037fd
 8003854:	080039b1 	.word	0x080039b1
 8003858:	080037fd 	.word	0x080037fd
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080037fd 	.word	0x080037fd
 8003864:	080037fd 	.word	0x080037fd
 8003868:	08003979 	.word	0x08003979
 800386c:	680b      	ldr	r3, [r1, #0]
 800386e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	600a      	str	r2, [r1, #0]
 8003878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387c:	2301      	movs	r3, #1
 800387e:	e0a4      	b.n	80039ca <_printf_i+0x1f6>
 8003880:	6825      	ldr	r5, [r4, #0]
 8003882:	6808      	ldr	r0, [r1, #0]
 8003884:	062e      	lsls	r6, r5, #24
 8003886:	f100 0304 	add.w	r3, r0, #4
 800388a:	d50a      	bpl.n	80038a2 <_printf_i+0xce>
 800388c:	6805      	ldr	r5, [r0, #0]
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	2d00      	cmp	r5, #0
 8003892:	da03      	bge.n	800389c <_printf_i+0xc8>
 8003894:	232d      	movs	r3, #45	; 0x2d
 8003896:	426d      	negs	r5, r5
 8003898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800389c:	230a      	movs	r3, #10
 800389e:	485e      	ldr	r0, [pc, #376]	; (8003a18 <_printf_i+0x244>)
 80038a0:	e019      	b.n	80038d6 <_printf_i+0x102>
 80038a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038a6:	6805      	ldr	r5, [r0, #0]
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	bf18      	it	ne
 80038ac:	b22d      	sxthne	r5, r5
 80038ae:	e7ef      	b.n	8003890 <_printf_i+0xbc>
 80038b0:	680b      	ldr	r3, [r1, #0]
 80038b2:	6825      	ldr	r5, [r4, #0]
 80038b4:	1d18      	adds	r0, r3, #4
 80038b6:	6008      	str	r0, [r1, #0]
 80038b8:	0628      	lsls	r0, r5, #24
 80038ba:	d501      	bpl.n	80038c0 <_printf_i+0xec>
 80038bc:	681d      	ldr	r5, [r3, #0]
 80038be:	e002      	b.n	80038c6 <_printf_i+0xf2>
 80038c0:	0669      	lsls	r1, r5, #25
 80038c2:	d5fb      	bpl.n	80038bc <_printf_i+0xe8>
 80038c4:	881d      	ldrh	r5, [r3, #0]
 80038c6:	2f6f      	cmp	r7, #111	; 0x6f
 80038c8:	bf0c      	ite	eq
 80038ca:	2308      	moveq	r3, #8
 80038cc:	230a      	movne	r3, #10
 80038ce:	4852      	ldr	r0, [pc, #328]	; (8003a18 <_printf_i+0x244>)
 80038d0:	2100      	movs	r1, #0
 80038d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038d6:	6866      	ldr	r6, [r4, #4]
 80038d8:	2e00      	cmp	r6, #0
 80038da:	bfa8      	it	ge
 80038dc:	6821      	ldrge	r1, [r4, #0]
 80038de:	60a6      	str	r6, [r4, #8]
 80038e0:	bfa4      	itt	ge
 80038e2:	f021 0104 	bicge.w	r1, r1, #4
 80038e6:	6021      	strge	r1, [r4, #0]
 80038e8:	b90d      	cbnz	r5, 80038ee <_printf_i+0x11a>
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	d04d      	beq.n	800398a <_printf_i+0x1b6>
 80038ee:	4616      	mov	r6, r2
 80038f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80038f4:	fb03 5711 	mls	r7, r3, r1, r5
 80038f8:	5dc7      	ldrb	r7, [r0, r7]
 80038fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038fe:	462f      	mov	r7, r5
 8003900:	42bb      	cmp	r3, r7
 8003902:	460d      	mov	r5, r1
 8003904:	d9f4      	bls.n	80038f0 <_printf_i+0x11c>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d10b      	bne.n	8003922 <_printf_i+0x14e>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	07df      	lsls	r7, r3, #31
 800390e:	d508      	bpl.n	8003922 <_printf_i+0x14e>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	6861      	ldr	r1, [r4, #4]
 8003914:	4299      	cmp	r1, r3
 8003916:	bfde      	ittt	le
 8003918:	2330      	movle	r3, #48	; 0x30
 800391a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800391e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003922:	1b92      	subs	r2, r2, r6
 8003924:	6122      	str	r2, [r4, #16]
 8003926:	464b      	mov	r3, r9
 8003928:	4621      	mov	r1, r4
 800392a:	4640      	mov	r0, r8
 800392c:	f8cd a000 	str.w	sl, [sp]
 8003930:	aa03      	add	r2, sp, #12
 8003932:	f7ff fedf 	bl	80036f4 <_printf_common>
 8003936:	3001      	adds	r0, #1
 8003938:	d14c      	bne.n	80039d4 <_printf_i+0x200>
 800393a:	f04f 30ff 	mov.w	r0, #4294967295
 800393e:	b004      	add	sp, #16
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	4834      	ldr	r0, [pc, #208]	; (8003a18 <_printf_i+0x244>)
 8003946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800394a:	680e      	ldr	r6, [r1, #0]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003952:	061f      	lsls	r7, r3, #24
 8003954:	600e      	str	r6, [r1, #0]
 8003956:	d514      	bpl.n	8003982 <_printf_i+0x1ae>
 8003958:	07d9      	lsls	r1, r3, #31
 800395a:	bf44      	itt	mi
 800395c:	f043 0320 	orrmi.w	r3, r3, #32
 8003960:	6023      	strmi	r3, [r4, #0]
 8003962:	b91d      	cbnz	r5, 800396c <_printf_i+0x198>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	f023 0320 	bic.w	r3, r3, #32
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	2310      	movs	r3, #16
 800396e:	e7af      	b.n	80038d0 <_printf_i+0xfc>
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f043 0320 	orr.w	r3, r3, #32
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	2378      	movs	r3, #120	; 0x78
 800397a:	4828      	ldr	r0, [pc, #160]	; (8003a1c <_printf_i+0x248>)
 800397c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003980:	e7e3      	b.n	800394a <_printf_i+0x176>
 8003982:	065e      	lsls	r6, r3, #25
 8003984:	bf48      	it	mi
 8003986:	b2ad      	uxthmi	r5, r5
 8003988:	e7e6      	b.n	8003958 <_printf_i+0x184>
 800398a:	4616      	mov	r6, r2
 800398c:	e7bb      	b.n	8003906 <_printf_i+0x132>
 800398e:	680b      	ldr	r3, [r1, #0]
 8003990:	6826      	ldr	r6, [r4, #0]
 8003992:	1d1d      	adds	r5, r3, #4
 8003994:	6960      	ldr	r0, [r4, #20]
 8003996:	600d      	str	r5, [r1, #0]
 8003998:	0635      	lsls	r5, r6, #24
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	d501      	bpl.n	80039a2 <_printf_i+0x1ce>
 800399e:	6018      	str	r0, [r3, #0]
 80039a0:	e002      	b.n	80039a8 <_printf_i+0x1d4>
 80039a2:	0671      	lsls	r1, r6, #25
 80039a4:	d5fb      	bpl.n	800399e <_printf_i+0x1ca>
 80039a6:	8018      	strh	r0, [r3, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	4616      	mov	r6, r2
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	e7ba      	b.n	8003926 <_printf_i+0x152>
 80039b0:	680b      	ldr	r3, [r1, #0]
 80039b2:	1d1a      	adds	r2, r3, #4
 80039b4:	600a      	str	r2, [r1, #0]
 80039b6:	681e      	ldr	r6, [r3, #0]
 80039b8:	2100      	movs	r1, #0
 80039ba:	4630      	mov	r0, r6
 80039bc:	6862      	ldr	r2, [r4, #4]
 80039be:	f000 f831 	bl	8003a24 <memchr>
 80039c2:	b108      	cbz	r0, 80039c8 <_printf_i+0x1f4>
 80039c4:	1b80      	subs	r0, r0, r6
 80039c6:	6060      	str	r0, [r4, #4]
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	6123      	str	r3, [r4, #16]
 80039cc:	2300      	movs	r3, #0
 80039ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d2:	e7a8      	b.n	8003926 <_printf_i+0x152>
 80039d4:	4632      	mov	r2, r6
 80039d6:	4649      	mov	r1, r9
 80039d8:	4640      	mov	r0, r8
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	47d0      	blx	sl
 80039de:	3001      	adds	r0, #1
 80039e0:	d0ab      	beq.n	800393a <_printf_i+0x166>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	079b      	lsls	r3, r3, #30
 80039e6:	d413      	bmi.n	8003a10 <_printf_i+0x23c>
 80039e8:	68e0      	ldr	r0, [r4, #12]
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	4298      	cmp	r0, r3
 80039ee:	bfb8      	it	lt
 80039f0:	4618      	movlt	r0, r3
 80039f2:	e7a4      	b.n	800393e <_printf_i+0x16a>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4632      	mov	r2, r6
 80039f8:	4649      	mov	r1, r9
 80039fa:	4640      	mov	r0, r8
 80039fc:	47d0      	blx	sl
 80039fe:	3001      	adds	r0, #1
 8003a00:	d09b      	beq.n	800393a <_printf_i+0x166>
 8003a02:	3501      	adds	r5, #1
 8003a04:	68e3      	ldr	r3, [r4, #12]
 8003a06:	9903      	ldr	r1, [sp, #12]
 8003a08:	1a5b      	subs	r3, r3, r1
 8003a0a:	42ab      	cmp	r3, r5
 8003a0c:	dcf2      	bgt.n	80039f4 <_printf_i+0x220>
 8003a0e:	e7eb      	b.n	80039e8 <_printf_i+0x214>
 8003a10:	2500      	movs	r5, #0
 8003a12:	f104 0619 	add.w	r6, r4, #25
 8003a16:	e7f5      	b.n	8003a04 <_printf_i+0x230>
 8003a18:	08003c03 	.word	0x08003c03
 8003a1c:	08003c14 	.word	0x08003c14

08003a20 <__retarget_lock_acquire_recursive>:
 8003a20:	4770      	bx	lr

08003a22 <__retarget_lock_release_recursive>:
 8003a22:	4770      	bx	lr

08003a24 <memchr>:
 8003a24:	4603      	mov	r3, r0
 8003a26:	b510      	push	{r4, lr}
 8003a28:	b2c9      	uxtb	r1, r1
 8003a2a:	4402      	add	r2, r0
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	d101      	bne.n	8003a36 <memchr+0x12>
 8003a32:	2000      	movs	r0, #0
 8003a34:	e003      	b.n	8003a3e <memchr+0x1a>
 8003a36:	7804      	ldrb	r4, [r0, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	428c      	cmp	r4, r1
 8003a3c:	d1f6      	bne.n	8003a2c <memchr+0x8>
 8003a3e:	bd10      	pop	{r4, pc}

08003a40 <memcpy>:
 8003a40:	440a      	add	r2, r1
 8003a42:	4291      	cmp	r1, r2
 8003a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a48:	d100      	bne.n	8003a4c <memcpy+0xc>
 8003a4a:	4770      	bx	lr
 8003a4c:	b510      	push	{r4, lr}
 8003a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a52:	4291      	cmp	r1, r2
 8003a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a58:	d1f9      	bne.n	8003a4e <memcpy+0xe>
 8003a5a:	bd10      	pop	{r4, pc}

08003a5c <memmove>:
 8003a5c:	4288      	cmp	r0, r1
 8003a5e:	b510      	push	{r4, lr}
 8003a60:	eb01 0402 	add.w	r4, r1, r2
 8003a64:	d902      	bls.n	8003a6c <memmove+0x10>
 8003a66:	4284      	cmp	r4, r0
 8003a68:	4623      	mov	r3, r4
 8003a6a:	d807      	bhi.n	8003a7c <memmove+0x20>
 8003a6c:	1e43      	subs	r3, r0, #1
 8003a6e:	42a1      	cmp	r1, r4
 8003a70:	d008      	beq.n	8003a84 <memmove+0x28>
 8003a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a7a:	e7f8      	b.n	8003a6e <memmove+0x12>
 8003a7c:	4601      	mov	r1, r0
 8003a7e:	4402      	add	r2, r0
 8003a80:	428a      	cmp	r2, r1
 8003a82:	d100      	bne.n	8003a86 <memmove+0x2a>
 8003a84:	bd10      	pop	{r4, pc}
 8003a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a8e:	e7f7      	b.n	8003a80 <memmove+0x24>

08003a90 <_realloc_r>:
 8003a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a92:	4607      	mov	r7, r0
 8003a94:	4614      	mov	r4, r2
 8003a96:	460e      	mov	r6, r1
 8003a98:	b921      	cbnz	r1, 8003aa4 <_realloc_r+0x14>
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003aa0:	f7ff bc36 	b.w	8003310 <_malloc_r>
 8003aa4:	b922      	cbnz	r2, 8003ab0 <_realloc_r+0x20>
 8003aa6:	f7ff fbe7 	bl	8003278 <_free_r>
 8003aaa:	4625      	mov	r5, r4
 8003aac:	4628      	mov	r0, r5
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab0:	f000 f814 	bl	8003adc <_malloc_usable_size_r>
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d20f      	bcs.n	8003ad8 <_realloc_r+0x48>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4638      	mov	r0, r7
 8003abc:	f7ff fc28 	bl	8003310 <_malloc_r>
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d0f2      	beq.n	8003aac <_realloc_r+0x1c>
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4622      	mov	r2, r4
 8003aca:	f7ff ffb9 	bl	8003a40 <memcpy>
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff fbd1 	bl	8003278 <_free_r>
 8003ad6:	e7e9      	b.n	8003aac <_realloc_r+0x1c>
 8003ad8:	4635      	mov	r5, r6
 8003ada:	e7e7      	b.n	8003aac <_realloc_r+0x1c>

08003adc <_malloc_usable_size_r>:
 8003adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae0:	1f18      	subs	r0, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfbc      	itt	lt
 8003ae6:	580b      	ldrlt	r3, [r1, r0]
 8003ae8:	18c0      	addlt	r0, r0, r3
 8003aea:	4770      	bx	lr

08003aec <_init>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	bf00      	nop
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr

08003af8 <_fini>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr
